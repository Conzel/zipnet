use ml::convolutions::*;
use ml::transposed_convolutions::*;
use ndarray::{array, Array, Array4, Dimension};

// This file has been automatically generated by Jinja2 via the
// script generate_tests_torch.py.
// Please do not change this file by hand.

fn arr_allclose<D: Dimension>(arr1: &Array<f32, D>, arr2: &Array<f32, D>) -> bool {
    (arr1 - arr2).map(|x| (*x as f32).abs()).sum() < 1e-3
}

#[test]
fn test_py_implementation_random_arrays_transpose_convolve() {
    let test_input1 = array![
        [
            [0.23224549, 0.50588505, 0.86441349, 0.02310899],
            [0.45685568, 0.40417363, 0.25985479, 0.09913059],
            [0.79699722, 0.98004136, 0.25103959, 0.11597095],
            [0.72586276, 0.09967188, 0.29483115, 0.22645573]
        ],
        [
            [0.16055934, 0.43114743, 0.90784464, 0.96178347],
            [0.63828966, 0.534928, 0.68839463, 0.58409027],
            [0.75128938, 0.66844715, 0.66343357, 0.46953653],
            [0.46234563, 0.26003667, 0.77429137, 0.328285]
        ]
    ];

    let kernel1: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.83035486, 0.49730704, 0.99242497, 0.83261124, 0.8848362, 0.11227968, 0.83485613,
            0.38707261, 0.42852716, 0.33262721, 0.92346432, 0.73501345, 0.24397685, 0.79674084,
            0.95016545, 0.21724486, 0.86324733, 0.1932244, 0.51769137, 0.32076064, 0.96737749,
            0.00598922, 0.39202869, 0.24141203, 0.82792129, 0.69460177, 0.75072335, 0.97536332,
            0.24372894, 0.49899355, 0.31899844, 0.49396161,
        ],
    )
    .unwrap();
    let conv_layer1 = TransposedConvolutionLayer::new(kernel1, 1, Padding::Valid);
    let target_output1 = array![[
        [0.33144861, 0.93877232, 2.14995933, 2.42486811, 2.08468199, 1.53176212, 0.32774308],
        [1.29117489, 2.03965926, 3.85752916, 3.88530016, 2.67034006, 1.78802085, 0.51102138],
        [2.56450272, 3.6250782, 6.07848597, 7.38445759, 5.50631523, 3.62270617, 1.3816185],
        [3.25385857, 4.0704174, 7.32123041, 8.86655426, 6.00851917, 3.7842145, 1.57475841],
        [2.3201077, 3.09584594, 6.01488113, 6.52792072, 4.33433342, 2.58699965, 1.0201695],
        [1.07139742, 2.2325058, 4.3328476, 4.63894558, 2.80374193, 2.06971598, 0.74377227],
        [0.28978071, 0.89672804, 1.30699563, 1.32025993, 1.02147603, 0.76641357, 0.21135652]
    ]];
    let current_output1 = conv_layer1.transposed_convolve(&test_input1);

    assert!(
        arr_allclose(&current_output1, &target_output1),
        "{:?} was not equal to {:?}",
        current_output1,
        target_output1
    );

    let test_input2 = array![
        [
            [0.11416891, 0.68334946, 0.59653256, 0.12978615],
            [0.10638801, 0.1116066, 0.80415186, 0.28193729],
            [0.09670109, 0.17522074, 0.30331546, 0.39188403],
            [0.99324827, 0.44458251, 0.56043957, 0.07845372]
        ],
        [
            [0.09437273, 0.2022228, 0.30105924, 0.18510874],
            [0.50315732, 0.87208086, 0.63173667, 0.97677081],
            [0.2187118, 0.70001813, 0.39591292, 0.73465172],
            [0.00274565, 0.90799466, 0.22369012, 0.68718668]
        ]
    ];

    let kernel2: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.65592413, 0.66829443, 0.57882502, 0.55727569, 0.17275229, 0.35462692, 0.07000257,
            0.35331661, 0.61658299, 0.30442452, 0.54720806, 0.27519759, 0.7739332, 0.43991743,
            0.05888736, 0.2155859, 0.32379033, 0.42484936, 0.80078561, 0.16511487, 0.96516041,
            0.6095338, 0.78007901, 0.213527, 0.68177587, 0.20005976, 0.52148439, 0.56371771,
            0.81873294, 0.34419013, 0.70609356, 0.46725456,
        ],
    )
    .unwrap();
    let conv_layer2 = TransposedConvolutionLayer::new(kernel2, 1, Padding::Valid);
    let target_output2 = array![[
        [0.10544312, 0.63009578, 1.17300916, 1.30831325, 1.16595459, 0.60549837, 0.10289087],
        [0.34350771, 1.05167973, 2.48243189, 3.07452583, 2.501019, 1.92635369, 0.40377748],
        [0.77298731, 2.31738091, 3.62573767, 5.12469482, 3.61196852, 2.75166821, 0.78793538],
        [1.45444465, 3.69763303, 5.40806723, 6.95630741, 4.5571723, 3.38587093, 1.19519675],
        [0.87726128, 2.98591781, 3.76318431, 6.09720755, 3.47810674, 2.86637449, 1.21361589],
        [0.86819875, 2.02264524, 2.39704466, 3.52603173, 2.30642176, 1.47380984, 0.83672363],
        [0.7709558, 1.52537465, 1.18541622, 1.82960212, 0.98209536, 0.71518111, 0.33800462]
    ]];
    let current_output2 = conv_layer2.transposed_convolve(&test_input2);

    assert!(
        arr_allclose(&current_output2, &target_output2),
        "{:?} was not equal to {:?}",
        current_output2,
        target_output2
    );

    let test_input3 = array![
        [
            [0.23119005, 0.96067435, 0.29916614, 0.6806969],
            [0.91396963, 0.97284102, 0.01715484, 0.04093061],
            [0.4275515, 0.19486532, 0.25447013, 0.08197373],
            [0.6507138, 0.21445233, 0.11806071, 0.17637333]
        ],
        [
            [0.32952575, 0.59583681, 0.17714995, 0.77400486],
            [0.63882513, 0.25830766, 0.21258484, 0.3401532],
            [0.96206266, 0.62044975, 0.28326757, 0.20731905],
            [0.83910975, 0.63256076, 0.05410179, 0.97274446]
        ]
    ];

    let kernel3: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.74869779, 0.12974854, 0.79447089, 0.53723675, 0.69576324, 0.82454912, 0.37664894,
            0.67223724, 0.50744606, 0.7913009, 0.78958918, 0.64517467, 0.35058063, 0.22394987,
            0.14626299, 0.05523287, 0.46869732, 0.7351389, 0.07301666, 0.27983864, 0.10655331,
            0.9756451, 0.05932388, 0.77344522, 0.61317027, 0.08217912, 0.553476, 0.21154444,
            0.19400314, 0.16894332, 0.94862154, 0.92018245,
        ],
    )
    .unwrap();
    let conv_layer3 = TransposedConvolutionLayer::new(kernel3, 1, Padding::Valid);
    let target_output3 = array![[
        [0.32753932, 1.27076566, 1.07741833, 2.0646081, 1.59078193, 0.80760562, 0.58229184],
        [1.17966819, 2.68166137, 2.90846515, 3.59317803, 3.42571235, 0.76648784, 1.17341769],
        [1.79437029, 4.34355307, 4.12002563, 5.25384569, 3.58502722, 1.70414746, 0.995565],
        [2.28094077, 4.63879919, 5.18298769, 6.55483055, 4.09154367, 2.01300335, 1.43060899],
        [1.79337442, 3.17231703, 3.60327935, 4.09696531, 3.03438711, 1.17414796, 1.28293765],
        [1.18125379, 1.52752757, 2.56078267, 3.60036039, 1.55584753, 1.2486378, 0.51486933],
        [0.3909176, 0.48539084, 1.09795213, 1.72563052, 0.86634362, 1.00486755, 0.90484399]
    ]];
    let current_output3 = conv_layer3.transposed_convolve(&test_input3);

    assert!(
        arr_allclose(&current_output3, &target_output3),
        "{:?} was not equal to {:?}",
        current_output3,
        target_output3
    );

    let test_input4 = array![
        [
            [0.8976765, 0.52220882, 0.21455716, 0.20382801],
            [0.13832045, 0.58815186, 0.75384826, 0.96337642],
            [0.59598235, 0.75862404, 0.01639629, 0.3016201],
            [0.17905368, 0.19411111, 0.82684654, 0.28606841]
        ],
        [
            [0.04715753, 0.06193527, 0.64446747, 0.31424384],
            [0.10932652, 0.5231733, 0.44769425, 0.39186088],
            [0.02075461, 0.10706459, 0.5791381, 0.45745205],
            [0.44355087, 0.51992797, 0.01996619, 0.71309348]
        ]
    ];

    let kernel4: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.68690148, 0.39505484, 0.54699335, 0.31554793, 0.39265912, 0.60526183, 0.92840583,
            0.1213429, 0.38917129, 0.77997731, 0.82586903, 0.88367036, 0.57404126, 0.85618266,
            0.44077539, 0.63325499, 0.7577091, 0.73792097, 0.23396463, 0.3459607, 0.14433428,
            0.56662749, 0.95572013, 0.85192676, 0.6193624, 0.92937866, 0.02097251, 0.23979845,
            0.07907035, 0.95633018, 0.01872301, 0.41537429,
        ],
    )
    .unwrap();
    let conv_layer4 = TransposedConvolutionLayer::new(kernel4, 1, Padding::Valid);
    let target_output4 = array![[
        [0.65234697, 0.79506493, 1.3897593, 1.53815317, 0.76676339, 0.47567803, 0.17303352],
        [0.53713751, 1.71977353, 2.98360443, 3.42596745, 2.7861166, 2.07604027, 0.73200572],
        [0.87375689, 2.2906909, 4.09547758, 6.20104218, 4.44562101, 2.73840094, 0.9596436],
        [1.33666348, 3.49190831, 5.1373415, 6.96324778, 5.86188793, 3.88036966, 1.96816444],
        [0.46716663, 1.95862412, 4.41376448, 5.97549772, 5.34256554, 2.57181334, 1.79127669],
        [0.68816084, 1.92351604, 2.19613838, 3.15188837, 3.1040163, 1.37911177, 0.80480516],
        [0.13785592, 0.73002243, 1.2268672, 1.34054577, 1.63059354, 0.6713413, 0.47735494]
    ]];
    let current_output4 = conv_layer4.transposed_convolve(&test_input4);

    assert!(
        arr_allclose(&current_output4, &target_output4),
        "{:?} was not equal to {:?}",
        current_output4,
        target_output4
    );

    let test_input5 = array![
        [
            [0.45995144, 0.64512045, 0.85995776, 0.10583407],
            [0.44843149, 0.91603121, 0.56784169, 0.57392231],
            [0.26174001, 0.10541193, 0.6379088, 0.31216501],
            [0.87573343, 0.15632313, 0.73736545, 0.12863558]
        ],
        [
            [0.9590727, 0.2825182, 0.79587993, 0.81913607],
            [0.93811946, 0.53403529, 0.79628325, 0.62593821],
            [0.21138961, 0.1876398, 0.29817144, 0.6925418],
            [0.1792817, 0.26417359, 0.43096246, 0.76093377]
        ]
    ];

    let kernel5: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.62514907, 0.69654607, 0.04901551, 0.06003402, 0.69877169, 0.12188532, 0.06863045,
            0.98164632, 0.75263585, 0.66786885, 0.64306772, 0.56340058, 0.73104405, 0.65803694,
            0.07880943, 0.23246141, 0.7858138, 0.55886112, 0.48162453, 0.74894114, 0.64294605,
            0.77811541, 0.66253483, 0.99033882, 0.41137747, 0.4890013, 0.06506247, 0.9972559,
            0.83234049, 0.18129697, 0.49030397, 0.48294268,
        ],
    )
    .unwrap();
    let conv_layer5 = TransposedConvolutionLayer::new(kernel5, 1, Padding::Valid);
    let target_output5 = array![[
        [1.04119074, 1.48166895, 2.25471759, 2.66722727, 1.20728683, 1.04739749, 0.61983836],
        [1.95555687, 3.26370645, 4.46909714, 5.68030548, 3.76554084, 3.14239216, 1.41835964],
        [1.98696768, 3.65981197, 4.91611671, 7.92710686, 5.19908047, 3.81010962, 2.5972085],
        [2.86510134, 4.25685549, 6.39036417, 8.82445431, 5.19092703, 4.65962505, 2.93767071],
        [2.11982012, 2.53935099, 4.41563225, 6.10717249, 3.97941852, 3.43484831, 2.18207932],
        [1.10015237, 1.34267342, 2.48283672, 3.44464779, 1.95430911, 1.63388801, 1.23834336],
        [0.78942311, 0.94292974, 1.20543289, 1.72274232, 0.6559357, 0.76276577, 0.39739019]
    ]];
    let current_output5 = conv_layer5.transposed_convolve(&test_input5);

    assert!(
        arr_allclose(&current_output5, &target_output5),
        "{:?} was not equal to {:?}",
        current_output5,
        target_output5
    );

    let test_input6 = array![
        [
            [0.12433387, 0.96476976, 0.7292857, 0.73773443],
            [0.39093721, 0.92350285, 0.25497472, 0.13691517],
            [0.34584804, 0.58844589, 0.20412358, 0.00624331],
            [0.56834318, 0.22074685, 0.69736786, 0.08598604]
        ],
        [
            [0.05624962, 0.29992156, 0.25001068, 0.68899853],
            [0.89269228, 0.30140766, 0.63385394, 0.94817296],
            [0.464108, 0.89087913, 0.31388246, 0.57008056],
            [0.76289175, 0.00432913, 0.92347583, 0.96164151]
        ]
    ];

    let kernel6: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.29734896, 0.81149604, 0.83766772, 0.40603398, 0.97582668, 0.03124781, 0.56788189,
            0.12168682, 0.86728951, 0.70891321, 0.81502959, 0.45569643, 0.94203091, 0.03257993,
            0.41169245, 0.10524429, 0.29636486, 0.23071601, 0.89597745, 0.23406821, 0.65278766,
            0.3581413, 0.68854657, 0.95353164, 0.84424638, 0.40710647, 0.16538836, 0.63260361,
            0.68527244, 0.31145655, 0.49300047, 0.49084945,
        ],
    )
    .unwrap();
    let conv_layer6 = TransposedConvolutionLayer::new(kernel6, 1, Padding::Valid);
    let target_output6 = array![[
        [0.05364096, 0.48963368, 1.2975992, 2.21358299, 2.05446601, 1.58993769, 0.4608179],
        [0.53885478, 2.0483954, 3.33169365, 4.19134521, 2.81637931, 2.43661571, 1.02428377],
        [1.35993028, 3.45757437, 4.93861961, 7.33581066, 4.42973709, 3.24411821, 1.82879233],
        [2.28392267, 4.86885023, 6.14031315, 8.37482738, 5.56945515, 3.78159976, 1.88239896],
        [2.72439504, 3.57309723, 5.11989594, 5.81902933, 3.65884995, 2.92912149, 1.77071881],
        [1.78082657, 2.22923684, 3.20731926, 4.12561607, 2.19264412, 1.59027982, 0.92800224],
        [1.05818558, 0.46704125, 1.90840352, 1.57762468, 1.07004333, 1.0361712, 0.48107076]
    ]];
    let current_output6 = conv_layer6.transposed_convolve(&test_input6);

    assert!(
        arr_allclose(&current_output6, &target_output6),
        "{:?} was not equal to {:?}",
        current_output6,
        target_output6
    );

    let test_input7 = array![
        [
            [0.02828005, 0.88413816, 0.08669137, 0.14747888],
            [0.90374769, 0.69706857, 0.30263219, 0.00271136],
            [0.49293855, 0.99981271, 0.98342794, 0.91180951],
            [0.92644605, 0.04954946, 0.40840417, 0.46344219]
        ],
        [
            [0.78719302, 0.20486033, 0.4029006, 0.76861512],
            [0.24171825, 0.36729267, 0.19857672, 0.32654667],
            [0.36346476, 0.17108533, 0.30279541, 0.36422955],
            [0.58195867, 0.58513414, 0.7725577, 0.88385839]
        ]
    ];

    let kernel7: Array4<f32> = Array::from_shape_vec(
        (2, 1, 3, 3),
        vec![
            0.80932314, 0.89565293, 0.16141163, 0.06084506, 0.54924948, 0.60231775, 0.91577754,
            0.12382696, 0.294304, 0.36349937, 0.79487141, 0.14176326, 0.49541315, 0.29347779,
            0.37438836, 0.73060917, 0.28533514, 0.10216843,
        ],
    )
    .unwrap();
    let conv_layer7 = TransposedConvolutionLayer::new(kernel7, 1, Padding::Valid);
    let target_output7 = array![[
        [0.30903187, 1.44106627, 1.28749382, 0.9684006, 0.81414962, 0.1327662],
        [1.21099484, 2.1010859, 2.47589493, 1.87921619, 0.84862149, 0.4233197],
        [1.30683339, 3.58092952, 3.94126868, 4.22472763, 1.96604359, 0.44463122],
        [2.17562723, 3.15574694, 3.49908042, 3.87624073, 2.80934715, 0.91982675],
        [1.0616523, 2.17789102, 2.85907221, 2.78705525, 1.58636081, 0.91560769],
        [1.27360284, 0.75365293, 1.44365454, 1.41553926, 0.50870848, 0.22669531]
    ]];
    let current_output7 = conv_layer7.transposed_convolve(&test_input7);

    assert!(
        arr_allclose(&current_output7, &target_output7),
        "{:?} was not equal to {:?}",
        current_output7,
        target_output7
    );

    let test_input8 = array![
        [
            [0.55541974, 0.46504469, 0.17332367, 0.3212567],
            [0.36790222, 0.11517226, 0.08391169, 0.66567503],
            [0.38179011, 0.47639692, 0.81930284, 0.32803876],
            [0.56541388, 0.37452426, 0.66434167, 0.24304809]
        ],
        [
            [0.06236777, 0.77332523, 0.78207753, 0.61082655],
            [0.94774401, 0.08051699, 0.94621385, 0.00787854],
            [0.84173134, 0.19448081, 0.13019027, 0.66277754],
            [0.09286012, 0.58464369, 0.65122109, 0.70801625]
        ]
    ];

    let kernel8: Array4<f32> = Array::from_shape_vec(
        (2, 1, 3, 3),
        vec![
            0.70387627, 0.44558695, 0.44260015, 0.69783799, 0.32629655, 0.27405552, 0.99696945,
            0.17646311, 0.37098764, 0.87614516, 0.69403932, 0.21528777, 0.5237107, 0.44565287,
            0.19037103, 0.83812864, 0.70450526, 0.79290859,
        ],
    )
    .unwrap();
    let conv_layer8 = TransposedConvolutionLayer::new(kernel8, 1, Padding::Valid);
    let target_output8 = array![[
        [0.44558999, 1.29565263, 1.81040382, 1.75363743, 0.81217027, 0.27369174],
        [1.50957465, 1.91186619, 2.55315685, 2.46170306, 1.11635852, 0.50064987],
        [2.36530042, 3.17871332, 4.00767326, 4.6838522, 2.59209967, 1.07532167],
        [2.34771037, 2.94115591, 4.86970091, 4.35823774, 2.59006238, 0.72927904],
        [1.52931142, 2.09174657, 3.31611204, 2.71111131, 1.63287258, 0.84861475],
        [0.64152908, 1.02859092, 1.96950078, 2.01425362, 1.30451155, 0.65156001]
    ]];
    let current_output8 = conv_layer8.transposed_convolve(&test_input8);

    assert!(
        arr_allclose(&current_output8, &target_output8),
        "{:?} was not equal to {:?}",
        current_output8,
        target_output8
    );

    let test_input9 = array![
        [
            [0.45777786, 0.96684875, 0.48885154, 0.15208962],
            [0.8550647, 0.11583171, 0.56539786, 0.63707969],
            [0.2444331, 0.26558961, 0.70200128, 0.31950996],
            [0.00088664, 0.44229119, 0.82152084, 0.05462804]
        ],
        [
            [0.86386947, 0.92018557, 0.43966387, 0.13879521],
            [0.6324256, 0.47845422, 0.52424467, 0.8988874],
            [0.34291573, 0.53778486, 0.79191956, 0.69536623],
            [0.72673949, 0.63617105, 0.1036236, 0.56881529]
        ]
    ];

    let kernel9: Array4<f32> = Array::from_shape_vec(
        (2, 1, 3, 3),
        vec![
            0.64246501, 0.68493666, 0.62562757, 0.5914831, 0.84170303, 0.26191136, 0.63586736,
            0.14973171, 0.17741988, 0.84626372, 0.51744188, 0.89845975, 0.44348246, 0.26742129,
            0.5524051, 0.45841581, 0.05020873, 0.94144089,
        ],
    )
    .unwrap();
    let conv_layer9 = TransposedConvolutionLayer::new(kernel9, 1, Padding::Valid);
    let target_output9 = array![[
        [1.02516758, 2.16043711, 2.8870647, 2.20913935, 0.87684941, 0.21985336],
        [1.7384268, 2.98851585, 4.37807846, 3.77296305, 2.26226187, 1.32269394],
        [1.92056024, 3.28866601, 5.00592041, 5.3133111, 3.47403884, 1.64571238],
        [1.74585962, 2.34497881, 4.67665386, 5.04684258, 2.74940538, 1.97232151],
        [0.63544571, 1.20805597, 2.71834016, 2.69124365, 1.42335045, 1.03985786],
        [0.33371264, 0.60949087, 1.35238695, 1.10108924, 0.2800487, 0.54519802]
    ]];
    let current_output9 = conv_layer9.transposed_convolve(&test_input9);

    assert!(
        arr_allclose(&current_output9, &target_output9),
        "{:?} was not equal to {:?}",
        current_output9,
        target_output9
    );

    let test_input10 = array![
        [
            [0.87631007, 0.8967645, 0.90488428, 0.66888971],
            [0.28862263, 0.01719667, 0.89464476, 0.73840203],
            [0.43135418, 0.36634242, 0.99305737, 0.5723982],
            [0.33335866, 0.63178033, 0.86594314, 0.16760358]
        ],
        [
            [0.08334628, 0.14621608, 0.61695288, 0.59717393],
            [0.95570712, 0.19301597, 0.05311463, 0.89263908],
            [0.06703918, 0.38400442, 0.12217854, 0.11021607],
            [0.05716073, 0.03542558, 0.46326013, 0.94563347]
        ]
    ];

    let kernel10: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.80120881, 0.90998458, 0.31587509, 0.99483611, 0.19569386, 0.69320916, 0.28721202,
            0.22239834, 0.91989448, 0.64516698, 0.16384328, 0.26697786, 0.34233773, 0.97118685,
            0.1736736, 0.49766175, 0.11606233, 0.207445, 0.47700463, 0.49665623, 0.98654819,
            0.67733945, 0.48572266, 0.94583003, 0.30034919, 0.83523111, 0.80740195, 0.39818336,
            0.80498019, 0.33522689, 0.85493217, 0.32960872,
        ],
    )
    .unwrap();
    let conv_layer10 = TransposedConvolutionLayer::new(kernel10, 1, Padding::Valid);
    let target_output10 = array![[
        [0.71178067, 1.55018425, 1.95954096, 2.82283497, 2.27743268, 1.70276535, 0.96202576],
        [0.59588218, 1.48073912, 3.12428355, 4.74714088, 3.04347634, 2.84239197, 1.89150882],
        [2.18386412, 3.28954077, 4.23758125, 7.3357234, 4.93084002, 3.25584459, 2.04904962],
        [1.34390914, 3.98240066, 6.22773647, 7.87243366, 6.27174711, 4.53200579, 1.95022464],
        [1.40669525, 1.97695577, 4.14166212, 6.50560951, 3.66717529, 2.98887348, 1.79008329],
        [0.52545702, 1.73055339, 2.5287354, 3.54644442, 2.77530932, 1.93473268, 0.7424708],
        [0.16013451, 0.58771455, 1.40157688, 2.13963366, 1.35231316, 1.42120218, 0.39509895]
    ]];
    let current_output10 = conv_layer10.transposed_convolve(&test_input10);

    assert!(
        arr_allclose(&current_output10, &target_output10),
        "{:?} was not equal to {:?}",
        current_output10,
        target_output10
    );

    let test_input11 = array![
        [
            [0.01231102, 0.21975358, 0.79986305, 0.06471063],
            [0.77274995, 0.8312853, 0.77028167, 0.82208912],
            [0.11399209, 0.04418209, 0.41363551, 0.37213322],
            [0.05123908, 0.16918235, 0.56118462, 0.31676801]
        ],
        [
            [0.91666115, 0.99523086, 0.02213015, 0.55894298],
            [0.38572571, 0.99987621, 0.50932685, 0.49142755],
            [0.34928932, 0.69832363, 0.63120777, 0.75233946],
            [0.96101004, 0.99979722, 0.42995887, 0.86614874]
        ]
    ];

    let kernel11: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.0841737, 0.89585605, 0.11358444, 0.10170663, 0.68170774, 0.69930185, 0.31476195,
            0.37262206, 0.11822088, 0.58505236, 0.70728539, 0.35515, 0.20403187, 0.68248703,
            0.44291237, 0.27782661, 0.69825463, 0.9029227, 0.62402925, 0.41573935, 0.16815847,
            0.3392352, 0.80277765, 0.07096831, 0.85541025, 0.77221438, 0.53853285, 0.94955044,
            0.53288117, 0.73666345, 0.11740076, 0.37460857,
        ],
    )
    .unwrap();
    let conv_layer11 = TransposedConvolutionLayer::new(kernel11, 1, Padding::Valid);
    let target_output11 = array![[
        [0.64109915, 1.5521251, 1.75168574, 2.16063333, 1.10342264, 0.44669867, 0.23895609],
        [0.49691686, 2.44543099, 4.17651272, 4.16233015, 2.74266887, 1.45882428, 0.35169756],
        [1.6307174, 3.90726852, 4.97368908, 7.36590242, 5.59221506, 2.4445405, 1.24555647],
        [1.7240802, 4.93412018, 6.69015503, 8.65851688, 7.22002125, 3.6604228, 1.57033014],
        [0.87200558, 3.09825683, 5.24265289, 6.21477413, 5.21065521, 3.27589536, 1.43854249],
        [1.03750312, 2.36356592, 2.91578174, 4.51570511, 3.83146477, 1.9025898, 1.3201735],
        [0.52255857, 1.31020272, 1.3311131, 1.7924695, 1.57481933, 0.55896533, 0.41247335]
    ]];
    let current_output11 = conv_layer11.transposed_convolve(&test_input11);

    assert!(
        arr_allclose(&current_output11, &target_output11),
        "{:?} was not equal to {:?}",
        current_output11,
        target_output11
    );

    let test_input12 = array![
        [
            [0.67491605, 0.92208675, 0.98112951, 0.38428995],
            [0.84727753, 0.5904251, 0.49291241, 0.49100837],
            [0.11250915, 0.43514693, 0.49978712, 0.58982395],
            [0.32562397, 0.08288938, 0.12515384, 0.60863685]
        ],
        [
            [0.49698647, 0.25456929, 0.17941345, 0.24435801],
            [0.92576463, 0.36017429, 0.51685951, 0.14790155],
            [0.31631762, 0.68132181, 0.86361974, 0.87004618],
            [0.54062276, 0.00816072, 0.81253463, 0.84024462]
        ]
    ];

    let kernel12: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.16182604, 0.99689518, 0.57455207, 0.71637904, 0.85961168, 0.21274436, 0.50981584,
            0.02886825, 0.21751188, 0.23436014, 0.38305257, 0.6327846, 0.27748674, 0.84223387,
            0.9325366, 0.0989435, 0.60516263, 0.08400947, 0.49678063, 0.97340894, 0.83966809,
            0.3482415, 0.10386568, 0.74549535, 0.40149437, 0.4452185, 0.87148379, 0.44752907,
            0.90387198, 0.46964038, 0.48441091, 0.88147925,
        ],
    )
    .unwrap();
    let conv_layer12 = TransposedConvolutionLayer::new(kernel12, 1, Padding::Valid);
    let target_output12 = array![[
        [0.40997663, 1.01784563, 1.84262443, 2.82673883, 1.96482801, 1.21969032, 0.51315755],
        [1.69481909, 2.55897617, 3.63266826, 4.42329121, 2.71752429, 1.59518516, 0.68897831],
        [2.06163478, 2.61628246, 4.25970078, 5.76995993, 4.52714348, 3.69632411, 1.74641287],
        [1.93464959, 3.64018989, 6.57129049, 8.51599503, 5.62454176, 4.2891717, 2.54987097],
        [1.95720649, 2.50881052, 4.72095585, 6.4990406, 4.19764185, 3.72773623, 1.58552539],
        [0.6050145, 1.31820416, 2.83628917, 4.15007973, 3.76230836, 3.1904335, 1.58645678],
        [0.57901007, 0.55852675, 1.40834045, 2.00538659, 1.43293333, 1.70321536, 0.80087882]
    ]];
    let current_output12 = conv_layer12.transposed_convolve(&test_input12);

    assert!(
        arr_allclose(&current_output12, &target_output12),
        "{:?} was not equal to {:?}",
        current_output12,
        target_output12
    );

    let test_input13 = array![
        [
            [0.59467484, 0.58768096, 0.34565841, 0.46486275],
            [0.83226593, 0.64309967, 0.46776877, 0.22630381],
            [0.70366823, 0.77490347, 0.91060963, 0.48822479],
            [0.57024289, 0.10668963, 0.92969259, 0.00275485]
        ],
        [
            [0.95036079, 0.14900696, 0.54555528, 0.00645077],
            [0.21402212, 0.7504094, 0.01176434, 0.07800543],
            [0.0516187, 0.36804477, 0.8195282, 0.74270811],
            [0.185258, 0.2418856, 0.5231299, 0.23739756]
        ]
    ];

    let kernel13: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.92642604, 0.80638138, 0.09321253, 0.3954864, 0.27779006, 0.61428419, 0.71764105,
            0.33038311, 0.97665915, 0.42897722, 0.94963987, 0.37697606, 0.88512615, 0.73109218,
            0.63038553, 0.24837622, 0.21866089, 0.68867161, 0.69469835, 0.0114934, 0.70453161,
            0.35201788, 0.0989068, 0.90386671, 0.51265218, 0.926821, 0.76855408, 0.49553608,
            0.48527933, 0.09102922, 0.64307177, 0.16351804,
        ],
    )
    .unwrap();
    let conv_layer13 = TransposedConvolutionLayer::new(kernel13, 1, Padding::Valid);
    let target_output13 = array![[
        [0.75872898, 1.7110461, 1.73167562, 1.49091518, 1.02464759, 0.19078587, 0.18392105],
        [1.65258503, 2.54645967, 3.11215115, 3.55488372, 1.46963263, 1.2019676, 0.24981007],
        [2.11316323, 4.48153114, 5.72106647, 6.41259289, 4.51245737, 2.11337328, 0.52533472],
        [2.71074724, 4.34605455, 7.74516964, 7.51461029, 4.86176586, 2.93357134, 1.07690966],
        [1.84315526, 3.47208118, 5.51647663, 6.40785027, 4.68239117, 2.90021253, 0.83653742],
        [1.2997905, 2.02816176, 4.41054487, 4.04333067, 3.44446158, 1.94033647, 0.36138716],
        [0.59463876, 0.64557981, 1.65538502, 1.23968685, 1.01215076, 0.47085497, 0.03950303]
    ]];
    let current_output13 = conv_layer13.transposed_convolve(&test_input13);

    assert!(
        arr_allclose(&current_output13, &target_output13),
        "{:?} was not equal to {:?}",
        current_output13,
        target_output13
    );

    let test_input14 = array![
        [
            [0.30520669, 0.49957811, 0.3116739, 0.27853079],
            [0.13845452, 0.53867633, 0.85340833, 0.97655587],
            [0.36534721, 0.02803171, 0.64713535, 0.80936283],
            [0.38585196, 0.58985621, 0.17813227, 0.76870934]
        ],
        [
            [0.89900349, 0.43542842, 0.15628383, 0.1745854],
            [0.86026083, 0.93176335, 0.56799881, 0.47061769],
            [0.53949802, 0.05189181, 0.07629808, 0.84650086],
            [0.50658251, 0.71618065, 0.02412173, 0.95331388]
        ]
    ];

    let kernel14: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.94789123, 0.11517583, 0.85233842, 0.73321649, 0.07861274, 0.3375075, 0.58162109,
            0.64147438, 0.71849818, 0.897314, 0.09359703, 0.19160785, 0.85125346, 0.8526771,
            0.40986851, 0.50469854, 0.18144441, 0.47525636, 0.98244302, 0.1424162, 0.98820222,
            0.06972428, 0.20421812, 0.55776209, 0.30822515, 0.39205091, 0.06246058, 0.02439791,
            0.42704045, 0.32884196, 0.18523273, 0.65233307,
        ],
    )
    .unwrap();
    let conv_layer14 = TransposedConvolutionLayer::new(kernel14, 1, Padding::Valid);
    let target_output14 = array![[
        [0.4524219, 1.01496136, 1.7316283, 1.61127508, 0.96255541, 0.65970457, 0.22908717],
        [1.19971979, 1.73971748, 3.11905527, 4.36507845, 3.03192663, 2.48608923, 1.05909789],
        [1.80158019, 2.52377081, 3.6037581, 4.14210176, 3.45367384, 3.63569498, 1.66055012],
        [2.02786875, 3.49149084, 4.76655102, 7.82708883, 4.3125701, 3.53103805, 2.14378905],
        [1.44495296, 2.75252509, 3.16744447, 6.59692955, 4.66451073, 2.31265926, 2.00042868],
        [0.9747659, 1.72434688, 1.88734603, 3.38645744, 2.50805664, 1.03112555, 1.13123429],
        [0.54478902, 1.30354798, 1.15238798, 2.1209147, 1.81131721, 0.5972932, 1.00984466]
    ]];
    let current_output14 = conv_layer14.transposed_convolve(&test_input14);

    assert!(
        arr_allclose(&current_output14, &target_output14),
        "{:?} was not equal to {:?}",
        current_output14,
        target_output14
    );

    let test_input15 = array![
        [
            [0.8833122, 0.53135427, 0.2849727, 0.68437329],
            [0.46648682, 0.69454806, 0.27290355, 0.99412635],
            [0.01063524, 0.06917533, 0.19982048, 0.29424522],
            [0.41777326, 0.90395256, 0.4888085, 0.98954149]
        ],
        [
            [0.54784577, 0.52514096, 0.71397652, 0.96795374],
            [0.703604, 0.11441412, 0.22741624, 0.14197118],
            [0.14224136, 0.00554162, 0.08584995, 0.08854763],
            [0.55170396, 0.34441713, 0.01855595, 0.56010681]
        ]
    ];

    let kernel15: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.56593886, 0.16720486, 0.75972297, 0.44932321, 0.38319587, 0.71794273, 0.19173315,
            0.26728697, 0.56639508, 0.07816565, 0.67903226, 0.00826331, 0.54254976, 0.89380722,
            0.11534049, 0.71321382, 0.46833661, 0.42596257, 0.4862424, 0.93492688, 0.68173687,
            0.0525712, 0.28192635, 0.4604141, 0.96248486, 0.43289438, 0.34953818, 0.69026706,
            0.51265391, 0.69908698, 0.28793439, 0.06127732,
        ],
    )
    .unwrap();
    let conv_layer15 = TransposedConvolutionLayer::new(kernel15, 1, Padding::Valid);
    let target_output15 = array![[
        [0.75647694, 0.92771262, 1.7456522, 2.76053381, 1.82012677, 1.78615487, 1.21247077],
        [1.30549479, 2.04895306, 2.45119095, 4.12485552, 2.14561439, 1.96853554, 1.2080003],
        [1.75866127, 1.93276119, 3.20529652, 4.35110378, 2.67514467, 2.14316702, 1.21988106],
        [2.29738402, 3.59770679, 4.05830574, 7.192029, 4.23871565, 2.9239645, 1.74133039],
        [1.29293251, 2.36136627, 2.58506989, 3.70481586, 3.05757952, 1.14261115, 1.3036499],
        [0.84632218, 1.26429248, 1.25130618, 2.73381209, 1.32577145, 1.09176672, 0.6100859],
        [0.50949597, 1.42610383, 1.53049326, 1.80908978, 2.00356126, 0.62517023, 0.74007648]
    ]];
    let current_output15 = conv_layer15.transposed_convolve(&test_input15);

    assert!(
        arr_allclose(&current_output15, &target_output15),
        "{:?} was not equal to {:?}",
        current_output15,
        target_output15
    );

    let test_input16 = array![
        [
            [0.73615981, 0.8519083, 0.04873959, 0.88632006],
            [0.55267819, 0.35348675, 0.68609754, 0.07016035],
            [0.602, 0.6732832, 0.82135327, 0.18075775],
            [0.37878715, 0.62920417, 0.37063052, 0.32302735]
        ],
        [
            [0.90577848, 0.54883824, 0.57664813, 0.93476227],
            [0.2624883, 0.27476154, 0.09443506, 0.74253211],
            [0.01185389, 0.23280993, 0.17598269, 0.19381722],
            [0.65946395, 0.67435937, 0.92559452, 0.8947401]
        ]
    ];

    let kernel16: Array4<f32> = Array::from_shape_vec(
        (2, 1, 3, 3),
        vec![
            0.98693223, 0.08145659, 0.03987844, 0.76296625, 0.29654609, 0.38589397, 0.86821306,
            0.99967966, 0.77658385, 0.97871967, 0.12471338, 0.48183946, 0.79895421, 0.61783545,
            0.94045248, 0.71905491, 0.43614203, 0.11011575,
        ],
    )
    .unwrap();
    let conv_layer16 = TransposedConvolutionLayer::new(kernel16, 1, Padding::Valid);
    let target_output16 = array![[
        [1.61304307, 1.55086231, 1.21611726, 2.1639185, 0.46856946, 0.48575041],
        [2.08769894, 2.56193829, 3.20667982, 3.6488204, 1.57266426, 1.58170426],
        [2.52757359, 4.02340031, 4.6494832, 4.36325836, 2.38465977, 1.61722159],
        [2.15663004, 3.45108438, 4.68901777, 4.44064617, 2.19167423, 0.83228195],
        [1.34707117, 2.89754558, 4.47494888, 4.26274061, 2.5845561, 1.12783074],
        [0.80305874, 1.69747043, 2.27723598, 2.26091361, 1.10290587, 0.34938282]
    ]];
    let current_output16 = conv_layer16.transposed_convolve(&test_input16);

    assert!(
        arr_allclose(&current_output16, &target_output16),
        "{:?} was not equal to {:?}",
        current_output16,
        target_output16
    );

    let test_input17 = array![
        [
            [0.34765513, 0.39178115, 0.7308709, 0.34274808],
            [0.35493045, 0.8328545, 0.06045034, 0.49653239],
            [0.29012534, 0.55789277, 0.57551019, 0.4569207],
            [0.2188389, 0.51010307, 0.95294057, 0.69243168]
        ],
        [
            [0.91676561, 0.53584658, 0.67510863, 0.52303485],
            [0.96874585, 0.58568427, 0.70051905, 0.44720848],
            [0.44401752, 0.76227056, 0.18282856, 0.36082301],
            [0.06306251, 0.76909697, 0.11797102, 0.50691241]
        ]
    ];

    let kernel17: Array4<f32> = Array::from_shape_vec(
        (2, 1, 3, 3),
        vec![
            0.83869766, 0.93539648, 0.94569022, 0.21557524, 0.28468878, 0.00299157, 0.94424678,
            0.2590096, 0.12880773, 0.50224615, 0.63195637, 0.05983794, 0.21579172, 0.90917851,
            0.77259356, 0.9772731, 0.90224167, 0.52640993,
        ],
    )
    .unwrap();
    let conv_layer17 = TransposedConvolutionLayer::new(kernel17, 1, Padding::Valid);
    let target_output17 = array![[
        [0.75201952, 1.50226402, 2.04078412, 2.06301522, 1.38271523, 0.35543084],
        [1.05700445, 3.06944323, 3.5566144, 3.38674378, 1.94303536, 0.90144455],
        [1.9760977, 4.50126553, 6.02451801, 5.06989431, 3.31017232, 1.12017155],
        [1.65544295, 4.1544652, 5.43318796, 5.39588547, 3.38604045, 1.26466703],
        [0.76866096, 2.14305782, 2.9501853, 2.80414653, 1.36626518, 0.64250445],
        [0.26826721, 1.34685993, 1.90251875, 1.97304296, 0.8215512, 0.35603428]
    ]];
    let current_output17 = conv_layer17.transposed_convolve(&test_input17);

    assert!(
        arr_allclose(&current_output17, &target_output17),
        "{:?} was not equal to {:?}",
        current_output17,
        target_output17
    );

    let test_input18 = array![
        [
            [0.47108477, 0.04924011, 0.25460968, 0.99656238],
            [0.50701512, 0.28755965, 0.36141592, 0.02703854],
            [0.16006813, 0.70015163, 0.30561776, 0.8973991],
            [0.57343286, 0.73674763, 0.26068632, 0.61278396]
        ],
        [
            [0.96492469, 0.26253388, 0.27807142, 0.79624586],
            [0.67275447, 0.6407772, 0.12578371, 0.84160687],
            [0.3605408, 0.96801484, 0.1393529, 0.72915195],
            [0.9006433, 0.49849265, 0.5104628, 0.89867176]
        ]
    ];

    let kernel18: Array4<f32> = Array::from_shape_vec(
        (2, 1, 3, 3),
        vec![
            0.955501, 0.59073767, 0.86861896, 0.91761973, 0.57172958, 0.86013336, 0.39986316,
            0.29667477, 0.94210516, 0.89406526, 0.92121492, 0.05097519, 0.08086525, 0.96673279,
            0.59848206, 0.37690058, 0.47047686, 0.24334698,
        ],
    )
    .unwrap();
    let conv_layer18 = TransposedConvolutionLayer::new(kernel18, 1, Padding::Valid);
    let target_output18 = array![[
        [1.31282759, 1.44896197, 1.22121227, 2.12683678, 1.55755401, 0.90622175],
        [1.59624541, 3.03549576, 3.21341395, 2.98282361, 2.83655834, 1.40010273],
        [1.54699183, 3.92946625, 4.86715508, 4.5429635, 3.66742182, 2.47624063],
        [1.98548472, 4.3023243, 5.34527969, 5.97329712, 3.78163838, 2.01662874],
        [0.79891741, 2.77681923, 3.29227757, 3.89460325, 2.67996979, 2.08779621],
        [0.56874764, 1.07633531, 1.50913918, 1.71664011, 0.9744153, 0.79599601]
    ]];
    let current_output18 = conv_layer18.transposed_convolve(&test_input18);

    assert!(
        arr_allclose(&current_output18, &target_output18),
        "{:?} was not equal to {:?}",
        current_output18,
        target_output18
    );

    let test_input19 = array![
        [
            [0.94723157, 0.71601816, 0.66163847, 0.90634656],
            [0.49495855, 0.28245237, 0.41918304, 0.27396586],
            [0.42253863, 0.94620468, 0.04238893, 0.61110426],
            [0.95395429, 0.39995442, 0.66795813, 0.7064477]
        ],
        [
            [0.99121827, 0.90247559, 0.85239344, 0.70719117],
            [0.77630934, 0.10098496, 0.23122132, 0.86239354],
            [0.34863841, 0.10337279, 0.44741335, 0.02051973],
            [0.33192209, 0.76970787, 0.37064746, 0.27677528]
        ]
    ];

    let kernel19: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.4141578, 0.34976024, 0.20377244, 0.15038555, 0.63522565, 0.39588143, 0.29719462,
            0.58224157, 0.3832173, 0.74430689, 0.31255614, 0.26080993, 0.93509568, 0.7061453,
            0.48032829, 0.33021633, 0.13239637, 0.35350803, 0.38336865, 0.51017932, 0.63328423,
            0.07322941, 0.8859752, 0.41102257, 0.27946881, 0.91541525, 0.2293425, 0.81592788,
            0.0093977, 0.63983893, 0.7104612, 0.86655818,
        ],
    )
    .unwrap();
    let conv_layer19 = TransposedConvolutionLayer::new(kernel19, 1, Padding::Valid);
    let target_output19 = array![[
        [0.52353704, 1.0977366, 1.5293653, 2.14177752, 1.59670961, 0.99017775, 0.49709576],
        [1.53720009, 2.05183268, 3.206532, 4.34199381, 2.81900477, 2.19894648, 1.29956007],
        [1.66720104, 3.31177616, 4.4050827, 5.89068508, 3.95056105, 2.86513853, 1.42974877],
        [2.22992563, 4.77450562, 5.91585636, 8.36332035, 6.68966103, 3.42429233, 2.29890561],
        [1.54566407, 3.27989745, 4.05101252, 5.55524111, 3.58834195, 2.65132737, 1.53899097],
        [0.85672414, 2.78946972, 2.9649303, 3.8631103, 2.99021482, 1.47072887, 0.62965542],
        [0.89515781, 1.26723599, 2.09703207, 2.71362543, 2.05918431, 1.07772326, 0.47312248]
    ]];
    let current_output19 = conv_layer19.transposed_convolve(&test_input19);

    assert!(
        arr_allclose(&current_output19, &target_output19),
        "{:?} was not equal to {:?}",
        current_output19,
        target_output19
    );

    let test_input20 = array![
        [
            [0.93765805, 0.35742824, 0.60207121, 0.42087104],
            [0.64172531, 0.08560265, 0.02744765, 0.39207275],
            [0.21459883, 0.11062973, 0.87420401, 0.69151705],
            [0.17871671, 0.85303368, 0.85760948, 0.51250188]
        ],
        [
            [0.48142319, 0.3410254, 0.1897166, 0.55302912],
            [0.89934647, 0.99207644, 0.31536198, 0.46590055],
            [0.01530014, 0.69832446, 0.99070403, 0.02463103],
            [0.01077096, 0.67219725, 0.66763209, 0.73046063]
        ]
    ];

    let kernel20: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.76907682, 0.53152923, 0.06813734, 0.47991778, 0.84002591, 0.13388659, 0.69237571,
            0.56391527, 0.5064835, 0.98023208, 0.83162772, 0.45037648, 0.87442643, 0.3228065,
            0.77707546, 0.65587144, 0.15356175, 0.88312191, 0.18077046, 0.81715684, 0.01058917,
            0.54235333, 0.97475392, 0.52494562, 0.14190415, 0.90132593, 0.29823582, 0.59148337,
            0.51946688, 0.74204314, 0.11199604, 0.32003467,
        ],
    )
    .unwrap();
    let conv_layer20 = TransposedConvolutionLayer::new(kernel20, 1, Padding::Valid);
    let target_output20 = array![[
        [0.79505926, 1.25080633, 1.13423944, 1.82556617, 1.23762345, 0.57262129, 0.65389502],
        [1.42439628, 2.04400992, 3.05651855, 3.79849696, 2.86913943, 1.65138495, 1.09652233],
        [1.25920606, 2.55845785, 5.32718945, 6.65255356, 4.2833209, 3.08561754, 1.33432496],
        [1.84217215, 3.77452898, 6.73979568, 7.7871232, 7.08655739, 4.14843273, 2.15092516],
        [1.2894249, 2.5974431, 4.39575529, 6.49109364, 5.63122511, 3.93886733, 1.40472531],
        [0.2876443, 1.25244832, 4.12441969, 4.74702263, 4.1826849, 2.85574532, 1.1243031],
        [0.16186976, 1.16078293, 2.01097608, 2.45866609, 2.22327876, 1.2562083, 0.56990808]
    ]];
    let current_output20 = conv_layer20.transposed_convolve(&test_input20);

    assert!(
        arr_allclose(&current_output20, &target_output20),
        "{:?} was not equal to {:?}",
        current_output20,
        target_output20
    );

    let test_input21 = array![
        [
            [0.50086904, 0.22239626, 0.97291627, 0.86974588],
            [0.49535274, 0.54243551, 0.10466194, 0.10202583],
            [0.25952704, 0.62879491, 0.53307658, 0.26822981],
            [0.50847601, 0.19252869, 0.09730921, 0.31764306]
        ],
        [
            [0.14314991, 0.94600351, 0.6540288, 0.71126364],
            [0.97858765, 0.32067546, 0.7039669, 0.73717363],
            [0.90192675, 0.75033962, 0.9941749, 0.78996001],
            [0.61614864, 0.35973564, 0.96392444, 0.59018909]
        ]
    ];

    let kernel21: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.06196258, 0.83785075, 0.37142364, 0.79140057, 0.07532935, 0.9428474, 0.43666556,
            0.02624486, 0.42536419, 0.78015715, 0.85766182, 0.71461617, 0.33209484, 0.80531437,
            0.97302119, 0.68557511, 0.69086133, 0.61613714, 0.67111015, 0.12122969, 0.50159,
            0.74436352, 0.73831213, 0.23079262, 0.04572792, 0.19533794, 0.49251168, 0.61319175,
            0.44526327, 0.20337714, 0.781168, 0.70581635,
        ],
    )
    .unwrap();
    let conv_layer21 = TransposedConvolutionLayer::new(kernel21, 1, Padding::Valid);
    let target_output21 = array![[
        [0.12993188, 1.17519093, 1.56343436, 2.89462423, 2.25793099, 1.6496346, 0.77454364],
        [0.81629443, 2.34318614, 3.62521601, 4.63254452, 4.00051546, 1.78219247, 0.35709137],
        [1.38694942, 3.28425121, 5.76275444, 6.77763796, 6.17689991, 4.1187706, 1.53853118],
        [1.41465676, 4.15645361, 7.18106222, 9.39084721, 7.87333727, 5.13929081, 2.1355238],
        [1.09922719, 2.73428965, 5.28989315, 6.44027996, 5.28297234, 3.65290284, 1.41088176],
        [0.73224515, 1.55074358, 3.28126645, 4.59458733, 3.91214108, 3.16896844, 1.3303504],
        [0.44321063, 0.75890845, 1.66579771, 1.89451671, 1.60940444, 1.51717663, 0.63433331]
    ]];
    let current_output21 = conv_layer21.transposed_convolve(&test_input21);

    assert!(
        arr_allclose(&current_output21, &target_output21),
        "{:?} was not equal to {:?}",
        current_output21,
        target_output21
    );

    let test_input22 = array![
        [
            [0.46196784, 0.01862379, 0.90610073, 0.80737148],
            [0.71486742, 0.50324622, 0.50388184, 0.85626405],
            [0.24466414, 0.09893909, 0.05245275, 0.11470018],
            [0.90349659, 0.31138107, 0.82471947, 0.01722594]
        ],
        [
            [0.5932752, 0.70548972, 0.57845507, 0.26923983],
            [0.62891106, 0.11725764, 0.40164034, 0.69518119],
            [0.80738875, 0.6793183, 0.71761442, 0.50780315],
            [0.94015468, 0.35663, 0.00467546, 0.84130347]
        ]
    ];

    let kernel22: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.34600323, 0.40760242, 0.4710771, 0.98480686, 0.13988449, 0.40220328, 0.55816801,
            0.84533263, 0.42742897, 0.45769088, 0.83071573, 0.04634837, 0.39555076, 0.60654117,
            0.97791479, 0.34863748, 0.18171401, 0.93737433, 0.01817268, 0.31007424, 0.40953961,
            0.55591142, 0.20362667, 0.38996139, 0.26285828, 0.9031745, 0.95724048, 0.52430856,
            0.55766591, 0.65770666, 0.75144028, 0.53338896,
        ],
    )
    .unwrap();
    let conv_layer22 = TransposedConvolutionLayer::new(kernel22, 1, Padding::Valid);
    let target_output22 = array![[
        [0.26764879, 0.87906146, 1.31593013, 1.90033793, 1.25591552, 1.45692515, 0.87858933],
        [0.66922021, 1.88348353, 2.05254626, 3.82781172, 3.16608882, 2.53376937, 1.84630311],
        [0.94233704, 2.71045876, 4.12194586, 5.7373023, 4.72348928, 2.81320763, 1.44392109],
        [1.83278501, 4.47370386, 6.11668015, 7.65376186, 6.73180389, 4.55565405, 1.40207958],
        [1.46170974, 3.2493763, 4.95982695, 6.54091787, 4.94972897, 3.58961105, 1.2835269],
        [1.18033826, 2.58687401, 4.24256086, 3.70057368, 3.04965663, 1.75512075, 0.75274634],
        [0.88167095, 1.48840117, 2.34226179, 2.36823249, 1.67257953, 0.93905675, 0.45474759]
    ]];
    let current_output22 = conv_layer22.transposed_convolve(&test_input22);

    assert!(
        arr_allclose(&current_output22, &target_output22),
        "{:?} was not equal to {:?}",
        current_output22,
        target_output22
    );

    let test_input23 = array![
        [
            [0.94846253, 0.69645764, 0.96843016, 0.66096356],
            [0.17514281, 0.83987904, 0.40466376, 0.13681252],
            [0.53675128, 0.55692621, 0.5836484, 0.26183346],
            [0.24014333, 0.45519071, 0.36609648, 0.66722493]
        ],
        [
            [0.40931306, 0.76783566, 0.71030917, 0.87999191],
            [0.10468024, 0.23255507, 0.38094539, 0.40905062],
            [0.59137548, 0.66255471, 0.64648789, 0.59517514],
            [0.5136288, 0.05843278, 0.51399223, 0.38453336]
        ]
    ];

    let kernel23: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.69702778, 0.50475239, 0.06902273, 0.09784848, 0.35103089, 0.99617131, 0.65296593,
            0.44575031, 0.25736929, 0.95939058, 0.07333596, 0.80891676, 0.51967519, 0.25790987,
            0.98334417, 0.6337845, 0.69324831, 0.76697878, 0.61443019, 0.86792451, 0.25625055,
            0.35837705, 0.59633007, 0.83091686, 0.23309404, 0.65488359, 0.26520997, 0.34644812,
            0.87685893, 0.56456918, 0.50217426, 0.967748,
        ],
    )
    .unwrap();
    let conv_layer23 = TransposedConvolutionLayer::new(kernel23, 1, Padding::Valid);
    let target_output23 = array![[
        [0.94486034, 1.81042433, 2.42485571, 3.07228374, 2.24640799, 1.29756927, 0.82844079],
        [0.6324752, 2.44808483, 3.57918596, 4.53654623, 3.90699244, 2.60924196, 1.3942368],
        [1.21191907, 3.67463303, 5.14507818, 6.87474823, 5.29679823, 3.14347363, 1.78259444],
        [1.78469443, 4.00272274, 7.15321875, 9.29724598, 7.55814171, 5.05835438, 2.53319001],
        [0.67471194, 2.54271793, 3.78005123, 5.69680929, 4.74757051, 3.09347916, 1.5174973],
        [0.97901857, 2.04022431, 3.05549932, 4.33659458, 3.7398541, 2.17702556, 1.41487575],
        [0.57517654, 0.63970292, 1.28541219, 2.19474077, 1.35233307, 1.57865572, 0.79500818]
    ]];
    let current_output23 = conv_layer23.transposed_convolve(&test_input23);

    assert!(
        arr_allclose(&current_output23, &target_output23),
        "{:?} was not equal to {:?}",
        current_output23,
        target_output23
    );

    let test_input24 = array![
        [
            [0.96909704, 0.00554681, 0.48245647, 0.05388465],
            [0.2207341, 0.93746062, 0.75877589, 0.98550952],
            [0.38765016, 0.70755854, 0.35234871, 0.86497679],
            [0.36315935, 0.0597226, 0.40005399, 0.3090082]
        ],
        [
            [0.1404125, 0.32328949, 0.77128536, 0.74202918],
            [0.0151671, 0.34408022, 0.36001204, 0.32235638],
            [0.1375511, 0.39828563, 0.73056589, 0.77667642],
            [0.86437463, 0.90270169, 0.44541779, 0.34967113]
        ]
    ];

    let kernel24: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.75469949, 0.35844142, 0.80019287, 0.25439821, 0.72871477, 0.96180466, 0.34620104,
            0.94261591, 0.50686453, 0.61523259, 0.12266664, 0.55900903, 0.21047816, 0.16580609,
            0.2582814, 0.15493484, 0.20253018, 0.21612453, 0.50386606, 0.91294247, 0.80801025,
            0.83888204, 0.7180022, 0.20993725, 0.58702784, 0.52850523, 0.00845493, 0.90907092,
            0.63151247, 0.81394259, 0.25651567, 0.02755868,
        ],
    )
    .unwrap();
    let conv_layer24 = TransposedConvolutionLayer::new(kernel24, 1, Padding::Valid);
    let target_output24 = array![[
        [0.7598148, 0.44737315, 1.43839085, 1.07263434, 1.25092375, 1.2438767, 0.69113815],
        [0.98930979, 2.17472076, 2.92785716, 5.07924223, 3.23230743, 2.64085007, 0.75157678],
        [1.06715202, 2.83254528, 4.24615002, 6.71877098, 5.15494967, 4.18727636, 2.63042021],
        [1.25619912, 3.17180848, 5.95018435, 8.08969879, 7.10554981, 3.44979954, 2.24898648],
        [1.29633355, 3.21449232, 4.39791584, 5.5827384, 3.91313124, 2.26713395, 1.71584225],
        [0.85994172, 1.81711769, 2.14235687, 3.52153611, 2.45635653, 1.1667732, 0.64603347],
        [0.62230045, 1.34640312, 1.42566228, 1.04180646, 0.58756125, 0.24376464, 0.05751261]
    ]];
    let current_output24 = conv_layer24.transposed_convolve(&test_input24);

    assert!(
        arr_allclose(&current_output24, &target_output24),
        "{:?} was not equal to {:?}",
        current_output24,
        target_output24
    );

    let test_input25 = array![
        [
            [0.03389508, 0.30576277, 0.37300143, 0.13004215],
            [0.608248, 0.16874252, 0.27251563, 0.19374174],
            [0.22429509, 0.55013979, 0.49685606, 0.46965293],
            [0.11797722, 0.73022862, 0.38946074, 0.34076832]
        ],
        [
            [0.72125803, 0.86716635, 0.98185355, 0.15272116],
            [0.02051389, 0.27791748, 0.75870737, 0.23504322],
            [0.02695821, 0.39229695, 0.15247433, 0.48075755],
            [0.76108715, 0.22628488, 0.94135732, 0.30246892]
        ]
    ];

    let kernel25: Array4<f32> = Array::from_shape_vec(
        (2, 1, 3, 3),
        vec![
            0.01136111, 0.9598438, 0.8383011, 0.9723616, 0.47197653, 0.94492614, 0.21735137,
            0.31927554, 0.39669688, 0.05186762, 0.79388622, 0.17953912, 0.60369669, 0.96639477,
            0.48956135, 0.47275548, 0.41221554, 0.17531991,
        ],
    )
    .unwrap();
    let conv_layer25 = TransposedConvolutionLayer::new(kernel25, 1, Padding::Valid);
    let target_output25 = array![[
        [0.03779503, 0.65358245, 1.19498837, 1.55891347, 0.73503202, 0.1364339],
        [0.47635376, 2.15027595, 3.26152825, 3.12665176, 1.7793293, 0.40225995],
        [0.95611346, 1.68659878, 3.84216094, 3.54507565, 2.64845777, 0.85652745],
        [0.41708824, 2.01188517, 3.43966317, 4.30279493, 2.69297886, 1.13718367],
        [0.63567781, 2.02560568, 2.60553694, 3.24614406, 1.85396028, 0.7406742],
        [0.38545066, 0.61709285, 1.03633893, 1.05879939, 0.55301791, 0.18821055]
    ]];
    let current_output25 = conv_layer25.transposed_convolve(&test_input25);

    assert!(
        arr_allclose(&current_output25, &target_output25),
        "{:?} was not equal to {:?}",
        current_output25,
        target_output25
    );

    let test_input26 = array![
        [
            [0.84556717, 0.04869543, 0.81426052, 0.87818436],
            [0.95668298, 0.51194492, 0.7431968, 0.02038087],
            [0.00589341, 0.47047342, 0.10196105, 0.48561459],
            [0.29723151, 0.14647066, 0.2117447, 0.82616457]
        ],
        [
            [0.95831466, 0.91854632, 0.98925644, 0.57293056],
            [0.19675551, 0.33214344, 0.24979123, 0.60150461],
            [0.26777977, 0.91831289, 0.25964327, 0.38164377],
            [0.45220875, 0.09959481, 0.91934493, 0.80443255]
        ]
    ];

    let kernel26: Array4<f32> = Array::from_shape_vec(
        (2, 1, 3, 3),
        vec![
            0.44542108, 0.30965452, 0.42501828, 0.61946218, 0.89371026, 0.08402323, 0.52933582,
            0.81631795, 0.57557299, 0.08988074, 0.91843095, 0.84704402, 0.91947679, 0.49461111,
            0.24117837, 0.97676102, 0.99350736, 0.92321747,
        ],
    )
    .unwrap();
    let conv_layer26 = TransposedConvolutionLayer::new(kernel26, 1, Padding::Valid);
    let target_output26 = array![[
        [0.46276748, 1.24622905, 2.48142028, 2.40210605, 1.98215032, 0.85854185],
        [1.84875631, 2.83926415, 3.60434914, 3.53505158, 2.46143198, 0.73012948],
        [2.18386769, 4.68002415, 6.4479146, 6.52306747, 3.87062001, 1.71084535],
        [1.12149572, 3.42692709, 4.18236494, 4.68358803, 3.82992601, 1.73242211],
        [0.86459553, 2.08847737, 3.14528322, 4.02133083, 2.44972563, 0.89527553],
        [0.59903514, 0.86672068, 1.81714463, 2.48553586, 2.44425249, 1.21818423]
    ]];
    let current_output26 = conv_layer26.transposed_convolve(&test_input26);

    assert!(
        arr_allclose(&current_output26, &target_output26),
        "{:?} was not equal to {:?}",
        current_output26,
        target_output26
    );

    let test_input27 = array![
        [
            [0.58543872, 0.3386878, 0.53527257, 0.08310746],
            [0.6829108, 0.66831507, 0.78695294, 0.42882872],
            [0.84581493, 0.11308007, 0.07337866, 0.02265424],
            [0.66036183, 0.69046313, 0.47793465, 0.58312228]
        ],
        [
            [0.33399306, 0.14415831, 0.03236333, 0.31139955],
            [0.23037144, 0.23011816, 0.81936631, 0.9375789],
            [0.1625122, 0.11950397, 0.71464308, 0.6463952],
            [0.54896967, 0.85458619, 0.92134734, 0.52128466]
        ]
    ];

    let kernel27: Array4<f32> = Array::from_shape_vec(
        (2, 1, 3, 3),
        vec![
            0.1224625, 0.66150453, 0.7931158, 0.47318511, 0.48125225, 0.47184321, 0.33050995,
            0.32576006, 0.43639142, 0.01891187, 0.8601632, 0.02397078, 0.53442718, 0.52160712,
            0.40344155, 0.063399, 0.19041518, 0.02668436,
        ],
    )
    .unwrap();
    let conv_layer27 = TransposedConvolutionLayer::new(kernel27, 1, Padding::Valid);
    let target_output27 = array![[
        [0.07801072, 0.7187618, 0.88653278, 0.67006391, 0.74813938, 0.07337833],
        [0.54350352, 1.42936218, 2.21879911, 2.52937055, 2.20197392, 0.52743053],
        [0.76758218, 1.97882843, 3.12305403, 3.06846166, 2.36444736, 0.65863717],
        [0.81864369, 2.12075043, 3.68047571, 3.53519154, 2.58978558, 0.9586069],
        [0.89571106, 1.73900604, 2.53224921, 2.1966548, 1.33130944, 0.51258492],
        [0.25306028, 0.60203648, 0.90685135, 0.88102341, 0.52237058, 0.26837969]
    ]];
    let current_output27 = conv_layer27.transposed_convolve(&test_input27);

    assert!(
        arr_allclose(&current_output27, &target_output27),
        "{:?} was not equal to {:?}",
        current_output27,
        target_output27
    );

    let test_input28 = array![
        [
            [0.0778811, 0.15599572, 0.43387359, 0.87603626, 0.96685738],
            [0.79717972, 0.13885641, 0.52926343, 0.32682722, 0.95378457],
            [0.6078623, 0.27223235, 0.09553351, 0.84033139, 0.12087691],
            [0.60492355, 0.03379478, 0.13423896, 0.23765404, 0.31380126],
            [0.70387655, 0.79063565, 0.92111637, 0.65776236, 0.38434003]
        ],
        [
            [0.75843325, 0.28824069, 0.711263, 0.61748166, 0.1864088],
            [0.62435876, 0.20176977, 0.02156927, 0.06738148, 0.89821458],
            [0.2390027, 0.07549326, 0.65994953, 0.01747457, 0.12387725],
            [0.06532436, 0.08151705, 0.19784369, 0.64356047, 0.42640673],
            [0.68663127, 0.22805685, 0.023332, 0.59032554, 0.82264978]
        ]
    ];

    let kernel28: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.7051767, 0.62274988, 0.6347591, 0.72387776, 0.59705653, 0.88734705, 0.07542202,
            0.71210674, 0.69891017, 0.50705937, 0.12374776, 0.22591083, 0.26892264, 0.77916008,
            0.76115642, 0.91088001, 0.5503317, 0.9804811, 0.03202334, 0.46311813, 0.09919641,
            0.26757732, 0.28902138, 0.71404478, 0.50409789, 0.37557426, 0.52463993, 0.66929566,
            0.70255852, 0.66615477, 0.30578546, 0.35601365,
        ],
    )
    .unwrap();
    let conv_layer28 = TransposedConvolutionLayer::new(kernel28, 1, Padding::Valid);
    let target_output28 = array![[
        [
            0.4723098, 1.06076241, 1.15087223, 2.4410255, 2.47996593, 2.00419664, 1.539801,
            0.78621584
        ],
        [
            1.02749026, 1.71135187, 1.96563804, 3.43081188, 4.06063223, 4.04656982, 2.09351516,
            1.92801285
        ],
        [
            1.53483307, 2.40242815, 3.06021357, 5.90061092, 4.36420488, 4.1952796, 2.13810134,
            1.80861795
        ],
        [
            2.27484703, 2.93066454, 3.36409736, 5.99120617, 6.50020123, 5.13419008, 3.85765004,
            2.36285806
        ],
        [
            2.44023585, 4.21958733, 4.02745819, 6.54399633, 6.58239079, 5.77818584, 3.39932585,
            2.48591089
        ],
        [
            1.27546382, 2.45804739, 3.20434666, 4.87355471, 4.16915274, 3.44667864, 2.8051784,
            1.37158954
        ],
        [
            1.04664767, 1.8635416, 2.32557583, 3.44653845, 2.91635275, 2.21760869, 1.83768547,
            1.07506442
        ],
        [
            0.67168701, 1.37867832, 1.777776, 2.88199639, 3.09668136, 2.37598038, 1.35340381,
            0.64296222
        ]
    ]];
    let current_output28 = conv_layer28.transposed_convolve(&test_input28);

    assert!(
        arr_allclose(&current_output28, &target_output28),
        "{:?} was not equal to {:?}",
        current_output28,
        target_output28
    );

    let test_input29 = array![
        [
            [0.79421137, 0.20677378, 0.15500914, 0.79260269, 0.2906491],
            [0.82739329, 0.99714526, 0.53013745, 0.63807168, 0.155887],
            [0.53650107, 0.88344799, 0.28218989, 0.33523661, 0.1015854],
            [0.21515913, 0.0677837, 0.46811356, 0.25238919, 0.15366211],
            [0.31431349, 0.53114695, 0.79320408, 0.75357486, 0.07968733]
        ],
        [
            [0.62879649, 0.22009771, 0.59036101, 0.88166083, 0.92466225],
            [0.23308377, 0.75690122, 0.1372336, 0.72369506, 0.01938523],
            [0.98956198, 0.82807125, 0.978318, 0.90013693, 0.10934413],
            [0.31143917, 0.60268074, 0.89117837, 0.27851092, 0.29225165],
            [0.16005383, 0.76665682, 0.89907563, 0.45873184, 0.03297786]
        ]
    ];

    let kernel29: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.43542771, 0.20520075, 0.67032087, 0.70261325, 0.62342599, 0.49621491, 0.4153414,
            0.55879021, 0.40878415, 0.50555759, 0.81622063, 0.53394879, 0.63884591, 0.30410502,
            0.82015864, 0.29525921, 0.71163655, 0.97695178, 0.13750617, 0.10509957, 0.64217326,
            0.01179794, 0.86186355, 0.06657688, 0.22622024, 0.97906449, 0.01797699, 0.04377226,
            0.15706603, 0.63432918, 0.55940776, 0.11903285,
        ],
    )
    .unwrap();
    let conv_layer29 = TransposedConvolutionLayer::new(kernel29, 1, Padding::Valid);
    let target_output29 = array![[
        [
            0.79329622, 1.02394128, 1.36391258, 2.37408471, 2.16206121, 1.78648198, 0.97153026,
            0.30139551
        ],
        [
            1.42506921, 2.0420835, 3.31199479, 4.31944513, 3.95609426, 2.3351841, 2.05078578,
            0.33553866
        ],
        [
            2.0702219, 4.7232995, 4.94844103, 7.46293974, 5.33158016, 3.87258959, 1.61511731,
            0.3669323
        ],
        [
            2.28235149, 4.19963741, 7.52562904, 7.74682426, 6.74156952, 4.99155664, 2.32805395,
            0.48269147
        ],
        [
            1.59325314, 4.48135757, 7.34083652, 8.45212364, 6.74728346, 3.81651139, 1.82743144,
            0.27213961
        ],
        [
            0.95530903, 3.04436421, 4.93292618, 6.2322073, 4.78539467, 3.19368124, 1.14139259,
            0.18457383
        ],
        [
            0.35106385, 1.10711432, 2.9988203, 3.72121143, 3.22259617, 1.99799657, 0.88527268,
            0.12415016
        ],
        [
            0.22593692, 0.65684795, 1.64310884, 2.34135079, 1.97782683, 1.26104152, 0.36090839,
            0.02745387
        ]
    ]];
    let current_output29 = conv_layer29.transposed_convolve(&test_input29);

    assert!(
        arr_allclose(&current_output29, &target_output29),
        "{:?} was not equal to {:?}",
        current_output29,
        target_output29
    );

    let test_input30 = array![
        [
            [0.81783639, 0.92889114, 0.15461008, 0.99435533, 0.81658323],
            [0.13425252, 0.95622933, 0.17169783, 0.05023352, 0.67676961],
            [0.66343134, 0.32775852, 0.14548538, 0.66260466, 0.94353932],
            [0.56790004, 0.22986316, 0.7603229, 0.87461048, 0.26655029],
            [0.82373565, 0.28121006, 0.29389631, 0.30740639, 0.40319065]
        ],
        [
            [0.29072547, 0.22278657, 0.21566778, 0.04191615, 0.35444142],
            [0.59493501, 0.52809088, 0.62276681, 0.99950364, 0.34129519],
            [0.07482269, 0.95387172, 0.57593832, 0.63522647, 0.32445627],
            [0.2514082, 0.93379417, 0.82740845, 0.18509477, 0.60845979],
            [0.7941346, 0.13568091, 0.81633986, 0.7832342, 0.72699776]
        ]
    ];

    let kernel30: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.79382941, 0.24875637, 0.53098687, 0.97634182, 0.3654985, 0.61979239, 0.19588221,
            0.91466755, 0.82326292, 0.05417962, 0.2876998, 0.34076487, 0.22490515, 0.34424197,
            0.80249839, 0.86761757, 0.24573819, 0.94153974, 0.42271057, 0.84973081, 0.13301279,
            0.01450239, 0.12739219, 0.29802052, 0.1089614, 0.45345631, 0.20752071, 0.44084754,
            0.32884086, 0.78595556, 0.29699827, 0.86961945,
        ],
    )
    .unwrap();
    let conv_layer30 = TransposedConvolutionLayer::new(kernel30, 1, Padding::Valid);
    let target_output30 = array![[
        [
            0.72066492, 1.26929975, 1.173715, 2.67409849, 2.29163027, 1.4167707, 1.58986926,
            1.0984441
        ],
        [
            0.59036005, 2.36265302, 2.20857763, 3.79513931, 5.24772644, 2.55274653, 2.52908254,
            1.8033005
        ],
        [
            1.37821341, 2.20678639, 3.06632185, 5.02023935, 5.81401825, 3.34370852, 3.01052809,
            2.35216713
        ],
        [
            1.21992004, 3.36289287, 4.64312553, 7.60167789, 7.66900349, 6.17032385, 4.81449127,
            3.13478041
        ],
        [
            1.87022626, 3.11920762, 4.20321512, 8.43149471, 8.17818832, 5.923769, 4.87379551,
            2.78507757
        ],
        [
            1.07544303, 1.75322247, 3.66159701, 5.24151993, 4.65059996, 4.06406164, 3.2496202,
            2.04529953
        ],
        [
            0.97507799, 1.40288663, 2.59599495, 3.80713129, 3.76653099, 3.76854181, 2.03131223,
            1.21828055
        ],
        [
            0.44640628, 1.01558197, 1.43489134, 2.74072504, 1.89143205, 2.1543901, 1.48730373,
            0.9820267
        ]
    ]];
    let current_output30 = conv_layer30.transposed_convolve(&test_input30);

    assert!(
        arr_allclose(&current_output30, &target_output30),
        "{:?} was not equal to {:?}",
        current_output30,
        target_output30
    );

    let test_input31 = array![
        [
            [0.87364229, 0.1825079, 0.86532808, 0.11152316, 0.10165259],
            [0.30172202, 0.56348731, 0.79023945, 0.12142149, 0.89489484],
            [0.32732127, 0.16754848, 0.14866899, 0.72059694, 0.48512898],
            [0.17686241, 0.36138167, 0.34082386, 0.24096294, 0.5398071],
            [0.52981262, 0.84956124, 0.45151471, 0.01440341, 0.92154114]
        ],
        [
            [0.32281689, 0.9658324, 0.11643393, 0.02498931, 0.74842569],
            [0.71275232, 0.38320435, 0.31247431, 0.99616133, 0.10025226],
            [0.60567857, 0.81890575, 0.44458553, 0.2570787, 0.15552202],
            [0.58076191, 0.05135555, 0.30162073, 0.84052525, 0.06775604],
            [0.61146616, 0.77579256, 0.75543489, 0.9041999, 0.5885413]
        ]
    ];

    let kernel31: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.43739402, 0.91215477, 0.70433699, 0.71699253, 0.41252124, 0.49857915, 0.77542008,
            0.62377742, 0.58095854, 0.35906683, 0.62711568, 0.61327245, 0.54546532, 0.83928456,
            0.8303008, 0.18900541, 0.23060308, 0.5893513, 0.16549692, 0.61116033, 0.2488159,
            0.99599045, 0.39940433, 0.11897707, 0.15867555, 0.76753354, 0.31943668, 0.56480473,
            0.55483019, 0.40964801, 0.16849967, 0.04038839,
        ],
    )
    .unwrap();
    let conv_layer31 = TransposedConvolutionLayer::new(kernel31, 1, Padding::Valid);
    let target_output31 = array![[
        [
            0.45656848, 1.28970134, 1.80979311, 2.02455306, 1.68339276, 1.30808759, 0.29069358,
            0.53029221
        ],
        [
            0.73705226, 2.10281777, 3.73327112, 4.01031637, 3.61380744, 3.32950759, 1.79305816,
            0.85535717
        ],
        [
            1.14342368, 2.92652893, 4.6978035, 5.10657215, 5.9115591, 4.31603384, 2.35476327,
            1.49808073
        ],
        [
            1.44104791, 4.25729513, 5.65328503, 6.30070162, 6.78382206, 4.58441734, 3.45918489,
            1.4044416
        ],
        [
            1.43650699, 4.09747362, 5.74357796, 7.60320807, 7.87185383, 5.63296652, 3.76950526,
            1.92375708
        ],
        [
            1.08019507, 3.21259212, 4.11467934, 5.09308147, 5.64925289, 3.99284554, 2.62447309,
            1.11215067
        ],
        [
            0.82352048, 1.88817883, 2.73255777, 3.71764112, 4.09437084, 2.68316936, 1.82455409,
            1.00232971
        ],
        [
            0.62825435, 1.58898878, 2.23918486, 2.1588912, 1.90578973, 1.29469609, 0.9035669,
            0.19794649
        ]
    ]];
    let current_output31 = conv_layer31.transposed_convolve(&test_input31);

    assert!(
        arr_allclose(&current_output31, &target_output31),
        "{:?} was not equal to {:?}",
        current_output31,
        target_output31
    );

    let test_input32 = array![
        [
            [0.71880088, 0.05252765, 0.41155178, 0.6754611, 0.56760148],
            [0.26794126, 0.53823624, 0.61594402, 0.17735237, 0.6197911],
            [0.53880623, 0.47061966, 0.87098824, 0.0603164, 0.68002754],
            [0.23997463, 0.32445189, 0.17411814, 0.42630667, 0.2310866],
            [0.98491503, 0.023685, 0.17943049, 0.63610964, 0.66366728]
        ],
        [
            [0.30550994, 0.51622941, 0.48614911, 0.78047165, 0.16118859],
            [0.13860539, 0.24022589, 0.27965236, 0.00709001, 0.99179139],
            [0.45113099, 0.78944407, 0.71554165, 0.99642358, 0.85572855],
            [0.08051511, 0.48360799, 0.39250163, 0.64055591, 0.65542875],
            [0.00926249, 0.49451136, 0.92131654, 0.26704809, 0.41497941]
        ]
    ];

    let kernel32: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.62419057, 0.62992356, 0.72737785, 0.28075696, 0.63806643, 0.72403002, 0.95138586,
            0.15112722, 0.04702903, 0.03742034, 0.12904108, 0.40806047, 0.24292202, 0.96106272,
            0.15293901, 0.51126131, 0.71219521, 0.44103094, 0.09925622, 0.45871279, 0.22449211,
            0.37388383, 0.44769825, 0.68232305, 0.35010349, 0.90325622, 0.18933063, 0.68311297,
            0.37947366, 0.83893034, 0.00036895, 0.80309021,
        ],
    )
    .unwrap();
    let conv_layer32 = TransposedConvolutionLayer::new(kernel32, 1, Padding::Valid);
    let target_output32 = array![[
        [
            0.66625148, 0.98797232, 1.41704488, 1.88251364, 1.8379457, 1.33596563, 0.97651243,
            0.23329733
        ],
        [
            0.7931878, 1.52102566, 2.66068888, 2.86534953, 4.09373045, 3.11592174, 1.84909523,
            0.82472074
        ],
        [
            1.00045586, 2.52359867, 4.19527006, 5.17643547, 5.7484045, 3.69846869, 3.03144526,
            1.69557118
        ],
        [
            1.00387466, 3.17032051, 4.35818148, 6.23425961, 7.35472298, 5.74366236, 3.76970029,
            2.40224624
        ],
        [
            1.09353411, 2.83278561, 4.79047441, 5.73058605, 6.72561979, 6.79548597, 2.98636961,
            2.83424807
        ],
        [
            0.97207516, 2.41916609, 3.78558064, 4.77118063, 5.78751087, 5.53327847, 2.7963531,
            1.96037638
        ],
        [
            0.13841093, 0.77997655, 1.85290396, 2.54762745, 2.81955099, 2.476511, 1.37416613,
            1.19880819
        ],
        [
            0.24277242, 1.14774334, 0.98146176, 1.71601951, 1.59109747, 1.9149853, 0.64133561,
            0.67257327
        ]
    ]];
    let current_output32 = conv_layer32.transposed_convolve(&test_input32);

    assert!(
        arr_allclose(&current_output32, &target_output32),
        "{:?} was not equal to {:?}",
        current_output32,
        target_output32
    );

    let test_input33 = array![
        [
            [0.15520982, 0.31636, 0.03485033, 0.21666723, 0.52583048],
            [0.46171709, 0.45026394, 0.20907213, 0.64797223, 0.99160832],
            [0.31935102, 0.53539134, 0.29856463, 0.46920265, 0.27882159],
            [0.2287987, 0.95483211, 0.2423434, 0.12699115, 0.22725932],
            [0.58643429, 0.45396761, 0.72710159, 0.67460908, 0.72245786]
        ],
        [
            [0.98386079, 0.4692506, 0.72674458, 0.7348552, 0.07147343],
            [0.03087187, 0.95043266, 0.76442557, 0.67366552, 0.1939531],
            [0.85664367, 0.89165211, 0.84957522, 0.29966144, 0.22144382],
            [0.84936814, 0.05329819, 0.51589164, 0.31214204, 0.60962341],
            [0.20851571, 0.020407, 0.92857024, 0.39927887, 0.29198913]
        ]
    ];

    let kernel33: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.32679624, 0.95807106, 0.54702243, 0.39032642, 0.2943695, 0.71877408, 0.64249887,
            0.90529515, 0.96964847, 0.96716244, 0.79524361, 0.8560521, 0.897583, 0.26358748,
            0.4610603, 0.24524814, 0.4270144, 0.36576655, 0.52139105, 0.49643677, 0.02449073,
            0.32803341, 0.52485584, 0.59270258, 0.51819417, 0.10436007, 0.54024611, 0.51220167,
            0.95743341, 0.12048424, 0.18159197, 0.12942687,
        ],
    )
    .unwrap();
    let conv_layer33 = TransposedConvolutionLayer::new(kernel33, 1, Padding::Valid);
    let target_output33 = array![[
        [
            0.47084472, 0.81232744, 1.39433026, 1.65053391, 1.4331466, 1.40597999, 0.77428675,
            0.24072757
        ],
        [
            0.23385464, 1.54556179, 2.46791768, 3.43514538, 3.95627713, 3.57636023, 2.23796749,
            1.00173068
        ],
        [
            1.26716328, 2.47553229, 4.36958885, 5.86080742, 6.25724602, 4.97534609, 3.34332871,
            1.71816611
        ],
        [
            2.09744596, 3.82622981, 5.87720966, 7.83755779, 7.72801542, 5.4414587, 3.74120927,
            1.86143208
        ],
        [
            1.56639004, 4.33963919, 6.31519794, 8.23758125, 8.0983057, 5.62944412, 3.40995598,
            1.61441326
        ],
        [
            1.94655037, 3.40908837, 4.76092482, 5.47166538, 5.3817668, 4.04551315, 2.56608963,
            1.43093741
        ],
        [
            1.69526601, 2.11041617, 3.43569756, 3.79686165, 4.33013916, 2.95423555, 1.80131471,
            0.90265542
        ],
        [
            0.72601336, 0.60671151, 1.97204351, 1.67515516, 1.77178586, 0.9076544, 0.60324359,
            0.21497267
        ]
    ]];
    let current_output33 = conv_layer33.transposed_convolve(&test_input33);

    assert!(
        arr_allclose(&current_output33, &target_output33),
        "{:?} was not equal to {:?}",
        current_output33,
        target_output33
    );

    let test_input34 = array![
        [
            [0.54154531, 0.86656647, 0.22447351, 0.6322593, 0.97853778],
            [0.00970959, 0.55719324, 0.7287427, 0.6722845, 0.08840237],
            [0.77866222, 0.55595505, 0.49039193, 0.29876544, 0.96391112],
            [0.6217684, 0.75457318, 0.07906571, 0.24218308, 0.20196797],
            [0.66087625, 0.66323826, 0.17440334, 0.51526877, 0.88165093]
        ],
        [
            [0.39972378, 0.00945449, 0.15960338, 0.90310672, 0.92360486],
            [0.60938352, 0.0279216, 0.57159379, 0.73912698, 0.07560093],
            [0.54495326, 0.31076493, 0.4063533, 0.61592543, 0.66177236],
            [0.89307876, 0.14274224, 0.79462648, 0.26793156, 0.01026518],
            [0.35911654, 0.54531776, 0.46913605, 0.69393592, 0.7670494]
        ]
    ];

    let kernel34: Array4<f32> = Array::from_shape_vec(
        (2, 1, 3, 3),
        vec![
            0.17376864, 0.15214977, 0.24446123, 0.38009069, 0.18737185, 0.56554091, 0.26423023,
            0.74053661, 0.85527597, 0.57912685, 0.71913954, 0.46456698, 0.73671803, 0.43812937,
            0.67473855, 0.7878329, 0.69571447, 0.25479088,
        ],
    )
    .unwrap();
    let conv_layer34 = TransposedConvolutionLayer::new(kernel34, 1, Padding::Valid);
    let target_output34 = array![[
        [0.32559437, 0.52591056, 0.58816934, 0.99804503, 1.57960284, 1.38720143, 0.66829085],
        [0.85491765, 1.16564214, 1.79337788, 2.73008323, 2.93781424, 2.13047767, 1.23332751],
        [1.36154664, 2.2036624, 3.70190191, 4.47611475, 5.00008249, 4.04841757, 1.71632838],
        [1.80534697, 2.37592816, 4.03092813, 4.57378912, 4.25422716, 2.15826607, 1.14066744],
        [1.85216737, 3.0371089, 4.77952576, 4.21098137, 4.21218348, 3.08086562, 1.68604636],
        [1.38364744, 2.32861328, 3.45551753, 3.25653934, 2.41325259, 1.69300056, 1.19152141],
        [0.45754734, 1.34411252, 1.94295251, 1.84458578, 1.97031689, 1.80404782, 0.94949204]
    ]];
    let current_output34 = conv_layer34.transposed_convolve(&test_input34);

    assert!(
        arr_allclose(&current_output34, &target_output34),
        "{:?} was not equal to {:?}",
        current_output34,
        target_output34
    );

    let test_input35 = array![
        [
            [0.96754213, 0.99523758, 0.75530261, 0.39445185, 0.16850757],
            [0.47348525, 0.3428721, 0.73456472, 0.4810381, 0.06958814],
            [0.40491071, 0.01440958, 0.56590062, 0.4767252, 0.89691706],
            [0.71229554, 0.66379927, 0.37802501, 0.69547217, 0.42989763],
            [0.4112019, 0.97742863, 0.32726992, 0.35186991, 0.87228008]
        ],
        [
            [0.71961334, 0.38309375, 0.38645523, 0.96709276, 0.97874444],
            [0.05056721, 0.5945655, 0.25838066, 0.28056801, 0.12965601],
            [0.16904165, 0.7337121, 0.52551712, 0.53067167, 0.79937049],
            [0.92811964, 0.42017522, 0.97495489, 0.86373016, 0.45530656],
            [0.49178642, 0.77084631, 0.4978779, 0.62299961, 0.89374338]
        ]
    ];

    let kernel35: Array4<f32> = Array::from_shape_vec(
        (2, 1, 3, 3),
        vec![
            0.14543204, 0.46538924, 0.25468575, 0.55258467, 0.79535008, 0.34347492, 0.94792101,
            0.74067035, 0.53033798, 0.23003382, 0.51276685, 0.61999765, 0.71651061, 0.31285285,
            0.01742517, 0.79403926, 0.44514382, 0.47107298,
        ],
    )
    .unwrap();
    let conv_layer35 = TransposedConvolutionLayer::new(kernel35, 1, Padding::Valid);
    let target_output35 = array![[
        [0.30624703, 1.05214155, 1.55093145, 1.32049119, 1.36108351, 1.2803458, 0.64973569],
        [1.13075161, 2.25203037, 2.73319745, 3.04584837, 2.43180227, 0.98789549, 0.17304245],
        [1.88419962, 3.73843861, 4.78993177, 5.0244031, 4.37893438, 2.76901484, 1.30062687],
        [1.15093601, 3.07953215, 4.32776737, 4.48092461, 4.61304045, 2.77915001, 0.81175816],
        [1.74958968, 3.25917387, 4.83495903, 5.05274868, 5.36360979, 3.60136223, 1.78410006],
        [1.99175727, 3.47692561, 4.33209991, 4.01508141, 4.04663277, 2.40189695, 0.75765359],
        [0.78028464, 2.06208801, 2.22239375, 2.17374969, 2.48256445, 1.52400458, 0.88362157]
    ]];
    let current_output35 = conv_layer35.transposed_convolve(&test_input35);

    assert!(
        arr_allclose(&current_output35, &target_output35),
        "{:?} was not equal to {:?}",
        current_output35,
        target_output35
    );

    let test_input36 = array![
        [
            [0.11938072, 0.53394766, 0.07118031, 0.26642636, 0.60886297],
            [0.61271988, 0.57685302, 0.63766024, 0.09857575, 0.92387773],
            [0.58972345, 0.81341506, 0.23035104, 0.14867568, 0.28062829],
            [0.47811388, 0.91340118, 0.32021995, 0.82838977, 0.80877446],
            [0.38209473, 0.15508978, 0.88160743, 0.95817911, 0.95054453]
        ],
        [
            [0.72012891, 0.2628233, 0.42030758, 0.08099908, 0.98016811],
            [0.92859271, 0.23243731, 0.01609867, 0.95514954, 0.2603031],
            [0.52722879, 0.10275049, 0.51491323, 0.86302017, 0.99671417],
            [0.83670457, 0.82088939, 0.39562112, 0.54233809, 0.35418032],
            [0.70454847, 0.17121982, 0.07215097, 0.7547516, 0.43495061]
        ]
    ];

    let kernel36: Array4<f32> = Array::from_shape_vec(
        (2, 1, 3, 3),
        vec![
            0.05219934, 0.32704812, 0.80690433, 0.3644227, 0.3185606, 0.83819449, 0.18509601,
            0.78284553, 0.14064423, 0.0866156, 0.76108785, 0.20690504, 0.81923143, 0.86893994,
            0.08369987, 0.84627388, 0.19355602, 0.45527728,
        ],
    )
    .unwrap();
    let conv_layer36 = TransposedConvolutionLayer::new(kernel36, 1, Padding::Valid);
    let target_output36 = array![[
        [0.06860599, 0.63776088, 0.66010606, 0.84931755, 0.40986121, 1.17686117, 0.69409591],
        [0.74587148, 2.03104806, 2.0158608, 1.84312856, 2.62279248, 2.05319619, 1.39172459],
        [1.69199395, 2.60230708, 3.39078188, 3.21554565, 4.41378307, 2.57267809, 1.76072323],
        [1.64351571, 2.90142751, 4.06317568, 4.89114761, 3.799438, 3.68940854, 1.29297936],
        [1.49599564, 3.37005496, 4.06129217, 3.84452748, 4.76865339, 3.70281315, 2.05779719],
        [1.5130105, 2.33072042, 2.6740036, 2.89711809, 3.83685756, 2.61218691, 1.10814619],
        [0.66696519, 0.60909611, 0.75329781, 1.61997426, 1.59706402, 1.30670047, 0.33171171]
    ]];
    let current_output36 = conv_layer36.transposed_convolve(&test_input36);

    assert!(
        arr_allclose(&current_output36, &target_output36),
        "{:?} was not equal to {:?}",
        current_output36,
        target_output36
    );

    let test_input37 = array![
        [
            [0.07187212, 0.16546801, 0.19925202],
            [0.19391126, 0.98580118, 0.11626041],
            [0.96403877, 0.83806275, 0.68620998]
        ],
        [
            [0.20116507, 0.64581351, 0.79464135],
            [0.51350849, 0.96608514, 0.2866232],
            [0.0401813, 0.47440121, 0.56197967]
        ]
    ];

    let kernel37: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.44840698, 0.51113233, 0.34871952, 0.38643878, 0.7972437, 0.41845899, 0.68313035,
            0.58276262, 0.24505354, 0.45846484, 0.35040325, 0.81632676, 0.45164116, 0.34192114,
            0.01926605, 0.60945815, 0.00720319, 0.16734742, 0.14712231, 0.59271626, 0.54784408,
            0.1060043, 0.80422682, 0.95939173, 0.54439926, 0.09722981, 0.53889499, 0.96085127,
            0.12880406, 0.82884103, 0.89940333, 0.89623898,
        ],
    )
    .unwrap();
    let conv_layer37 = TransposedConvolutionLayer::new(kernel37, 1, Padding::Valid);
    let target_output37 = array![[
        [0.03367699, 0.14924955, 0.34238029, 0.53454882, 0.63312, 0.54799557],
        [0.25815675, 1.17117095, 1.8056854, 2.00750208, 2.52748084, 1.09330273],
        [0.99561489, 2.77409077, 3.22534847, 4.16484785, 3.99194646, 1.86719561],
        [1.17603052, 2.59127235, 3.98841596, 5.0349164, 5.19064713, 2.14298916],
        [0.41183609, 1.971102, 2.95671415, 3.48775244, 3.40993786, 1.42788911],
        [0.44057509, 0.80253756, 1.11677289, 1.76679897, 1.45460796, 0.92188436]
    ]];
    let current_output37 = conv_layer37.transposed_convolve(&test_input37);

    assert!(
        arr_allclose(&current_output37, &target_output37),
        "{:?} was not equal to {:?}",
        current_output37,
        target_output37
    );

    let test_input38 = array![
        [
            [0.00895003, 0.67231378, 0.5635491],
            [0.57740441, 0.8294056, 0.73308328],
            [0.71820231, 0.24009439, 0.08234657]
        ],
        [
            [0.83262923, 0.81366645, 0.56454203],
            [0.41107583, 0.15300871, 0.10750511],
            [0.63693319, 0.55479336, 0.80685817]
        ]
    ];

    let kernel38: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.87786778, 0.0768621, 0.51176087, 0.02565966, 0.81959425, 0.87349369, 0.91212026,
            0.14144829, 0.68080261, 0.56961156, 0.09299238, 0.07851031, 0.09498501, 0.39703202,
            0.34609278, 0.74138161, 0.50219776, 0.09790236, 0.7560407, 0.55048226, 0.0988896,
            0.36342481, 0.76262215, 0.36921417, 0.69651571, 0.02017781, 0.69639486, 0.1327469,
            0.20396212, 0.37377915, 0.86270794, 0.2315043,
        ],
    )
    .unwrap();
    let conv_layer38 = TransposedConvolutionLayer::new(kernel38, 1, Padding::Valid);
    let target_output38 = array![[
        [0.42600146, 1.08102846, 1.54365051, 1.51639175, 1.18037939, 0.32523087],
        [0.80299979, 1.83147848, 3.42637396, 3.08797598, 1.90202415, 0.36614031],
        [2.05027413, 3.00195122, 5.38798952, 3.85553622, 2.49452615, 0.7088455],
        [1.50171459, 2.66348076, 4.55005789, 3.61612654, 2.52658534, 0.92987573],
        [1.07127666, 1.4647162, 2.30887532, 1.88634229, 1.65883517, 0.68195534],
        [0.1981287, 0.65918386, 1.27313757, 1.57591522, 1.03102112, 0.24784137]
    ]];
    let current_output38 = conv_layer38.transposed_convolve(&test_input38);

    assert!(
        arr_allclose(&current_output38, &target_output38),
        "{:?} was not equal to {:?}",
        current_output38,
        target_output38
    );

    let test_input39 = array![
        [
            [0.91501776, 0.05492407, 0.28059694],
            [0.77607257, 0.68144649, 0.0384257],
            [0.41136658, 0.07444459, 0.92572651]
        ],
        [
            [0.19929982, 0.60906745, 0.85304476],
            [0.435523, 0.34991544, 0.92270759],
            [0.24557048, 0.75244364, 0.61218124]
        ]
    ];

    let kernel39: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.02676343, 0.68665997, 0.01549418, 0.47552215, 0.62334859, 0.58469681, 0.5351139,
            0.71658511, 0.95146344, 0.36544808, 0.58597032, 0.28302717, 0.68463501, 0.33453105,
            0.21812608, 0.02301173, 0.1716157, 0.21556447, 0.92400077, 0.87333373, 0.97975387,
            0.80055226, 0.38515111, 0.96327586, 0.76702583, 0.89840884, 0.27143422, 0.04667937,
            0.89716263, 0.66015848, 0.30812186, 0.99445567,
        ],
    )
    .unwrap();
    let conv_layer39 = TransposedConvolutionLayer::new(kernel39, 1, Padding::Valid);
    let target_output39 = array![[
        [0.05869199, 0.77726352, 0.52124369, 1.54935718, 1.35059834, 0.87842286],
        [0.86115271, 2.03060102, 3.21396613, 3.26717925, 2.58757401, 1.84689295],
        [1.98709655, 3.0694375, 4.84482718, 5.4450407, 2.91380024, 2.01043558],
        [2.37474298, 3.83409548, 5.6569972, 4.54551363, 2.92248201, 2.16178036],
        [1.50182056, 2.34653854, 3.97783303, 2.59345913, 1.42115331, 1.20905805],
        [0.50195259, 1.02576196, 1.87004244, 1.21557879, 1.14053643, 0.6300897]
    ]];
    let current_output39 = conv_layer39.transposed_convolve(&test_input39);

    assert!(
        arr_allclose(&current_output39, &target_output39),
        "{:?} was not equal to {:?}",
        current_output39,
        target_output39
    );

    let test_input40 = array![
        [
            [0.32269348, 0.90651703, 0.42958102],
            [0.19323848, 0.89449199, 0.41707778],
            [0.047074, 0.15186749, 0.42941825]
        ],
        [
            [0.06797581, 0.71019569, 0.21114524],
            [0.90267074, 0.18382857, 0.38053169],
            [0.74642358, 0.54372056, 0.98692306]
        ]
    ];

    let kernel40: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.43391777, 0.21931883, 0.64791367, 0.46971908, 0.41600464, 0.03177308, 0.36561351,
            0.89717296, 0.02432681, 0.76844286, 0.93577815, 0.47288648, 0.7132774, 0.16475675,
            0.46218839, 0.68262099, 0.05393951, 0.04056123, 0.38312289, 0.25017266, 0.5441924,
            0.18582676, 0.58476522, 0.44094404, 0.94923413, 0.40716596, 0.70403798, 0.61902883,
            0.27133583, 0.49946983, 0.49807011, 0.13783294,
        ],
    )
    .unwrap();
    let conv_layer40 = TransposedConvolutionLayer::new(kernel40, 1, Padding::Valid);
    let target_output40 = array![[
        [0.14368901, 0.50519139, 0.66053516, 1.13079751, 0.96270585, 0.25460517],
        [0.30377311, 1.26352894, 1.48829257, 2.19258523, 2.28915977, 0.7696197],
        [0.70467764, 1.75370085, 3.19954801, 3.69872046, 3.54123878, 1.32443929],
        [1.53594196, 2.13797092, 4.27596951, 4.21253872, 3.32551861, 1.57557464],
        [1.09243548, 2.03049874, 3.03375506, 2.7611475, 2.52330279, 1.15115571],
        [0.23610829, 0.63642633, 1.26420343, 1.03970563, 0.86863959, 0.42916042]
    ]];
    let current_output40 = conv_layer40.transposed_convolve(&test_input40);

    assert!(
        arr_allclose(&current_output40, &target_output40),
        "{:?} was not equal to {:?}",
        current_output40,
        target_output40
    );

    let test_input41 = array![
        [
            [0.75838682, 0.70999422, 0.41899429],
            [0.94878401, 0.46828214, 0.54188859],
            [0.28150013, 0.44120147, 0.56188396]
        ],
        [
            [0.16930467, 0.87946804, 0.02054715],
            [0.36957731, 0.24645624, 0.14384301],
            [0.44379707, 0.0769704, 0.83838864]
        ]
    ];

    let kernel41: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.28551422, 0.53293884, 0.32704464, 0.48172624, 0.80550374, 0.3063715, 0.26814867,
            0.34428265, 0.46858207, 0.08870029, 0.17744416, 0.60181303, 0.52649629, 0.11456152,
            0.59114001, 0.54202284, 0.35435796, 0.77906116, 0.23198477, 0.61676294, 0.94683791,
            0.8001697, 0.2724277, 0.01428977, 0.39779025, 0.28065883, 0.00778698, 0.09425906,
            0.55199182, 0.08802161, 0.92948606, 0.70613555,
        ],
    )
    .unwrap();
    let conv_layer41 = TransposedConvolutionLayer::new(kernel41, 1, Padding::Valid);
    let target_output41 = array![[
        [0.27652466, 1.05043244, 1.47775519, 1.14528441, 1.02624261, 0.21451327],
        [1.17304146, 2.78703928, 2.57097578, 2.13447833, 0.96313643, 0.49430507],
        [1.7745285, 2.6432941, 2.86629701, 2.97796774, 1.57219172, 1.23047256],
        [1.73129332, 2.33602667, 3.22901487, 3.68239188, 2.20703006, 0.78671497],
        [1.01197898, 0.9106974, 2.05535936, 1.93114376, 1.26089072, 0.8124634],
        [0.39318115, 0.34609079, 1.39484239, 0.93648183, 1.40491533, 0.89656997]
    ]];
    let current_output41 = conv_layer41.transposed_convolve(&test_input41);

    assert!(
        arr_allclose(&current_output41, &target_output41),
        "{:?} was not equal to {:?}",
        current_output41,
        target_output41
    );

    let test_input42 = array![
        [
            [0.79319471, 0.59009778, 0.06217905],
            [0.47630212, 0.30325877, 0.18036312],
            [0.68084379, 0.80255471, 0.65311458]
        ],
        [
            [0.64131043, 0.73011105, 0.67581988],
            [0.88006237, 0.66947609, 0.03111337],
            [0.33597425, 0.11015231, 0.11921299]
        ]
    ];

    let kernel42: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.25126496, 0.69373706, 0.76781567, 0.11956753, 0.23382042, 0.89182181, 0.54221573,
            0.69890019, 0.74734408, 0.1025933, 0.24523091, 0.55322683, 0.29599847, 0.33235383,
            0.6964844, 0.34388151, 0.44655515, 0.10984504, 0.60961519, 0.6824109, 0.59089476,
            0.74966765, 0.4055674, 0.6066833, 0.03922288, 0.5139047, 0.27276049, 0.22169069,
            0.16944606, 0.1006932, 0.54000635, 0.38137078,
        ],
    )
    .unwrap();
    let conv_layer42 = TransposedConvolutionLayer::new(kernel42, 1, Padding::Valid);
    let target_output42 = array![[
        [0.48568252, 1.0950191, 1.80696595, 1.54802203, 1.0285244, 0.46862143],
        [1.07708645, 2.55980897, 3.423002, 3.54862499, 1.81374109, 0.49626327],
        [1.57044005, 3.19169545, 3.84002161, 4.22569227, 2.1616981, 0.48859739],
        [1.09165263, 2.49241281, 3.69623256, 3.99272561, 2.28873634, 0.91458583],
        [0.81211025, 1.29673517, 1.92416251, 1.94150424, 1.16312027, 0.46163815],
        [0.25845823, 0.5163312, 1.14697003, 1.20977914, 0.8372525, 0.27005836]
    ]];
    let current_output42 = conv_layer42.transposed_convolve(&test_input42);

    assert!(
        arr_allclose(&current_output42, &target_output42),
        "{:?} was not equal to {:?}",
        current_output42,
        target_output42
    );

    let test_input43 = array![
        [
            [0.04537489, 0.77202866, 0.3950377],
            [0.47227802, 0.08456346, 0.99505395],
            [0.50795033, 0.09107142, 0.49050682]
        ],
        [
            [0.96480779, 0.49166625, 0.12798251],
            [0.85706862, 0.69694859, 0.55041501],
            [0.72912632, 0.30650784, 0.0107817]
        ]
    ];

    let kernel43: Array4<f32> = Array::from_shape_vec(
        (2, 1, 3, 3),
        vec![
            0.53507909, 0.33481097, 0.98041151, 0.00238096, 0.68851917, 0.01554713, 0.11027454,
            0.9201642, 0.5638509, 0.1789127, 0.78163998, 0.73606554, 0.59824154, 0.56275489,
            0.02244601, 0.1731958, 0.51618158, 0.71388938,
        ],
    )
    .unwrap();
    let conv_layer43 = TransposedConvolutionLayer::new(kernel43, 1, Padding::Valid);
    let target_output43 = array![[
        [0.19689552, 1.2703861, 1.6317116, 1.35110366, 0.48150307],
        [0.98334277, 1.86814928, 3.20598102, 1.72634077, 1.38971817],
        [1.08820641, 2.77824521, 4.12207127, 2.71523881, 0.83076715],
        [0.63792402, 1.95064557, 1.78784382, 2.09703898, 0.96186543],
        [0.18229561, 0.90688795, 1.10489583, 0.72707552, 0.28426966]
    ]];
    let current_output43 = conv_layer43.transposed_convolve(&test_input43);

    assert!(
        arr_allclose(&current_output43, &target_output43),
        "{:?} was not equal to {:?}",
        current_output43,
        target_output43
    );

    let test_input44 = array![
        [
            [0.37650405, 0.85731034, 0.88223379],
            [0.59797183, 0.47906099, 0.41637896],
            [0.40831715, 0.70012182, 0.52044709]
        ],
        [
            [0.54864365, 0.8242743, 0.31435137],
            [0.02069527, 0.43211794, 0.76214775],
            [0.65538532, 0.86505033, 0.59803587]
        ]
    ];

    let kernel44: Array4<f32> = Array::from_shape_vec(
        (2, 1, 3, 3),
        vec![
            0.80163413, 0.69807686, 0.92255374, 0.81776086, 0.70200929, 0.43390043, 0.79711788,
            0.64812482, 0.18671373, 0.08406905, 0.72819445, 0.14004933, 0.50802597, 0.01313858,
            0.37515614, 0.11442149, 0.71393589, 0.11509855,
        ],
    )
    .unwrap();
    let conv_layer44 = TransposedConvolutionLayer::new(kernel44, 1, Padding::Valid);
    let target_output44 = array![[
        [0.34794247, 1.41889322, 2.35653877, 1.75112987, 0.85793281],
        [1.06771004, 2.24420524, 3.46452022, 2.65281892, 0.99160266],
        [1.24482501, 3.84099865, 5.40830755, 3.28930879, 1.23139286],
        [1.14588058, 2.14090061, 2.80745387, 1.95470166, 0.61564481],
        [0.40046707, 1.38960361, 1.70631504, 0.99456233, 0.16600768]
    ]];
    let current_output44 = conv_layer44.transposed_convolve(&test_input44);

    assert!(
        arr_allclose(&current_output44, &target_output44),
        "{:?} was not equal to {:?}",
        current_output44,
        target_output44
    );

    let test_input45 = array![
        [
            [0.04620427, 0.00338423, 0.58042267],
            [0.34978441, 0.37015088, 0.11006288],
            [0.45462497, 0.6825711, 0.05430869]
        ],
        [
            [0.07369657, 0.29473899, 0.71332922],
            [0.52332806, 0.34203872, 0.24697433],
            [0.74098633, 0.64924839, 0.58181111]
        ]
    ];

    let kernel45: Array4<f32> = Array::from_shape_vec(
        (2, 1, 3, 3),
        vec![
            0.4604948, 0.78417208, 0.88183055, 0.33960004, 0.35578284, 0.24270806, 0.93051933,
            0.92984385, 0.16793567, 0.71563728, 0.50673162, 0.7600932, 0.79997257, 0.1436599,
            0.50921425, 0.00534251, 0.80710122, 0.2787269,
        ],
    )
    .unwrap();
    let conv_layer45 = TransposedConvolutionLayer::new(kernel45, 1, Padding::Valid);
    let target_output45 = array![[
        [0.07401683, 0.28606111, 1.02653456, 1.04363108, 1.05403113],
        [0.61023319, 1.21866465, 2.25728297, 1.25773752, 0.78889096],
        [1.32045245, 2.21705294, 3.85014248, 2.96961069, 0.93889546],
        [1.07543647, 2.11326337, 2.23624039, 1.05834854, 0.39676952],
        [0.42699608, 1.65939546, 1.49521804, 0.81567013, 0.17128678]
    ]];
    let current_output45 = conv_layer45.transposed_convolve(&test_input45);

    assert!(
        arr_allclose(&current_output45, &target_output45),
        "{:?} was not equal to {:?}",
        current_output45,
        target_output45
    );
}

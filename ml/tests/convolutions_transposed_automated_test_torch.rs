use ml::convolutions::*;
use ml::transposed_convolutions::*;
use ndarray::{array, Array, Array4, Dimension};

// This file has been automatically generated by Jinja2 via the
// script generate_tests_torch.py.
// Please do not change this file by hand.

fn arr_allclose<D: Dimension>(arr1: &Array<f32, D>, arr2: &Array<f32, D>) -> bool {
    (arr1 - arr2).map(|x| (*x as f32).abs()).sum() < 1e-3
}

#[test]
fn test_py_implementation_random_arrays_transpose_convolve() {
    let test_input1 = array![
        [
            [0.23224549, 0.50588505, 0.86441349, 0.02310899, 0.45685568],
            [0.40417363, 0.25985479, 0.09913059, 0.79699722, 0.98004136],
            [0.25103959, 0.11597095, 0.72586276, 0.09967188, 0.29483115],
            [0.22645573, 0.16055934, 0.43114743, 0.90784464, 0.96178347],
            [0.63828966, 0.534928, 0.68839463, 0.58409027, 0.75128938]
        ],
        [
            [0.66844715, 0.66343357, 0.46953653, 0.46234563, 0.26003667],
            [0.77429137, 0.328285, 0.83035486, 0.49730704, 0.99242497],
            [0.83261124, 0.8848362, 0.11227968, 0.83485613, 0.38707261],
            [0.42852716, 0.33262721, 0.92346432, 0.73501345, 0.24397685],
            [0.79674084, 0.95016545, 0.21724486, 0.86324733, 0.1932244]
        ]
    ];

    let kernel1: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.51769137, 0.32076064, 0.96737749, 0.00598922, 0.39202869, 0.24141203, 0.82792129,
            0.69460177, 0.75072335, 0.97536332, 0.24372894, 0.49899355, 0.31899844, 0.49396161,
            0.11416891, 0.68334946, 0.59653256, 0.12978615, 0.10638801, 0.1116066, 0.80415186,
            0.28193729, 0.09670109, 0.17522074, 0.30331546, 0.39188403, 0.99324827, 0.44458251,
            0.56043957, 0.07845372, 0.09437273, 0.2022228,
        ],
    )
    .unwrap();
    let conv_layer1 = TransposedConvolutionLayer::new(kernel1, 1, Padding::Valid);
    let target_output1 = array![[
        [
            0.51898199, 0.81890249, 1.2717495, 1.26193392, 1.42228973, 0.30941418, 0.52135593,
            0.03175802
        ],
        [
            1.29970717, 1.53684235, 2.42852211, 2.70731068, 3.39484119, 2.29047513, 1.61437869,
            0.47952744
        ],
        [
            1.7848388, 2.52767825, 4.46290255, 5.11149073, 5.10270262, 3.4380579, 2.55497718,
            1.24317348
        ],
        [
            2.12781239, 3.15480781, 4.58045912, 6.07677317, 7.21269989, 5.69928455, 3.57024384,
            1.60062969
        ],
        [
            2.24297643, 3.11164808, 5.45353413, 7.10960531, 6.35556555, 5.17669439, 4.15439224,
            1.92647719
        ],
        [
            1.7376225, 2.68495941, 3.34706426, 5.93195248, 5.96051931, 4.71473789, 2.76131678,
            1.42384303
        ],
        [
            1.03324533, 2.00769281, 3.25050545, 4.48182249, 3.86652684, 3.39697599, 1.95211482,
            1.1673646
        ],
        [
            0.6501385, 1.08094943, 0.8281908, 1.77524185, 1.36097693, 1.04876518, 0.67771506,
            0.55246753
        ]
    ]];
    let current_output1 = conv_layer1.transposed_convolve(&test_input1);

    assert!(
        arr_allclose(&current_output1, &target_output1),
        "{:?} was not equal to {:?}",
        current_output1,
        target_output1
    );

    let test_input2 = array![
        [
            [0.30105924, 0.18510874, 0.50315732, 0.87208086, 0.63173667],
            [0.97677081, 0.2187118, 0.70001813, 0.39591292, 0.73465172],
            [0.00274565, 0.90799466, 0.22369012, 0.68718668, 0.65592413],
            [0.66829443, 0.57882502, 0.55727569, 0.17275229, 0.35462692],
            [0.07000257, 0.35331661, 0.61658299, 0.30442452, 0.54720806]
        ],
        [
            [0.27519759, 0.7739332, 0.43991743, 0.05888736, 0.2155859],
            [0.32379033, 0.42484936, 0.80078561, 0.16511487, 0.96516041],
            [0.6095338, 0.78007901, 0.213527, 0.68177587, 0.20005976],
            [0.52148439, 0.56371771, 0.81873294, 0.34419013, 0.70609356],
            [0.46725456, 0.23119005, 0.96067435, 0.29916614, 0.6806969]
        ]
    ];

    let kernel2: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.91396963, 0.97284102, 0.01715484, 0.04093061, 0.4275515, 0.19486532, 0.25447013,
            0.08197373, 0.6507138, 0.21445233, 0.11806071, 0.17637333, 0.32952575, 0.59583681,
            0.17714995, 0.77400486, 0.63882513, 0.25830766, 0.21258484, 0.3401532, 0.96206266,
            0.62044975, 0.28326757, 0.20731905, 0.83910975, 0.63256076, 0.05410179, 0.97274446,
            0.74869779, 0.12974854, 0.79447089, 0.53723675,
        ],
    )
    .unwrap();
    let conv_layer2 = TransposedConvolutionLayer::new(kernel2, 1, Padding::Valid);
    let target_output2 = array![[
        [
            0.45096213, 1.02756023, 1.18456244, 1.71143401, 1.95170093, 0.86797971, 0.11239316,
            0.0991896
        ],
        [
            1.49305987, 2.55830884, 2.86863708, 2.74794865, 3.16379857, 1.93485439, 0.59567338,
            0.45485303
        ],
        [
            1.5478456, 3.39031863, 4.5477457, 4.39739704, 5.54183054, 2.9358747, 1.13818967,
            0.67634809
        ],
        [
            2.74406219, 4.96004391, 5.55255318, 6.47606802, 6.76422453, 4.54497719, 2.06081009,
            2.02315521
        ],
        [
            2.22744966, 4.54873371, 5.97961807, 7.05221844, 7.74251652, 4.36178303, 2.80882668,
            1.82683372
        ],
        [
            1.80917025, 2.96386075, 4.54832745, 5.1628561, 5.67322922, 3.76533079, 2.03769088,
            1.5505414
        ],
        [
            1.04828393, 1.81312919, 3.21022487, 3.81084108, 3.88689733, 3.12145162, 1.38855088,
            1.4124794
        ],
        [
            0.3729001, 0.39185411, 1.54657149, 1.36780214, 2.18028712, 1.69932151, 1.03408098,
            0.78923714
        ]
    ]];
    let current_output2 = conv_layer2.transposed_convolve(&test_input2);

    assert!(
        arr_allclose(&current_output2, &target_output2),
        "{:?} was not equal to {:?}",
        current_output2,
        target_output2
    );

    let test_input3 = array![
        [
            [0.69576324, 0.82454912, 0.37664894, 0.67223724, 0.50744606],
            [0.7913009, 0.78958918, 0.64517467, 0.35058063, 0.22394987],
            [0.14626299, 0.05523287, 0.46869732, 0.7351389, 0.07301666],
            [0.27983864, 0.10655331, 0.9756451, 0.05932388, 0.77344522],
            [0.61317027, 0.08217912, 0.553476, 0.21154444, 0.19400314]
        ],
        [
            [0.16894332, 0.94862154, 0.92018245, 0.8976765, 0.52220882],
            [0.21455716, 0.20382801, 0.13832045, 0.58815186, 0.75384826],
            [0.96337642, 0.59598235, 0.75862404, 0.01639629, 0.3016201],
            [0.17905368, 0.19411111, 0.82684654, 0.28606841, 0.04715753],
            [0.06193527, 0.64446747, 0.31424384, 0.10932652, 0.5231733]
        ]
    ];

    let kernel3: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.44769425, 0.39186088, 0.02075461, 0.10706459, 0.5791381, 0.45745205, 0.44355087,
            0.51992797, 0.01996619, 0.71309348, 0.68690148, 0.39505484, 0.54699335, 0.31554793,
            0.39265912, 0.60526183, 0.92840583, 0.1213429, 0.38917129, 0.77997731, 0.82586903,
            0.88367036, 0.57404126, 0.85618266, 0.44077539, 0.63325499, 0.7577091, 0.73792097,
            0.23396463, 0.3459607, 0.14433428, 0.56662749,
        ],
    )
    .unwrap();
    let conv_layer3 = TransposedConvolutionLayer::new(kernel3, 1, Padding::Valid);
    let target_output3 = array![[
        [
            0.46833715, 1.54299402, 1.54133153, 1.98616946, 2.27846146, 1.38356376, 0.98590058,
            0.46164054
        ],
        [
            1.09592497, 2.60737801, 3.45045233, 4.85316992, 5.08173275, 3.08310342, 2.43724155,
            1.32290316
        ],
        [
            1.68371177, 2.96717167, 5.09714746, 6.73378658, 7.03133774, 5.10664129, 3.10054111,
            1.59076178
        ],
        [
            1.70232117, 3.5584178, 6.19237471, 7.58783913, 6.98661327, 5.86354399, 3.35336065,
            1.66358411
        ],
        [
            1.55254197, 3.17283726, 5.01942873, 6.33828163, 6.71683598, 4.82033539, 2.28486824,
            1.68546224
        ],
        [
            0.79617131, 1.864784, 3.25936937, 4.88988495, 4.51271677, 4.23091125, 1.91795599,
            1.10425174
        ],
        [
            0.23450433, 1.01612186, 2.04801846, 2.51278281, 2.80958819, 2.53232479, 1.20242763,
            0.95756006
        ],
        [
            0.34989074, 0.41064581, 0.8748678, 0.95616609, 1.01069403, 0.8541162, 0.34167612,
            0.41386706
        ]
    ]];
    let current_output3 = conv_layer3.transposed_convolve(&test_input3);

    assert!(
        arr_allclose(&current_output3, &target_output3),
        "{:?} was not equal to {:?}",
        current_output3,
        target_output3
    );

    let test_input4 = array![
        [
            [0.95572013, 0.85192676, 0.6193624, 0.92937866, 0.02097251],
            [0.23979845, 0.07907035, 0.95633018, 0.01872301, 0.41537429],
            [0.45995144, 0.64512045, 0.85995776, 0.10583407, 0.44843149],
            [0.91603121, 0.56784169, 0.57392231, 0.26174001, 0.10541193],
            [0.6379088, 0.31216501, 0.87573343, 0.15632313, 0.73736545]
        ],
        [
            [0.12863558, 0.9590727, 0.2825182, 0.79587993, 0.81913607],
            [0.93811946, 0.53403529, 0.79628325, 0.62593821, 0.21138961],
            [0.1876398, 0.29817144, 0.6925418, 0.1792817, 0.26417359],
            [0.43096246, 0.76093377, 0.62514907, 0.69654607, 0.04901551],
            [0.06003402, 0.69877169, 0.12188532, 0.06863045, 0.98164632]
        ]
    ];

    let kernel4: Array4<f32> = Array::from_shape_vec(
        (2, 1, 3, 3),
        vec![
            0.75263585, 0.66786885, 0.64306772, 0.56340058, 0.73104405, 0.65803694, 0.07880943,
            0.23246141, 0.7858138, 0.55886112, 0.48162453, 0.74894114, 0.64294605, 0.77811541,
            0.66253483, 0.99033882, 0.41137747, 0.4890013,
        ],
    )
    .unwrap();
    let conv_layer4 = TransposedConvolutionLayer::new(kernel4, 1, Padding::Valid);
    let target_output4 = array![[
        [0.79119861, 1.87742877, 2.36586428, 2.9601264, 2.08746791, 1.60224366, 0.62697142],
        [1.32591844, 2.86531281, 4.94537926, 4.74087715, 4.38801003, 2.65163493, 0.98193902],
        [1.39201593, 3.63494158, 6.08358765, 6.12353992, 5.72257805, 2.98557901, 1.31664586],
        [2.25801969, 3.68617725, 6.24847078, 5.66474438, 4.7631793, 2.01011753, 1.00438201],
        [1.52891731, 3.42481971, 5.82768631, 5.22622681, 4.9212923, 2.24984884, 1.79277551],
        [0.89698756, 2.32676291, 3.8431716, 3.45496225, 3.0322094, 2.04217625, 1.24239135],
        [0.10972725, 0.88960809, 1.0803833, 0.92100614, 1.84261131, 0.73163748, 1.05945826]
    ]];
    let current_output4 = conv_layer4.transposed_convolve(&test_input4);

    assert!(
        arr_allclose(&current_output4, &target_output4),
        "{:?} was not equal to {:?}",
        current_output4,
        target_output4
    );

    let test_input5 = array![
        [
            [0.06506247, 0.9972559, 0.83234049, 0.18129697, 0.49030397],
            [0.48294268, 0.12433387, 0.96476976, 0.7292857, 0.73773443],
            [0.39093721, 0.92350285, 0.25497472, 0.13691517, 0.34584804],
            [0.58844589, 0.20412358, 0.00624331, 0.56834318, 0.22074685],
            [0.69736786, 0.08598604, 0.05624962, 0.29992156, 0.25001068]
        ],
        [
            [0.68899853, 0.89269228, 0.30140766, 0.63385394, 0.94817296],
            [0.464108, 0.89087913, 0.31388246, 0.57008056, 0.76289175],
            [0.00432913, 0.92347583, 0.96164151, 0.29734896, 0.81149604],
            [0.83766772, 0.40603398, 0.97582668, 0.03124781, 0.56788189],
            [0.12168682, 0.86728951, 0.70891321, 0.81502959, 0.45569643]
        ]
    ];

    let kernel5: Array4<f32> = Array::from_shape_vec(
        (2, 1, 3, 3),
        vec![
            0.94203091, 0.03257993, 0.41169245, 0.10524429, 0.29636486, 0.23071601, 0.89597745,
            0.23406821, 0.65278766, 0.3581413, 0.68854657, 0.95353164, 0.84424638, 0.40710647,
            0.16538836, 0.63260361, 0.68527244, 0.31145655,
        ],
    )
    .unwrap();
    let conv_layer5 = TransposedConvolutionLayer::new(kernel5, 1, Padding::Valid);
    let target_output5 = array![[
        [0.30804968, 1.7356832, 2.22295523, 1.89422035, 1.87387609, 1.34787369, 1.1059674],
        [1.2096951, 1.92986679, 3.41008258, 3.34071684, 3.48671699, 2.07112956, 1.30109882],
        [1.30663121, 4.25931597, 4.40851593, 5.20827007, 5.44511986, 2.78196621, 1.82792974],
        [1.62543857, 3.03416562, 5.42422628, 4.60180569, 4.91793299, 2.52470541, 1.5655694],
        [1.82266128, 2.88391566, 4.57690954, 4.44624901, 4.04045486, 2.47448516, 1.16081047],
        [1.23327351, 2.1489861, 2.75795484, 2.64707232, 1.98142183, 1.28516793, 0.45401973],
        [0.70180535, 0.87231231, 1.60644889, 1.60953212, 1.39851332, 0.82042718, 0.30513352]
    ]];
    let current_output5 = conv_layer5.transposed_convolve(&test_input5);

    assert!(
        arr_allclose(&current_output5, &target_output5),
        "{:?} was not equal to {:?}",
        current_output5,
        target_output5
    );

    let test_input6 = array![
        [
            [0.49300047, 0.49084945, 0.02828005, 0.88413816, 0.08669137],
            [0.14747888, 0.90374769, 0.69706857, 0.30263219, 0.00271136],
            [0.49293855, 0.99981271, 0.98342794, 0.91180951, 0.92644605],
            [0.04954946, 0.40840417, 0.46344219, 0.78719302, 0.20486033],
            [0.4029006, 0.76861512, 0.24171825, 0.36729267, 0.19857672]
        ],
        [
            [0.32654667, 0.36346476, 0.17108533, 0.30279541, 0.36422955],
            [0.58195867, 0.58513414, 0.7725577, 0.88385839, 0.80932314],
            [0.89565293, 0.16141163, 0.06084506, 0.54924948, 0.60231775],
            [0.91577754, 0.12382696, 0.294304, 0.36349937, 0.79487141],
            [0.14176326, 0.49541315, 0.29347779, 0.37438836, 0.73060917]
        ]
    ];

    let kernel6: Array4<f32> = Array::from_shape_vec(
        (2, 1, 3, 3),
        vec![
            0.28533514, 0.10216843, 0.55541974, 0.46504469, 0.17332367, 0.3212567, 0.36790222,
            0.11517226, 0.08391169, 0.66567503, 0.38179011, 0.47639692, 0.81930284, 0.32803876,
            0.56541388, 0.37452426, 0.66434167, 0.24304809,
        ],
    )
    .unwrap();
    let conv_layer6 = TransposedConvolutionLayer::new(kernel6, 1, Padding::Valid);
    let target_output6 = array![[
        [0.35804436, 0.55704737, 0.74026108, 0.96782804, 0.57034177, 0.78323495, 0.22166795],
        [0.92628419, 1.60325718, 2.08870173, 2.90506864, 2.36021686, 1.48817098, 0.62085563],
        [1.58592677, 2.49162483, 3.36071062, 3.92714477, 3.72609067, 2.35537863, 1.35578203],
        [1.85901332, 2.48534966, 3.47157621, 3.64297128, 3.98967338, 2.6746273, 1.32757556],
        [1.4994688, 2.32483959, 2.79110789, 3.01363969, 3.44865584, 2.15311217, 1.19772935],
        [0.66472411, 1.69039476, 1.49494171, 1.88175809, 1.93663764, 1.30982876, 0.68727285],
        [0.20132181, 0.60890168, 0.68475336, 0.6830591, 0.72932363, 0.63005912, 0.19423607]
    ]];
    let current_output6 = conv_layer6.transposed_convolve(&test_input6);

    assert!(
        arr_allclose(&current_output6, &target_output6),
        "{:?} was not equal to {:?}",
        current_output6,
        target_output6
    );

    let test_input7 = array![
        [
            [0.06236777, 0.77332523, 0.78207753, 0.61082655],
            [0.94774401, 0.08051699, 0.94621385, 0.00787854],
            [0.84173134, 0.19448081, 0.13019027, 0.66277754],
            [0.09286012, 0.58464369, 0.65122109, 0.70801625]
        ],
        [
            [0.70387627, 0.44558695, 0.44260015, 0.69783799],
            [0.32629655, 0.27405552, 0.99696945, 0.17646311],
            [0.37098764, 0.87614516, 0.69403932, 0.21528777],
            [0.5237107, 0.44565287, 0.19037103, 0.83812864]
        ]
    ];

    let kernel7: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.70450526, 0.79290859, 0.45777786, 0.96684875, 0.48885154, 0.15208962, 0.8550647,
            0.11583171, 0.56539786, 0.63707969, 0.2444331, 0.26558961, 0.70200128, 0.31950996,
            0.00088664, 0.44229119, 0.82152084, 0.05462804, 0.86386947, 0.92018557, 0.43966387,
            0.13879521, 0.6324256, 0.47845422, 0.52424467, 0.8988874, 0.34291573, 0.53778486,
            0.79191956, 0.69536623, 0.72673949, 0.63617105,
        ],
    )
    .unwrap();
    let conv_layer7 = TransposedConvolutionLayer::new(kernel7, 1, Padding::Valid);
    let target_output7 = array![[
        [0.62218744, 0.99877399, 2.18870854, 3.09485054, 2.42052889, 2.0458889, 1.23271739],
        [1.2757076, 1.73229611, 3.53504443, 4.51826239, 3.08148766, 3.25427055, 0.57463276],
        [1.90881121, 3.23702192, 5.36171293, 6.00204277, 5.60079336, 2.79318833, 1.46176839],
        [2.37835836, 4.03143978, 6.73923206, 8.94434261, 5.70158815, 4.88803482, 2.4466536],
        [1.869771, 2.81081486, 4.55333805, 5.81546021, 3.65115547, 3.126616, 0.89056766],
        [1.21174431, 2.45137978, 3.02609801, 4.43290472, 3.33321238, 1.39196181, 1.06887519],
        [0.47992471, 1.15718234, 1.48529172, 2.19984078, 1.49004626, 1.01886678, 0.8463425]
    ]];
    let current_output7 = conv_layer7.transposed_convolve(&test_input7);

    assert!(
        arr_allclose(&current_output7, &target_output7),
        "{:?} was not equal to {:?}",
        current_output7,
        target_output7
    );

    let test_input8 = array![
        [
            [0.1036236, 0.56881529, 0.64246501, 0.68493666],
            [0.62562757, 0.5914831, 0.84170303, 0.26191136],
            [0.63586736, 0.14973171, 0.17741988, 0.84626372],
            [0.51744188, 0.89845975, 0.44348246, 0.26742129]
        ],
        [
            [0.5524051, 0.45841581, 0.05020873, 0.94144089],
            [0.87631007, 0.8967645, 0.90488428, 0.66888971],
            [0.28862263, 0.01719667, 0.89464476, 0.73840203],
            [0.43135418, 0.36634242, 0.99305737, 0.5723982]
        ]
    ];

    let kernel8: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.33335866, 0.63178033, 0.86594314, 0.16760358, 0.08334628, 0.14621608, 0.61695288,
            0.59717393, 0.95570712, 0.19301597, 0.05311463, 0.89263908, 0.06703918, 0.38400442,
            0.12217854, 0.11021607, 0.05716073, 0.03542558, 0.46326013, 0.94563347, 0.80120881,
            0.90998458, 0.31587509, 0.99483611, 0.19569386, 0.69320916, 0.28721202, 0.22239834,
            0.91989448, 0.64516698, 0.16384328, 0.26697786,
        ],
    )
    .unwrap();
    let conv_layer8 = TransposedConvolutionLayer::new(kernel8, 1, Padding::Valid);
    let target_output8 = array![[
        [0.0661197, 0.30085951, 0.9382866, 1.93448627, 1.57450724, 1.18440676, 1.0050559],
        [0.70987737, 1.60726571, 2.51800394, 4.60869741, 4.44918108, 2.68699574, 2.02202749],
        [1.18985701, 3.15581298, 4.46585321, 5.7579298, 5.31076765, 4.61778688, 2.48271275],
        [1.76590085, 3.36952496, 5.39454746, 7.85427427, 5.51302624, 4.74221563, 2.53544235],
        [1.90097058, 2.97604847, 4.16950035, 7.1719389, 4.21514416, 2.68887067, 1.85621238],
        [0.88706666, 1.78549123, 2.22536087, 3.40190768, 2.63137007, 1.27811003, 0.65641999],
        [0.4314892, 0.87422383, 1.65849805, 1.69744837, 0.88570321, 0.44045997, 0.18229176]
    ]];
    let current_output8 = conv_layer8.transposed_convolve(&test_input8);

    assert!(
        arr_allclose(&current_output8, &target_output8),
        "{:?} was not equal to {:?}",
        current_output8,
        target_output8
    );

    let test_input9 = array![
        [
            [0.34233773, 0.97118685, 0.1736736, 0.49766175],
            [0.11606233, 0.207445, 0.47700463, 0.49665623],
            [0.98654819, 0.67733945, 0.48572266, 0.94583003],
            [0.30034919, 0.83523111, 0.80740195, 0.39818336]
        ],
        [
            [0.80498019, 0.33522689, 0.85493217, 0.32960872],
            [0.01231102, 0.21975358, 0.79986305, 0.06471063],
            [0.77274995, 0.8312853, 0.77028167, 0.82208912],
            [0.11399209, 0.04418209, 0.41363551, 0.37213322]
        ]
    ];

    let kernel9: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.05123908, 0.16918235, 0.56118462, 0.31676801, 0.91666115, 0.99523086, 0.02213015,
            0.55894298, 0.38572571, 0.99987621, 0.50932685, 0.49142755, 0.34928932, 0.69832363,
            0.63120777, 0.75233946, 0.96101004, 0.99979722, 0.42995887, 0.86614874, 0.0841737,
            0.89585605, 0.11358444, 0.10170663, 0.68170774, 0.69930185, 0.31476195, 0.37262206,
            0.11822088, 0.58505236, 0.70728539, 0.35515,
        ],
    )
    .unwrap();
    let conv_layer9 = TransposedConvolutionLayer::new(kernel9, 1, Padding::Valid);
    let target_output9 = array![[
        [0.79113513, 1.23465359, 1.86818695, 2.72122169, 1.47678339, 1.21651101, 0.44313353],
        [0.39934382, 2.23407698, 2.71539044, 2.98182654, 2.4848237, 1.38291669, 0.52506179],
        [1.58140612, 3.6166296, 5.79163742, 7.41435623, 5.00008774, 2.83273649, 1.66322851],
        [1.36221397, 4.05837345, 5.85527372, 8.195117, 6.93717384, 3.24896216, 1.82038569],
        [1.23423505, 3.71184182, 4.99867153, 6.46264076, 5.40454054, 2.81286478, 1.42818189],
        [0.62950766, 2.20820808, 4.03763485, 5.38278437, 4.42439604, 2.68830872, 1.33789361],
        [0.11838502, 0.57339287, 1.21023536, 1.81380403, 1.94204378, 1.26888394, 0.43173218]
    ]];
    let current_output9 = conv_layer9.transposed_convolve(&test_input9);

    assert!(
        arr_allclose(&current_output9, &target_output9),
        "{:?} was not equal to {:?}",
        current_output9,
        target_output9
    );

    let test_input10 = array![
        [
            [0.20403187, 0.68248703, 0.44291237, 0.27782661],
            [0.69825463, 0.9029227, 0.62402925, 0.41573935],
            [0.16815847, 0.3392352, 0.80277765, 0.07096831],
            [0.85541025, 0.77221438, 0.53853285, 0.94955044]
        ],
        [
            [0.53288117, 0.73666345, 0.11740076, 0.37460857],
            [0.67491605, 0.92208675, 0.98112951, 0.38428995],
            [0.84727753, 0.5904251, 0.49291241, 0.49100837],
            [0.11250915, 0.43514693, 0.49978712, 0.58982395]
        ]
    ];

    let kernel10: Array4<f32> = Array::from_shape_vec(
        (2, 1, 3, 3),
        vec![
            0.32562397, 0.08288938, 0.12515384, 0.60863685, 0.49698647, 0.25456929, 0.17941345,
            0.24435801, 0.92576463, 0.36017429, 0.51685951, 0.14790155, 0.31631762, 0.68132181,
            0.86361974, 0.87004618, 0.54062276, 0.00816072,
        ],
    )
    .unwrap();
    let conv_layer10 = TransposedConvolutionLayer::new(kernel10, 1, Padding::Valid);
    let target_output10 = array![[
        [0.25836778, 0.77989817, 0.7281794, 0.51715332, 0.28944483, 0.09017625],
        [0.76319689, 2.14571095, 2.95516634, 2.47963715, 1.06374109, 0.50311393],
        [1.49863267, 3.52438664, 4.38621283, 4.21573257, 2.58906341, 0.77947682],
        [1.40190566, 3.09106374, 5.09455395, 4.45043612, 2.41979504, 1.03619945],
        [1.32356334, 2.18313384, 2.61861134, 3.16649389, 2.47249126, 0.82081693],
        [0.25136027, 0.78699493, 1.74823165, 1.80376732, 1.05353582, 0.88387358]
    ]];
    let current_output10 = conv_layer10.transposed_convolve(&test_input10);

    assert!(
        arr_allclose(&current_output10, &target_output10),
        "{:?} was not equal to {:?}",
        current_output10,
        target_output10
    );

    let test_input11 = array![
        [
            [0.81253463, 0.84024462, 0.16182604, 0.99689518],
            [0.57455207, 0.71637904, 0.85961168, 0.21274436],
            [0.50981584, 0.02886825, 0.21751188, 0.23436014],
            [0.38305257, 0.6327846, 0.27748674, 0.84223387]
        ],
        [
            [0.9325366, 0.0989435, 0.60516263, 0.08400947],
            [0.49678063, 0.97340894, 0.83966809, 0.3482415],
            [0.10386568, 0.74549535, 0.40149437, 0.4452185],
            [0.87148379, 0.44752907, 0.90387198, 0.46964038]
        ]
    ];

    let kernel11: Array4<f32> = Array::from_shape_vec(
        (2, 1, 3, 3),
        vec![
            0.48441091, 0.88147925, 0.59467484, 0.58768096, 0.34565841, 0.46486275, 0.83226593,
            0.64309967, 0.46776877, 0.22630381, 0.70366823, 0.77490347, 0.91060963, 0.48822479,
            0.57024289, 0.10668963, 0.92969259, 0.00275485,
        ],
    )
    .unwrap();
    let conv_layer11 = TransposedConvolutionLayer::new(kernel11, 1, Padding::Valid);
    let target_output11 = array![[
        [0.60463721, 1.80184364, 2.23144221, 1.64674258, 1.50303376, 0.65792769],
        [1.71743059, 2.74337387, 4.54388714, 4.17152023, 2.40034461, 0.90769255],
        [1.83622885, 4.55308533, 4.88718128, 5.21934414, 2.87888122, 1.24839652],
        [1.30814648, 3.81286383, 5.71918631, 5.25631714, 3.43173456, 1.32808363],
        [1.45407796, 1.86527324, 3.27266622, 2.78044605, 1.8323195, 0.77018511],
        [0.41177988, 1.63094473, 1.33196545, 2.06707263, 1.11055112, 0.39526445]
    ]];
    let current_output11 = conv_layer11.transposed_convolve(&test_input11);

    assert!(
        arr_allclose(&current_output11, &target_output11),
        "{:?} was not equal to {:?}",
        current_output11,
        target_output11
    );

    let test_input12 = array![
        [
            [0.95036079, 0.14900696, 0.54555528, 0.00645077],
            [0.21402212, 0.7504094, 0.01176434, 0.07800543],
            [0.0516187, 0.36804477, 0.8195282, 0.74270811],
            [0.185258, 0.2418856, 0.5231299, 0.23739756]
        ],
        [
            [0.92642604, 0.80638138, 0.09321253, 0.3954864],
            [0.27779006, 0.61428419, 0.71764105, 0.33038311],
            [0.97665915, 0.42897722, 0.94963987, 0.37697606],
            [0.88512615, 0.73109218, 0.63038553, 0.24837622]
        ]
    ];

    let kernel12: Array4<f32> = Array::from_shape_vec(
        (2, 1, 3, 3),
        vec![
            0.21866089, 0.68867161, 0.69469835, 0.0114934, 0.70453161, 0.35201788, 0.0989068,
            0.90386671, 0.51265218, 0.926821, 0.76855408, 0.49553608, 0.48527933, 0.09102922,
            0.64307177, 0.16351804, 0.30520669, 0.49957811,
        ],
    )
    .unwrap();
    let conv_layer12 = TransposedConvolutionLayer::new(kernel12, 1, Padding::Valid);
    let target_output12 = array![[
        [1.06643784, 2.14644814, 2.0473392, 1.31840897, 0.73358166, 0.20045912],
        [0.76475823, 2.2412281, 3.10312033, 2.8644743, 0.96396029, 0.47450393],
        [1.29922533, 3.03536892, 4.74932623, 4.23441029, 2.84456468, 1.14356601],
        [1.40199995, 2.32890534, 4.64201832, 3.90088797, 3.02281833, 0.99691015],
        [0.59646952, 1.01994348, 2.39761639, 2.67316675, 2.46031475, 0.81237179],
        [0.16305737, 0.58106583, 1.13374972, 1.21857262, 0.8734923, 0.2457857]
    ]];
    let current_output12 = conv_layer12.transposed_convolve(&test_input12);

    assert!(
        arr_allclose(&current_output12, &target_output12),
        "{:?} was not equal to {:?}",
        current_output12,
        target_output12
    );

    let test_input13 = array![
        [
            [0.3116739, 0.27853079, 0.13845452, 0.53867633, 0.85340833, 0.97655587],
            [0.36534721, 0.02803171, 0.64713535, 0.80936283, 0.38585196, 0.58985621],
            [0.17813227, 0.76870934, 0.89900349, 0.43542842, 0.15628383, 0.1745854],
            [0.86026083, 0.93176335, 0.56799881, 0.47061769, 0.53949802, 0.05189181],
            [0.07629808, 0.84650086, 0.50658251, 0.71618065, 0.02412173, 0.95331388],
            [0.94789123, 0.11517583, 0.85233842, 0.73321649, 0.07861274, 0.3375075]
        ],
        [
            [0.58162109, 0.64147438, 0.71849818, 0.897314, 0.09359703, 0.19160785],
            [0.85125346, 0.8526771, 0.40986851, 0.50469854, 0.18144441, 0.47525636],
            [0.98244302, 0.1424162, 0.98820222, 0.06972428, 0.20421812, 0.55776209],
            [0.30822515, 0.39205091, 0.06246058, 0.02439791, 0.42704045, 0.32884196],
            [0.18523273, 0.65233307, 0.8833122, 0.53135427, 0.2849727, 0.68437329],
            [0.46648682, 0.69454806, 0.27290355, 0.99412635, 0.01063524, 0.06917533]
        ]
    ];

    let kernel13: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.19982048, 0.29424522, 0.41777326, 0.90395256, 0.4888085, 0.98954149, 0.54784577,
            0.52514096, 0.71397652, 0.96795374, 0.703604, 0.11441412, 0.22741624, 0.14197118,
            0.14224136, 0.00554162, 0.08584995, 0.08854763, 0.55170396, 0.34441713, 0.01855595,
            0.56010681, 0.56593886, 0.16720486, 0.75972297, 0.44932321, 0.38319587, 0.71794273,
            0.19173315, 0.26728697, 0.56639508, 0.07816565,
        ],
    )
    .unwrap();
    let conv_layer13 = TransposedConvolutionLayer::new(kernel13, 1, Padding::Valid);
    let target_output13 = array![[
        [
            0.11221097, 0.25393641, 0.67919815, 1.24135923, 1.34347594, 1.5637002, 1.50847054,
            1.31736684, 0.94875318
        ],
        [
            0.30922532, 1.0439173, 2.08635426, 3.13329601, 3.38154435, 4.00457954, 3.40948582,
            2.02716112, 1.24175572
        ],
        [
            0.97871649, 2.42231035, 4.27559996, 5.86935711, 6.33727169, 6.40368557, 4.74324656,
            2.3427186, 0.98843777
        ],
        [
            1.39362335, 3.39518213, 5.42994404, 7.90259457, 7.22151232, 5.67542982, 3.88371825,
            2.39641833, 0.77419257
        ],
        [
            1.57723653, 3.47078919, 6.37835836, 7.36247015, 6.31258011, 5.7229495, 3.48286438,
            2.3355186, 1.64052856
        ],
        [
            1.34743714, 3.43229151, 5.93352032, 7.0454669, 6.3706975, 5.4440093, 4.24764013,
            2.11220455, 1.23056281
        ],
        [
            0.92192829, 3.01708746, 4.65305805, 5.78711128, 4.97469044, 4.81353617, 3.21132874,
            1.63747561, 0.81521058
        ],
        [
            1.08403945, 2.11493945, 2.78000998, 4.0945096, 3.36858582, 2.46697569, 1.74338531,
            0.82624424, 0.14705695
        ],
        [
            0.30500686, 0.41861984, 0.84720075, 1.00279093, 0.72046667, 0.79743832, 0.16538149,
            0.08845505, 0.00727747
        ]
    ]];
    let current_output13 = conv_layer13.transposed_convolve(&test_input13);

    assert!(
        arr_allclose(&current_output13, &target_output13),
        "{:?} was not equal to {:?}",
        current_output13,
        target_output13
    );

    let test_input14 = array![
        [
            [0.67903226, 0.00826331, 0.54254976, 0.89380722, 0.11534049, 0.71321382],
            [0.46833661, 0.42596257, 0.4862424, 0.93492688, 0.68173687, 0.0525712],
            [0.28192635, 0.4604141, 0.96248486, 0.43289438, 0.34953818, 0.69026706],
            [0.51265391, 0.69908698, 0.28793439, 0.06127732, 0.73615981, 0.8519083],
            [0.04873959, 0.88632006, 0.55267819, 0.35348675, 0.68609754, 0.07016035],
            [0.602, 0.6732832, 0.82135327, 0.18075775, 0.37878715, 0.62920417]
        ],
        [
            [0.37063052, 0.32302735, 0.90577848, 0.54883824, 0.57664813, 0.93476227],
            [0.2624883, 0.27476154, 0.09443506, 0.74253211, 0.01185389, 0.23280993],
            [0.17598269, 0.19381722, 0.65946395, 0.67435937, 0.92559452, 0.8947401],
            [0.98693223, 0.08145659, 0.03987844, 0.76296625, 0.29654609, 0.38589397],
            [0.86821306, 0.99967966, 0.77658385, 0.97871967, 0.12471338, 0.48183946],
            [0.79895421, 0.61783545, 0.94045248, 0.71905491, 0.43614203, 0.11011575]
        ]
    ];

    let kernel14: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.34765513, 0.39178115, 0.7308709, 0.34274808, 0.35493045, 0.8328545, 0.06045034,
            0.49653239, 0.29012534, 0.55789277, 0.57551019, 0.4569207, 0.2188389, 0.51010307,
            0.95294057, 0.69243168, 0.91676561, 0.53584658, 0.67510863, 0.52303485, 0.96874585,
            0.58568427, 0.70051905, 0.44720848, 0.44401752, 0.76227056, 0.18282856, 0.36082301,
            0.06306251, 0.76909697, 0.11797102, 0.50691241,
        ],
    )
    .unwrap();
    let conv_layer14 = TransposedConvolutionLayer::new(kernel14, 1, Padding::Valid);
    let target_output14 = array![[
        [
            0.57585037, 0.76364625, 1.94183803, 2.16251945, 2.39283943, 3.14258838, 1.84732425,
            1.49347305, 0.73336595
        ],
        [
            1.00351584, 1.82259083, 2.65602732, 4.60247898, 4.20218515, 4.61125612, 3.60207915,
            1.44854379, 0.91195381
        ],
        [
            1.04143023, 2.31083131, 3.80921221, 6.23875475, 6.61048603, 7.13424206, 5.04592752,
            3.06466866, 1.49795175
        ],
        [
            1.77795625, 3.09701562, 5.17984867, 7.94578028, 7.70639515, 8.89980888, 7.43802595,
            4.09727383, 2.31241965
        ],
        [
            2.22991204, 4.10335493, 6.09120941, 8.690732, 8.57539749, 8.77283955, 6.82311583,
            3.10708356, 1.6642977
        ],
        [
            2.45986271, 4.96600389, 7.55961275, 9.67286396, 9.24251842, 8.52404022, 6.07226658,
            4.10913944, 1.98358417
        ],
        [
            1.56172109, 4.37550831, 5.75944281, 7.36128998, 6.47343159, 5.05355406, 4.56406116,
            2.50266957, 1.35308421
        ],
        [
            0.59482294, 2.36414266, 3.5347352, 5.0652771, 4.95751762, 3.44564557, 2.89052868,
            1.37468767, 0.62006032
        ],
        [
            0.18212508, 1.10785806, 1.72559428, 2.76350546, 2.42866373, 1.97583163, 1.30772269,
            1.09595466, 0.49149993
        ]
    ]];
    let current_output14 = conv_layer14.transposed_convolve(&test_input14);

    assert!(
        arr_allclose(&current_output14, &target_output14),
        "{:?} was not equal to {:?}",
        current_output14,
        target_output14
    );

    let test_input15 = array![
        [
            [0.83869766, 0.93539648, 0.94569022, 0.21557524, 0.28468878, 0.00299157],
            [0.94424678, 0.2590096, 0.12880773, 0.50224615, 0.63195637, 0.05983794],
            [0.21579172, 0.90917851, 0.77259356, 0.9772731, 0.90224167, 0.52640993],
            [0.47108477, 0.04924011, 0.25460968, 0.99656238, 0.50701512, 0.28755965],
            [0.36141592, 0.02703854, 0.16006813, 0.70015163, 0.30561776, 0.8973991],
            [0.57343286, 0.73674763, 0.26068632, 0.61278396, 0.96492469, 0.26253388]
        ],
        [
            [0.27807142, 0.79624586, 0.67275447, 0.6407772, 0.12578371, 0.84160687],
            [0.3605408, 0.96801484, 0.1393529, 0.72915195, 0.9006433, 0.49849265],
            [0.5104628, 0.89867176, 0.955501, 0.59073767, 0.86861896, 0.91761973],
            [0.57172958, 0.86013336, 0.39986316, 0.29667477, 0.94210516, 0.89406526],
            [0.92121492, 0.05097519, 0.08086525, 0.96673279, 0.59848206, 0.37690058],
            [0.47047686, 0.24334698, 0.94723157, 0.71601816, 0.66163847, 0.90634656]
        ]
    ];

    let kernel15: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.49495855, 0.28245237, 0.41918304, 0.27396586, 0.42253863, 0.94620468, 0.04238893,
            0.61110426, 0.95395429, 0.39995442, 0.66795813, 0.7064477, 0.99121827, 0.90247559,
            0.85239344, 0.70719117, 0.77630934, 0.10098496, 0.23122132, 0.86239354, 0.34863841,
            0.10337279, 0.44741335, 0.02051973, 0.33192209, 0.76970787, 0.37064746, 0.27677528,
            0.4141578, 0.34976024, 0.20377244, 0.15038555,
        ],
    )
    .unwrap();
    let conv_layer15 = TransposedConvolutionLayer::new(kernel15, 1, Padding::Valid);
    let target_output15 = array![[
        [
            0.63099003, 1.34608877, 1.75082076, 1.98498559, 1.85907125, 1.82573402, 0.84591758,
            0.38232154, 0.72661591
        ],
        [
            1.19858277, 2.67795968, 2.58351493, 3.96009898, 3.58286071, 2.68525267, 1.60987163,
            1.64341712, 0.46538812
        ],
        [
            1.92014134, 4.34389448, 5.10541439, 6.88027287, 7.05802965, 5.94529247, 3.67278457,
            2.6092205, 1.21741319
        ],
        [
            2.91309118, 5.17199373, 7.60955715, 9.05007458, 9.68222427, 7.89955235, 5.29427814,
            3.59543991, 1.49926209
        ],
        [
            2.75297689, 4.35431862, 5.25646496, 9.07204056, 8.73261642, 8.22127342, 7.11689186,
            4.10902882, 1.50810683
        ],
        [
            2.18741608,
            3.83706903,
            6.16862202,
            8.74655437,
            9.12581444,
            10.13547897,
            7.92423439,
            4.10705185,
            2.37056136
        ],
        [
            1.7606039, 2.91384292, 3.49122214, 5.13231182, 6.22529364, 7.05143118, 4.85112524,
            3.06809187, 1.25513005
        ],
        [
            1.44296074, 2.07135868, 2.33264256, 4.4678998, 4.74986029, 5.01742172, 4.28815365,
            2.52396321, 1.12763393
        ],
        [
            0.7632488, 1.51312506, 1.98537087, 2.62437987, 3.00677538, 2.73287773, 2.05228782,
            1.19035769, 0.32196307
        ]
    ]];
    let current_output15 = conv_layer15.transposed_convolve(&test_input15);

    assert!(
        arr_allclose(&current_output15, &target_output15),
        "{:?} was not equal to {:?}",
        current_output15,
        target_output15
    );

    let test_input16 = array![
        [
            [0.63522565, 0.39588143, 0.29719462, 0.58224157, 0.3832173, 0.74430689],
            [0.31255614, 0.26080993, 0.93509568, 0.7061453, 0.48032829, 0.33021633],
            [0.13239637, 0.35350803, 0.38336865, 0.51017932, 0.63328423, 0.07322941],
            [0.8859752, 0.41102257, 0.27946881, 0.91541525, 0.2293425, 0.81592788],
            [0.0093977, 0.63983893, 0.7104612, 0.86655818, 0.93765805, 0.35742824],
            [0.60207121, 0.42087104, 0.64172531, 0.08560265, 0.02744765, 0.39207275]
        ],
        [
            [0.21459883, 0.11062973, 0.87420401, 0.69151705, 0.17871671, 0.85303368],
            [0.85760948, 0.51250188, 0.48142319, 0.3410254, 0.1897166, 0.55302912],
            [0.89934647, 0.99207644, 0.31536198, 0.46590055, 0.01530014, 0.69832446],
            [0.99070403, 0.02463103, 0.01077096, 0.67219725, 0.66763209, 0.73046063],
            [0.76907682, 0.53152923, 0.06813734, 0.47991778, 0.84002591, 0.13388659],
            [0.69237571, 0.56391527, 0.5064835, 0.98023208, 0.83162772, 0.45037648]
        ]
    ];

    let kernel16: Array4<f32> = Array::from_shape_vec(
        (2, 1, 3, 3),
        vec![
            0.87442643, 0.3228065, 0.77707546, 0.65587144, 0.15356175, 0.88312191, 0.18077046,
            0.81715684, 0.01058917, 0.54235333, 0.97475392, 0.52494562, 0.14190415, 0.90132593,
            0.29823582, 0.59148337, 0.51946688, 0.74204314,
        ],
    )
    .unwrap();
    let conv_layer16 = TransposedConvolutionLayer::new(kernel16, 1, Padding::Valid);
    let target_output16 = array![[
        [
            0.67184645, 0.8204056, 1.57590318, 2.19794846, 1.98388553, 2.22685146, 1.46337032,
            1.02617896
        ],
        [
            1.1855135, 2.00918579, 3.46006966, 3.74144769, 3.57520247, 3.20598888, 2.39339113,
            1.45863223
        ],
        [
            1.17199111, 3.59887433, 4.99553013, 4.69519281, 5.03331757, 4.13265705, 3.42242336,
            1.52091098
        ],
        [
            2.09025049, 3.87922001, 4.81807709, 4.67659855, 4.40496206, 4.88471127, 3.4115696,
            1.70429373
        ],
        [
            1.70288157, 4.12860537, 4.87072229, 4.79354382, 4.8730216, 6.019485, 3.04146862,
            1.80540752
        ],
        [
            1.7634213, 4.06030941, 4.79341125, 4.28062057, 5.71479034, 5.67290545, 3.82164478,
            1.44734907
        ],
        [
            0.9497273, 1.9098146, 3.34233689, 2.74781251, 3.43230224, 3.15445948, 1.73329329,
            0.58370095
        ],
        [
            0.51836538, 1.26128042, 1.57258248, 1.80566311, 1.45863247, 1.51997852, 1.17173481,
            0.3383505
        ]
    ]];
    let current_output16 = conv_layer16.transposed_convolve(&test_input16);

    assert!(
        arr_allclose(&current_output16, &target_output16),
        "{:?} was not equal to {:?}",
        current_output16,
        target_output16
    );

    let test_input17 = array![
        [
            [0.11199604, 0.32003467, 0.50086904, 0.22239626, 0.97291627, 0.86974588],
            [0.49535274, 0.54243551, 0.10466194, 0.10202583, 0.25952704, 0.62879491],
            [0.53307658, 0.26822981, 0.50847601, 0.19252869, 0.09730921, 0.31764306],
            [0.14314991, 0.94600351, 0.6540288, 0.71126364, 0.97858765, 0.32067546],
            [0.7039669, 0.73717363, 0.90192675, 0.75033962, 0.9941749, 0.78996001],
            [0.61614864, 0.35973564, 0.96392444, 0.59018909, 0.06196258, 0.83785075]
        ],
        [
            [0.37142364, 0.79140057, 0.07532935, 0.9428474, 0.43666556, 0.02624486],
            [0.42536419, 0.78015715, 0.85766182, 0.71461617, 0.33209484, 0.80531437],
            [0.97302119, 0.68557511, 0.69086133, 0.61613714, 0.67111015, 0.12122969],
            [0.50159, 0.74436352, 0.73831213, 0.23079262, 0.04572792, 0.19533794],
            [0.49251168, 0.61319175, 0.44526327, 0.20337714, 0.781168, 0.70581635],
            [0.46196784, 0.01862379, 0.90610073, 0.80737148, 0.71486742, 0.50324622]
        ]
    ];

    let kernel17: Array4<f32> = Array::from_shape_vec(
        (2, 1, 3, 3),
        vec![
            0.50388184, 0.85626405, 0.24466414, 0.09893909, 0.05245275, 0.11470018, 0.90349659,
            0.31138107, 0.82471947, 0.01722594, 0.5932752, 0.70548972, 0.57845507, 0.26923983,
            0.62891106, 0.11725764, 0.40164034, 0.69518119,
        ],
    )
    .unwrap();
    let conv_layer17 = TransposedConvolutionLayer::new(kernel17, 1, Padding::Valid);
    let target_output17 = array![[
        [
            0.0628309, 0.49114692, 1.28666592, 1.23849607, 1.42324352, 2.25041866, 1.30640328,
            0.23131111
        ],
        [
            0.48285925, 1.55860341, 1.9855442, 2.49365473, 1.99768877, 2.16738367, 1.75287819,
            0.83825028
        ],
        [
            0.72517294, 2.39215112, 4.02016258, 4.02673149, 4.01332903, 4.32369471, 2.71691704,
            1.47737741
        ],
        [
            1.19378877, 2.52935648, 4.68609285, 4.70981598, 4.26211452, 3.52144241, 2.10883379,
            1.40736187
        ],
        [
            1.2632376, 2.82325029, 5.06589174, 4.42442322, 3.94806719, 3.67524219, 2.79431343,
            1.19709587
        ],
        [
            0.8611204, 2.76843905, 3.97588158, 5.07218838, 5.18713331, 3.96763563, 3.38942075,
            1.49479389
        ],
        [
            1.02197123, 1.35801363, 3.27048373, 3.06861067, 3.70693469, 3.32519007, 2.52856827,
            1.55476439
        ],
        [
            0.61085743, 0.7046057, 1.92594576, 1.60160661, 2.07272482, 2.17042804, 1.01107895,
            1.04083908
        ]
    ]];
    let current_output17 = conv_layer17.transposed_convolve(&test_input17);

    assert!(
        arr_allclose(&current_output17, &target_output17),
        "{:?} was not equal to {:?}",
        current_output17,
        target_output17
    );

    let test_input18 = array![
        [
            [0.80738875, 0.6793183, 0.71761442, 0.50780315, 0.94015468, 0.35663],
            [0.00467546, 0.84130347, 0.34600323, 0.40760242, 0.4710771, 0.98480686],
            [0.13988449, 0.40220328, 0.55816801, 0.84533263, 0.42742897, 0.45769088],
            [0.83071573, 0.04634837, 0.39555076, 0.60654117, 0.97791479, 0.34863748],
            [0.18171401, 0.93737433, 0.01817268, 0.31007424, 0.40953961, 0.55591142],
            [0.20362667, 0.38996139, 0.26285828, 0.9031745, 0.95724048, 0.52430856]
        ],
        [
            [0.55766591, 0.65770666, 0.75144028, 0.53338896, 0.94846253, 0.69645764],
            [0.96843016, 0.66096356, 0.17514281, 0.83987904, 0.40466376, 0.13681252],
            [0.53675128, 0.55692621, 0.5836484, 0.26183346, 0.24014333, 0.45519071],
            [0.36609648, 0.66722493, 0.40931306, 0.76783566, 0.71030917, 0.87999191],
            [0.10468024, 0.23255507, 0.38094539, 0.40905062, 0.59137548, 0.66255471],
            [0.64648789, 0.59517514, 0.5136288, 0.05843278, 0.51399223, 0.38453336]
        ]
    ];

    let kernel18: Array4<f32> = Array::from_shape_vec(
        (2, 1, 3, 3),
        vec![
            0.69702778, 0.50475239, 0.06902273, 0.09784848, 0.35103089, 0.99617131, 0.65296593,
            0.44575031, 0.25736929, 0.95939058, 0.07333596, 0.80891676, 0.51967519, 0.25790987,
            0.98334417, 0.6337845, 0.69324831, 0.76697878,
        ],
    )
    .unwrap();
    let conv_layer18 = TransposedConvolutionLayer::new(kernel18, 1, Padding::Valid);
    let target_output18 = array![[
        [
            1.09779179, 1.55292964, 2.11907625, 1.86192477, 2.51807594, 1.92737484, 1.06320453,
            0.58799183
        ],
        [
            1.30116868, 2.12942481, 3.88751698, 3.96616101, 3.50397158, 3.79450655, 3.04100275,
            1.21876621
        ],
        [
            1.9968214, 3.20875311, 5.52343178, 5.9639678, 5.19000673, 5.21901274, 3.34754443,
            2.14132643
        ],
        [
            1.83971417, 3.27659965, 4.31823587, 5.24316263, 5.29619026, 5.85816669, 2.78802013,
            1.99784303
        ],
        [
            0.93014896, 2.76323819, 4.34028149, 4.20557213, 4.60195351, 5.36541176, 3.67158604,
            2.25387692
        ],
        [
            1.60880327, 2.37359858, 3.82170677, 4.74075747, 5.31570816, 5.22968006, 3.69214845,
            2.31721067
        ],
        [
            0.54088604, 1.49870157, 2.38100958, 2.47073627, 2.82067537, 3.44586325, 3.00831795,
            1.55166972
        ],
        [
            0.54269528, 1.17078757, 1.6318469, 1.65686822, 1.85549855, 1.64634752, 1.14087319,
            0.42986986
        ]
    ]];
    let current_output18 = conv_layer18.transposed_convolve(&test_input18);

    assert!(
        arr_allclose(&current_output18, &target_output18),
        "{:?} was not equal to {:?}",
        current_output18,
        target_output18
    );

    let test_input19 = array![[
        [0.61443019, 0.86792451, 0.25625055, 0.35837705, 0.59633007],
        [0.83091686, 0.23309404, 0.65488359, 0.26520997, 0.34644812],
        [0.87685893, 0.56456918, 0.50217426, 0.967748, 0.96909704],
        [0.00554681, 0.48245647, 0.05388465, 0.2207341, 0.93746062],
        [0.75877589, 0.98550952, 0.38765016, 0.70755854, 0.35234871]
    ]];

    let kernel19: Array4<f32> = Array::from_shape_vec(
        (1, 1, 4, 4),
        vec![
            0.86497679, 0.36315935, 0.0597226, 0.40005399, 0.3090082, 0.1404125, 0.32328949,
            0.77128536, 0.74202918, 0.0151671, 0.34408022, 0.36001204, 0.32235638, 0.1375511,
            0.39828563, 0.73056589,
        ],
    )
    .unwrap();
    let conv_layer19 = TransposedConvolutionLayer::new(kernel19, 1, Padding::Valid);
    let target_output19 = array![[
        [
            0.53146785, 0.97387058, 0.57354105, 0.70068753, 1.00848031, 0.34048012, 0.17898455,
            0.23856422
        ],
        [
            0.90858775, 0.85784566, 1.10042357, 1.71477425, 1.51519656, 0.80087775, 0.59598732,
            0.59853864
        ],
        [
            1.47114789, 1.64882231, 1.61020887, 3.08374476, 2.82989955, 1.47472572, 1.09578943,
            0.86958754
        ],
        [
            1.0903846, 1.26676822, 1.96216345, 3.00131798, 3.66841364, 1.95568728, 1.91801441,
            1.68286896
        ],
        [
            1.57654381, 1.89952028, 2.08171916, 3.46233559, 3.37844396, 1.73003888, 1.79101169,
            1.46599793
        ],
        [
            0.52124494, 1.07175839, 1.14145565, 2.75601649, 3.04283619, 1.57238901, 2.15464973,
            1.31724775
        ],
        [
            0.56482196, 0.89907116, 0.64961648, 1.41794598, 1.46684909, 0.64459002, 0.91060376,
            0.81172651
        ],
        [
            0.24459624, 0.42205572, 0.56272894, 1.22825778, 1.08528244, 0.61348033, 0.65725356,
            0.25741395
        ]
    ]];
    let current_output19 = conv_layer19.transposed_convolve(&test_input19);

    assert!(
        arr_allclose(&current_output19, &target_output19),
        "{:?} was not equal to {:?}",
        current_output19,
        target_output19
    );

    let test_input20 = array![[
        [0.77667642, 0.86437463, 0.90270169, 0.44541779, 0.34967113],
        [0.75469949, 0.35844142, 0.80019287, 0.25439821, 0.72871477],
        [0.96180466, 0.34620104, 0.94261591, 0.50686453, 0.61523259],
        [0.12266664, 0.55900903, 0.21047816, 0.16580609, 0.2582814],
        [0.15493484, 0.20253018, 0.21612453, 0.50386606, 0.91294247]
    ]];

    let kernel20: Array4<f32> = Array::from_shape_vec(
        (1, 1, 4, 4),
        vec![
            0.80801025, 0.83888204, 0.7180022, 0.20993725, 0.58702784, 0.52850523, 0.00845493,
            0.90907092, 0.63151247, 0.81394259, 0.25651567, 0.02755868, 0.03389508, 0.30576277,
            0.37300143, 0.13004215,
        ],
    )
    .unwrap();
    let conv_layer20 = TransposedConvolutionLayer::new(kernel20, 1, Padding::Valid);
    let target_output20 = array![[
        [
            0.62756252, 1.34996343, 2.01215601, 1.90083849, 1.48579717, 0.8026545, 0.34457442,
            0.073409
        ],
        [
            1.06573558, 1.84061766, 2.48243427, 2.74454236, 2.6860919, 1.97114325, 0.98449928,
            0.47086024
        ],
        [
            1.71065855, 2.87388563, 3.88104606, 4.17130232, 3.40537977, 2.61638618, 0.88754654,
            0.8012501
        ],
        [
            1.16664958, 2.37355542, 3.04679608, 4.0498929, 3.04755282, 2.63713646, 1.06852162,
            0.67906731
        ],
        [
            0.83016992, 1.93099487, 2.4178102, 2.7789588, 3.60724664, 2.58076859, 1.39086747,
            0.53817534
        ],
        [
            0.20101702, 0.95945811, 1.35116601, 1.53497207, 1.92807257, 1.44154227, 0.83198786,
            0.91705346
        ],
        [
            0.10200108, 0.31046295, 0.56488967, 0.84477198, 1.25832868, 1.04647827, 0.36597106,
            0.05874696
        ],
        [
            0.00525153, 0.05423808, 0.12704267, 0.17885351, 0.29195994, 0.49519184, 0.40605268,
            0.118721
        ]
    ]];
    let current_output20 = conv_layer20.transposed_convolve(&test_input20);

    assert!(
        arr_allclose(&current_output20, &target_output20),
        "{:?} was not equal to {:?}",
        current_output20,
        target_output20
    );

    let test_input21 = array![[
        [0.608248, 0.16874252, 0.27251563, 0.19374174, 0.22429509],
        [0.55013979, 0.49685606, 0.46965293, 0.11797722, 0.73022862],
        [0.38946074, 0.34076832, 0.72125803, 0.86716635, 0.98185355],
        [0.15272116, 0.02051389, 0.27791748, 0.75870737, 0.23504322],
        [0.02695821, 0.39229695, 0.15247433, 0.48075755, 0.76108715]
    ]];

    let kernel21: Array4<f32> = Array::from_shape_vec(
        (1, 1, 4, 4),
        vec![
            0.22628488, 0.94135732, 0.30246892, 0.01136111, 0.9598438, 0.8383011, 0.9723616,
            0.47197653, 0.94492614, 0.21735137, 0.31927554, 0.39669688, 0.05186762, 0.79388622,
            0.17953912, 0.60369669,
        ],
    )
    .unwrap();
    let conv_layer21 = TransposedConvolutionLayer::new(kernel21, 1, Padding::Valid);
    let target_output21 = array![[
        [
            0.13763732, 0.6107626, 0.40448928, 0.35832515, 0.31747937, 0.27283874, 0.07004341,
            0.00254824
        ],
        [
            0.70831138, 1.30217052, 1.73486114, 1.49091089, 1.14632702, 1.23346114, 0.53174931,
            0.11415822
        ],
        [
            1.19092679, 1.67347229, 2.49241972, 2.76988077, 3.1595037, 2.36200738, 1.2210294,
            0.44478285
        ],
        [
            0.95976985, 1.88267481, 2.46977806, 3.60770631, 4.76217031, 3.22066665, 1.8808881,
            0.89116776
        ],
        [
            0.54923475, 1.13103449, 2.24192858, 3.4642961, 3.8144393, 3.59036827, 1.68211722,
            0.94991654
        ],
        [
            0.1903863, 0.77858353, 1.1951226, 2.74178386, 3.02540684, 2.95161867, 2.04276514,
            1.04519796
        ],
        [
            0.0333948, 0.49885827, 0.29607037, 0.9792335, 1.70476854, 0.86999667, 0.93394017,
            0.44381571
        ],
        [
            0.00139826, 0.04174926, 0.3241877, 0.23269026, 0.68534607, 0.78257966, 0.42687666,
            0.45946583
        ]
    ]];
    let current_output21 = conv_layer21.transposed_convolve(&test_input21);

    assert!(
        arr_allclose(&current_output21, &target_output21),
        "{:?} was not equal to {:?}",
        current_output21,
        target_output21
    );

    let test_input22 = array![[
        [0.96639477, 0.48956135, 0.47275548],
        [0.41221554, 0.17531991, 0.84556717],
        [0.04869543, 0.81426052, 0.87818436]
    ]];

    let kernel22: Array4<f32> = Array::from_shape_vec(
        (1, 1, 4, 4),
        vec![
            0.95668298, 0.51194492, 0.7431968, 0.02038087, 0.00589341, 0.47047342, 0.10196105,
            0.48561459, 0.29723151, 0.14647066, 0.2117447, 0.82616457, 0.95831466, 0.91854632,
            0.98925644, 0.57293056,
        ],
    )
    .unwrap();
    let conv_layer22 = TransposedConvolutionLayer::new(kernel22, 1, Padding::Valid);
    let target_output22 = array![[
        [0.92453343, 0.9630959, 1.42112708, 0.62556124, 0.36132807, 0.00963517],
        [0.40005496, 0.8363055, 1.53669751, 1.31321287, 0.91793674, 0.24681038],
        [0.33625841, 1.28594983, 1.83954084, 2.64290905, 1.34517372, 0.8190918],
        [1.04892063, 1.49702895, 2.61626673, 2.49359083, 1.55700588, 1.39589286],
        [0.40950602, 0.795807, 1.76974607, 1.52757394, 1.7955929, 1.2099762],
        [0.04666554, 0.82504678, 1.63768518, 1.6400646, 1.33526433, 0.50313866]
    ]];
    let current_output22 = conv_layer22.transposed_convolve(&test_input22);

    assert!(
        arr_allclose(&current_output22, &target_output22),
        "{:?} was not equal to {:?}",
        current_output22,
        target_output22
    );

    let test_input23 = array![[
        [0.19675551, 0.33214344, 0.24979123],
        [0.60150461, 0.26777977, 0.91831289],
        [0.25964327, 0.38164377, 0.45220875]
    ]];

    let kernel23: Array4<f32> = Array::from_shape_vec(
        (1, 1, 4, 4),
        vec![
            0.09959481, 0.91934493, 0.80443255, 0.44542108, 0.30965452, 0.42501828, 0.61946218,
            0.89371026, 0.08402323, 0.52933582, 0.81631795, 0.57557299, 0.08988074, 0.91843095,
            0.84704402, 0.91947679,
        ],
    )
    .unwrap();
    let conv_layer23 = TransposedConvolutionLayer::new(kernel23, 1, Padding::Valid);
    let target_output23 = array![[
        [0.01959583, 0.21396592, 0.48850879, 0.58447033, 0.34888387, 0.11126227],
        [0.12083297, 0.76613408, 1.1619097, 1.81533861, 1.30957174, 0.63227689],
        [0.22864978, 0.74733865, 1.73296463, 2.44874835, 1.73702312, 1.16590202],
        [0.14862461, 0.77998811, 1.66716003, 2.40322399, 2.04194975, 1.16237688],
        [0.07587975, 0.74601412, 1.28994203, 2.32365441, 1.61287868, 1.10464656],
        [0.02333693, 0.27276683, 0.61108756, 0.97732759, 0.73395336, 0.41579548]
    ]];
    let current_output23 = conv_layer23.transposed_convolve(&test_input23);

    assert!(
        arr_allclose(&current_output23, &target_output23),
        "{:?} was not equal to {:?}",
        current_output23,
        target_output23
    );

    let test_input24 = array![[
        [0.49461111, 0.24117837, 0.97676102],
        [0.99350736, 0.92321747, 0.58543872],
        [0.3386878, 0.53527257, 0.08310746]
    ]];

    let kernel24: Array4<f32> = Array::from_shape_vec(
        (1, 1, 4, 4),
        vec![
            0.6829108, 0.66831507, 0.78695294, 0.42882872, 0.84581493, 0.11308007, 0.07337866,
            0.02265424, 0.66036183, 0.69046313, 0.47793465, 0.58312228, 0.33399306, 0.14415831,
            0.03236333, 0.31139955,
        ],
    )
    .unwrap();
    let conv_layer24 = TransposedConvolutionLayer::new(kernel24, 1, Padding::Valid);
    let target_output24 = array![[
        [0.33777526, 0.4952594, 1.21745944, 1.05468357, 0.87208915, 0.41886318],
        [1.09682643, 1.55437398, 2.68837166, 1.68318522, 0.93375194, 0.27318072],
        [1.39823914, 1.98588645, 2.40142202, 1.85657215, 0.96627986, 0.61847264],
        [1.10773826, 1.93853235, 2.03156161, 1.78378105, 0.94308877, 0.64742804],
        [0.55548108, 1.03889561, 0.9471128, 0.93435645, 0.65828556, 0.23076716],
        [0.11311939, 0.22760201, 0.11588237, 0.13477106, 0.16937327, 0.02587963]
    ]];
    let current_output24 = conv_layer24.transposed_convolve(&test_input24);

    assert!(
        arr_allclose(&current_output24, &target_output24),
        "{:?} was not equal to {:?}",
        current_output24,
        target_output24
    );
}

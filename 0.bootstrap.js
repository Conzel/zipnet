(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[0],{

/***/ "../pkg/wasm.js":
/*!**********************!*\
  !*** ../pkg/wasm.js ***!
  \**********************/
/*! exports provided: encode_image, decode_image, __wbg_new_59cb74e423758ede, __wbg_stack_558ba5917b466edd, __wbg_error_4bb6c2a97407129a, __wbindgen_object_drop_ref, __wbindgen_throw */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _wasm_bg_wasm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wasm_bg.wasm */ \"../pkg/wasm_bg.wasm\");\n/* harmony import */ var _wasm_bg_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./wasm_bg.js */ \"../pkg/wasm_bg.js\");\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"encode_image\", function() { return _wasm_bg_js__WEBPACK_IMPORTED_MODULE_1__[\"encode_image\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"decode_image\", function() { return _wasm_bg_js__WEBPACK_IMPORTED_MODULE_1__[\"decode_image\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"__wbg_new_59cb74e423758ede\", function() { return _wasm_bg_js__WEBPACK_IMPORTED_MODULE_1__[\"__wbg_new_59cb74e423758ede\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"__wbg_stack_558ba5917b466edd\", function() { return _wasm_bg_js__WEBPACK_IMPORTED_MODULE_1__[\"__wbg_stack_558ba5917b466edd\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"__wbg_error_4bb6c2a97407129a\", function() { return _wasm_bg_js__WEBPACK_IMPORTED_MODULE_1__[\"__wbg_error_4bb6c2a97407129a\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_object_drop_ref\", function() { return _wasm_bg_js__WEBPACK_IMPORTED_MODULE_1__[\"__wbindgen_object_drop_ref\"]; });\n\n/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_throw\", function() { return _wasm_bg_js__WEBPACK_IMPORTED_MODULE_1__[\"__wbindgen_throw\"]; });\n\n\n\n\n//# sourceURL=webpack:///../pkg/wasm.js?");

/***/ }),

/***/ "../pkg/wasm_bg.js":
/*!*************************!*\
  !*** ../pkg/wasm_bg.js ***!
  \*************************/
/*! exports provided: encode_image, decode_image, __wbg_new_59cb74e423758ede, __wbg_stack_558ba5917b466edd, __wbg_error_4bb6c2a97407129a, __wbindgen_object_drop_ref, __wbindgen_throw */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"encode_image\", function() { return encode_image; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"decode_image\", function() { return decode_image; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_new_59cb74e423758ede\", function() { return __wbg_new_59cb74e423758ede; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_stack_558ba5917b466edd\", function() { return __wbg_stack_558ba5917b466edd; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_error_4bb6c2a97407129a\", function() { return __wbg_error_4bb6c2a97407129a; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_object_drop_ref\", function() { return __wbindgen_object_drop_ref; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_throw\", function() { return __wbindgen_throw; });\n/* harmony import */ var _wasm_bg_wasm__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./wasm_bg.wasm */ \"../pkg/wasm_bg.wasm\");\n\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nlet heap_next = heap.length;\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== _wasm_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetUint8Memory0 = new Uint8Array(_wasm_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== _wasm_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetInt32Memory0 = new Int32Array(_wasm_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n/**\n* @param {Uint8Array} buffer\n* @returns {Uint8Array}\n*/\nfunction encode_image(buffer) {\n    try {\n        const retptr = _wasm_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_add_to_stack_pointer\"](-16);\n        var ptr0 = passArray8ToWasm0(buffer, _wasm_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_malloc\"]);\n        var len0 = WASM_VECTOR_LEN;\n        _wasm_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"encode_image\"](retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v1 = getArrayU8FromWasm0(r0, r1).slice();\n        _wasm_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](r0, r1 * 1);\n        return v1;\n    } finally {\n        _wasm_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_add_to_stack_pointer\"](16);\n    }\n}\n\n/**\n* @param {Uint8Array} buffer\n* @returns {Uint8Array}\n*/\nfunction decode_image(buffer) {\n    try {\n        const retptr = _wasm_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_add_to_stack_pointer\"](-16);\n        var ptr0 = passArray8ToWasm0(buffer, _wasm_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_malloc\"]);\n        var len0 = WASM_VECTOR_LEN;\n        _wasm_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"decode_image\"](retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var v1 = getArrayU8FromWasm0(r0, r1).slice();\n        _wasm_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](r0, r1 * 1);\n        return v1;\n    } finally {\n        _wasm_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_add_to_stack_pointer\"](16);\n    }\n}\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction __wbg_new_59cb74e423758ede() {\n    var ret = new Error();\n    return addHeapObject(ret);\n};\n\nfunction __wbg_stack_558ba5917b466edd(arg0, arg1) {\n    var ret = getObject(arg1).stack;\n    var ptr0 = passStringToWasm0(ret, _wasm_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_malloc\"], _wasm_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_realloc\"]);\n    var len0 = WASM_VECTOR_LEN;\n    getInt32Memory0()[arg0 / 4 + 1] = len0;\n    getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n};\n\nfunction __wbg_error_4bb6c2a97407129a(arg0, arg1) {\n    try {\n        console.error(getStringFromWasm0(arg0, arg1));\n    } finally {\n        _wasm_bg_wasm__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](arg0, arg1);\n    }\n};\n\nfunction __wbindgen_object_drop_ref(arg0) {\n    takeObject(arg0);\n};\n\nfunction __wbindgen_throw(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n\n\n//# sourceURL=webpack:///../pkg/wasm_bg.js?");

/***/ }),

/***/ "../pkg/wasm_bg.wasm":
/*!***************************!*\
  !*** ../pkg/wasm_bg.wasm ***!
  \***************************/
/*! exports provided: memory, encode_image, decode_image, __wbindgen_add_to_stack_pointer, __wbindgen_malloc, __wbindgen_free, __wbindgen_realloc */
/***/ (function(module, exports, __webpack_require__) {

eval("\"use strict\";\n// Instantiate WebAssembly module\nvar wasmExports = __webpack_require__.w[module.i];\n__webpack_require__.r(exports);\n// export exports from WebAssembly module\nfor(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n// exec imports from WebAssembly module (for esm order)\n/* harmony import */ var m0 = __webpack_require__(/*! ./wasm_bg.js */ \"../pkg/wasm_bg.js\");\n\n\n// exec wasm module\nwasmExports[\"__webpack_init__\"]()\n\n//# sourceURL=webpack:///../pkg/wasm_bg.wasm?");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var wasm_zipnet__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! wasm-zipnet */ \"../pkg/wasm.js\");\n\n\n// wasm.greet();\n\n/// Prompts user to download the passed data\n/// https://stackoverflow.com/questions/23451726/saving-binary-data-as-file-using-javascript-from-a-browser\nfunction promptDownload(data) {\n    var saveByteArray = (function () {\n        var a = document.createElement(\"a\");\n        document.body.appendChild(a);\n        a.style = \"display: none\";\n        return function (data, name) {\n            var blob = new Blob(data, { type: \"octet/stream\" }),\n                url = window.URL.createObjectURL(blob);\n            a.href = url;\n            a.download = name;\n            a.click();\n            window.URL.revokeObjectURL(url);\n        };\n    }());\n    saveByteArray([data], \"zipnet-enc-\" + Date.now() + \".bin\");\n}\n\n/// Displays a file selected by the user in a preview.\nfunction previewImageToEncode() {\n    var preview = document.getElementById(\"encodedPreview\");\n    var file = document.getElementById(\"imgInput\").files[0];\n    var reader = new FileReader();\n\n    reader.onloadend = function () {\n        preview.src = reader.result;\n    }\n\n    if (file) {\n        reader.readAsDataURL(file);\n    } else {\n        preview.src = \"\";\n    }\n}\n\n/// Starts the encoding process and then opens a download prompt for the user.\nfunction downloadEncodedImage() {\n    var file = document.getElementById(\"imgInput\").files[0];\n    var reader = new FileReader();\n\n    reader.onloadend = function () {\n        var data = new Uint8Array(reader.result);\n\n        // Measuring exection time for the statistics\n        var start = performance.now();\n        var encoded = wasm_zipnet__WEBPACK_IMPORTED_MODULE_0__[\"encode_image\"](data);\n        var end = performance.now();\n\n        // TODO: Use actual (and maybe more interesting) stats\n        displayEncoderStats(data.length, encoded.length, 0, end - start);\n\n        promptDownload(encoded);\n    }\n\n    // Fallout if no file is selected beforehand.\n    if (file) {\n        reader.readAsArrayBuffer(file)\n    }\n    else {\n        alert(\"Please first select an image to encode.\");\n        console.log(\"Tried to encode without selected image.\");\n        return;\n    }\n}\n\nfunction displayEncoderStats(prev_size, new_size, PSNR, time) {\n    var stats_div = document.getElementById(\"statsEncoded\").innerHTML = \"<p> Previous size: \"\n        + prev_size + \" Byte, Encoded size: \" + new_size + \" Byte, PSNR: \" + PSNR + \", Encoding time: \" + time + \" ms</p>\";\n}\n\nfunction displayDecoderStats(time) {\n    var stats_div = document.getElementById(\"statsDecoded\").innerHTML = \"<p>Decoding time: \" + time + \" ms</p>\";\n}\n\n/// Decodes image and displays it in the preview.\nfunction decodeImageAndPreview() {\n    var preview = document.getElementById(\"decodedPreview\");\n    var file = document.getElementById('encodedInput').files[0];\n    var reader = new FileReader();\n\n    reader.onloadend = function () {\n        var data = new Uint8Array(reader.result);\n\n        // Measuring time for the performance stats.\n        var start = performance.now();\n        var decoded = wasm_zipnet__WEBPACK_IMPORTED_MODULE_0__[\"decode_image\"](data).buffer;\n        var end = performance.now();\n\n        displayDecoderStats(end - start);\n\n        // Puts the decoded data into the preview (in a convoluted way)\n        var decoded_blob = new Blob([decoded]);\n        var preview_reader = new FileReader();\n        preview_reader.onload = function (e) {\n            preview.src = e.target.result;\n        }\n        preview_reader.readAsDataURL(decoded_blob);\n    }\n\n    if (file) {\n        reader.readAsArrayBuffer(file)\n    }\n}\n\n/// Prompts the user to download the decoded image that is shown in the decoder preview.\nfunction downloadDecodedImage() {\n    var img_dataurl = document.getElementById(\"decodedPreview\").src;\n    if (img_dataurl == \"\") {\n        alert(\"Please first select an encoded image you want to decode.\");\n        console.log(\"Tried to download empty preview.\");\n        return;\n    }\n\n    var a = document.createElement(\"a\");\n    document.body.appendChild(a);\n    a.style = \"display: none\";\n    a.href = img_dataurl;\n    a.download = \"zipnet-decoded-\" + Date.now() + \".png\";\n    a.click();\n    window.URL.revokeObjectURL(img_dataurl);\n}\n\ndocument.getElementById('imgInput').addEventListener(\"change\", previewImageToEncode);\ndocument.getElementById(\"downloadEncoded\").addEventListener(\"click\", downloadEncodedImage);\ndocument.getElementById('encodedInput').addEventListener(\"change\", decodeImageAndPreview);\ndocument.getElementById(\"downloadDecoded\").addEventListener(\"click\", downloadDecodedImage);\n\n\n//# sourceURL=webpack:///./index.js?");

/***/ })

}]);
// This file has been automatically generated by Jinja2 via the
// script generate_tests.py.
// Please do not change this file by hand.
use ml::convolutions::*;
use ml::transposed_convolutions::*;
use ndarray::{array, Array, Array3, Array4, Dimension};

fn arr_allclose<D: Dimension>(arr1: &Array<f32, D>, arr2: &Array<f32, D>) -> bool {
    (arr1 - arr2).map(|x| (*x as f32).abs()).sum() < 1e-3
}

#[test]
fn test_py_implementation_random_arrays_conv2d_transpose() {
    let test_input1 = Array::from_shape_vec(
        (1, 5, 12),
        vec![
            0.17014849, 0.4305688, 0.5715329, 0.06520256, 0.12669589, 0.7501565, 0.9837982,
            0.55574155, 0.04181346, 0.23677547, 0.51154923, 0.02844254, 0.60484785, 0.72306335,
            0.22177844, 0.16487044, 0.46672952, 0.54035133, 0.6922357, 0.27845532, 0.66966337,
            0.41083884, 0.4583148, 0.70402896, 0.6177326, 0.9269775, 0.56033564, 0.9098013,
            0.2697065, 0.24242379, 0.7944849, 0.75231165, 0.9692583, 0.12854727, 0.9148518,
            0.3356524, 0.37189406, 0.55898565, 0.5888119, 0.44166553, 0.9034325, 0.2795916,
            0.7567664, 0.85028297, 0.96145767, 0.5566679, 0.84558666, 0.0474241, 0.23985276,
            0.07658575, 0.7197864, 0.13313323, 0.69580543, 0.12692, 0.38484824, 0.775336,
            0.52113837, 0.4364637, 0.14352316, 0.8997107,
        ],
    )
    .unwrap();

    let kernel1: Array4<f32> = Array::from_shape_vec(
        (1, 2, 3, 4),
        vec![
            0.64410555, 0.04471071, 0.767672, 0.43464628, 0.16569944, 0.18875164, 0.12285258,
            0.2781115, 0.5390728, 0.5066572, 0.97435564, 0.39133722, 0.7964828, 0.988919,
            0.35985747, 0.00756764, 0.53660643, 0.8659267, 0.8576183, 0.81628793, 0.9480399,
            0.45711017, 0.89837223, 0.8462714,
        ],
    )
    .unwrap();
    let conv_layer1 = ConvolutionLayer::new(kernel1, 1, Padding::Same);
    let target_output1: Array3<f32> = Array::from_shape_vec(
        (2, 5, 12),
        vec![
            0.5962331, 0.83637863, 1.1529787, 1.0157855, 0.9070474, 1.2382945, 1.2331537,
            1.6513704, 1.1982105, 1.2378336, 1.2224028, 0.6959464, 1.1769826, 1.816146, 2.728229,
            2.2109609, 2.1255207, 2.50432, 2.7749395, 3.3283005, 2.5454972, 2.633221, 1.738524,
            1.6821373, 1.3431054, 2.108685, 2.5862265, 2.6738737, 1.949336, 3.015229, 2.7782018,
            3.2154222, 3.0038066, 3.3980284, 2.7013354, 2.068744, 1.0355595, 2.273547, 2.556697,
            3.015909, 2.3358657, 2.4275043, 2.6356385, 2.9841154, 3.2598557, 3.2459064, 2.799757,
            1.7195195, 0.54771954, 1.126174, 1.460638, 1.7534037, 1.6381158, 1.8129468, 1.8779714,
            2.1111476, 2.2848132, 2.3932395, 1.7473613, 1.3746144, 1.5524352, 1.9348044, 1.6534619,
            1.5861377, 1.987649, 2.594295, 3.0012114, 3.0216765, 2.5378513, 1.9834527, 1.8623157,
            1.5208848, 2.7469363, 3.7406652, 3.8652496, 3.5245824, 3.1193244, 3.7952752, 4.825119,
            5.2512617, 4.51726, 3.7146547, 3.408181, 2.6731207, 2.8073037, 3.8729048, 4.8298173,
            4.87123, 3.9422147, 4.279995, 4.5136237, 5.77322, 5.439476, 5.0835567, 4.768084,
            2.6168149, 2.081366, 3.3641963, 4.851265, 4.7333984, 4.2789474, 4.3432083, 4.6603,
            5.6324086, 5.536275, 5.627255, 4.711583, 3.249443, 0.9487285, 1.8060963, 2.4609616,
            3.2288811, 2.9454598, 3.0524623, 3.5938811, 3.601328, 4.036102, 4.1742215, 3.1520245,
            2.5108736,
        ],
    )
    .unwrap();
    let current_output1: Array3<f32> = conv_layer1.convolve(&test_input1);

    assert!(
        arr_allclose(&current_output1, &target_output1),
        "{:?} was not equal to {:?}",
        current_output1,
        target_output1
    );

    let test_input2 = Array::from_shape_vec(
        (1, 5, 12),
        vec![
            0.70536447, 0.9289133, 0.0067116, 0.65220493, 0.72789615, 0.00785976, 0.32536873,
            0.09833383, 0.1022715, 0.7567798, 0.23972042, 0.38848338, 0.00744711, 0.8715701,
            0.07988323, 0.6283005, 0.8241853, 0.16570753, 0.6487234, 0.14438818, 0.6286194,
            0.34163022, 0.03235205, 0.25922647, 0.59344524, 0.9308157, 0.22162326, 0.91818297,
            0.97700953, 0.18019113, 0.775954, 0.14120784, 0.3426181, 0.5417864, 0.7768226,
            0.34603763, 0.6114103, 0.9716041, 0.5157695, 0.50755495, 0.6659802, 0.629322,
            0.60627973, 0.27978492, 0.28792506, 0.7547703, 0.0509604, 0.10449678, 0.89887625,
            0.6572328, 0.695583, 0.3626411, 0.37613922, 0.9241278, 0.39898983, 0.6908677,
            0.5511301, 0.36253917, 0.36786652, 0.88718724,
        ],
    )
    .unwrap();

    let kernel2: Array4<f32> = Array::from_shape_vec(
        (1, 2, 3, 4),
        vec![
            0.69587743, 0.4870034, 0.7135373, 0.9862549, 0.22876498, 0.75677496, 0.5617529,
            0.5566727, 0.7035832, 0.92333794, 0.85647196, 0.36252776, 0.9373231, 0.01684272,
            0.34317794, 0.921993, 0.36392415, 0.7462054, 0.7556754, 0.31284246, 0.4031665,
            0.7376267, 0.7926341, 0.36348057,
        ],
    )
    .unwrap();
    let conv_layer2 = ConvolutionLayer::new(kernel2, 1, Padding::Same);
    let target_output2: Array3<f32> = Array::from_shape_vec(
        (2, 5, 12),
        vec![
            1.3564377, 1.5861146, 2.1741238, 2.977067, 1.96656, 2.592227, 2.0258436, 1.4190426,
            1.77359, 1.5195776, 1.812231, 1.3361999, 2.4466214, 3.1795669, 4.2106533, 4.8541217,
            3.7726345, 4.4130187, 3.2843914, 2.1925886, 3.235096, 2.8782752, 3.1491508, 2.5000477,
            2.256017, 3.2241745, 4.396666, 5.1423144, 4.4975386, 4.6211023, 4.0017443, 3.3026273,
            3.537172, 2.672158, 2.8149247, 2.2224138, 2.7829351, 4.1658907, 5.2021847, 5.012398,
            4.8868723, 4.5073295, 4.276857, 3.9859507, 3.3921692, 3.7989578, 3.7944803, 2.7612224,
            2.0787416, 2.94511, 3.3660834, 2.848287, 2.76638, 2.9658427, 2.7255957, 2.5958047,
            2.3665383, 2.1334944, 1.8632023, 1.493624, 1.681469, 1.320741, 2.061222, 2.661359,
            1.4994489, 2.3513503, 1.4752592, 1.3259884, 1.5062985, 1.1449318, 1.8644803, 1.0382414,
            2.1000152, 2.35913, 3.9407437, 4.0848207, 2.9393706, 4.042309, 2.5782003, 2.0090466,
            2.7597034, 2.5436082, 2.3830247, 1.8483411, 2.0594642, 2.6143177, 3.7759306, 4.3808365,
            4.0104165, 3.9832141, 3.142334, 2.870056, 3.1212716, 2.2231066, 2.473146, 2.0709076,
            2.2540216, 3.5926056, 4.3881645, 4.1033382, 4.5108533, 3.7591808, 3.6836083, 3.4086106,
            2.7098072, 3.0996146, 3.473312, 1.8959662, 1.75264, 2.8320756, 3.0063198, 2.5435991,
            2.4433799, 2.6534812, 2.6660655, 2.3384748, 2.1489031, 1.9442121, 1.8263828, 1.4452461,
        ],
    )
    .unwrap();
    let current_output2: Array3<f32> = conv_layer2.convolve(&test_input2);

    assert!(
        arr_allclose(&current_output2, &target_output2),
        "{:?} was not equal to {:?}",
        current_output2,
        target_output2
    );

    let test_input3 = Array::from_shape_vec(
        (1, 5, 12),
        vec![
            0.84374106, 0.03665259, 0.23846498, 0.82509995, 0.97324103, 0.96826524, 0.77620417,
            0.8427075, 0.42989048, 0.76771307, 0.54514444, 0.7878393, 0.21897991, 0.975659,
            0.73295325, 0.69994044, 0.86701024, 0.76087946, 0.623545, 0.14890751, 0.8610666,
            0.21943341, 0.1644093, 0.6089244, 0.8612485, 0.02602104, 0.30423534, 0.5087405,
            0.16869895, 0.3329467, 0.179494, 0.33126613, 0.11996287, 0.21606164, 0.87119263,
            0.33579683, 0.2313126, 0.2576527, 0.3748985, 0.30113342, 0.8142977, 0.423247,
            0.8179498, 0.92175007, 0.21606776, 0.19149332, 0.4240341, 0.14780204, 0.46443272,
            0.00207204, 0.359202, 0.9019851, 0.21363449, 0.6390296, 0.5977058, 0.81350476,
            0.3685356, 0.90738845, 0.7828945, 0.9812083,
        ],
    )
    .unwrap();

    let kernel3: Array4<f32> = Array::from_shape_vec(
        (1, 2, 3, 4),
        vec![
            0.6726924, 0.46724817, 0.17302093, 0.39839587, 0.78055173, 0.8576361, 0.7335981,
            0.52934057, 0.9529279, 0.78965247, 0.46750203, 0.08403921, 0.73126566, 0.34934825,
            0.3459232, 0.54770446, 0.68714255, 0.29283327, 0.53392637, 0.8850151, 0.6909357,
            0.44388366, 0.9043074, 0.9949724,
        ],
    )
    .unwrap();
    let conv_layer3 = ConvolutionLayer::new(kernel3, 1, Padding::Same);
    let target_output3: Array3<f32> = Array::from_shape_vec(
        (2, 5, 12),
        vec![
            1.5108684, 1.8233508, 2.39143, 3.0874317, 3.6520452, 3.790851, 3.4175513, 3.2000792,
            2.8211396, 2.2668114, 2.740687, 1.8823644, 2.0704677, 2.5859742, 3.9012108, 4.4389195,
            4.8479514, 4.682585, 4.05008, 3.5785434, 3.2095263, 3.2642589, 3.5274646, 2.0942073,
            2.1430006, 2.8754559, 3.367775, 3.4645004, 3.6039948, 3.4867315, 3.2087996, 2.865409,
            2.335749, 2.6530063, 2.5330803, 1.8363254, 1.3227756, 1.719345, 2.6375918, 2.640315,
            2.9908473, 3.4107597, 3.811944, 3.257084, 3.075986, 3.5648422, 3.1825848, 2.1852257,
            0.8281126, 1.2917062, 1.9823642, 2.415611, 2.7524738, 3.1684325, 3.5200322, 3.1138139,
            2.790266, 2.8240392, 2.8814278, 2.227209, 1.0622271, 1.5776668, 2.6284227, 2.7365892,
            3.104782, 3.4718363, 3.2494702, 3.1276588, 2.6446157, 2.1510482, 2.5415947, 1.5909946,
            1.4542929, 2.379796, 3.9179282, 3.766936, 4.528562, 4.9853864, 4.7417655, 4.425913,
            3.702723, 3.6489084, 3.9444363, 2.6038518, 1.3106228, 2.2582211, 3.6909108, 3.9651465,
            3.9953473, 4.2028036, 4.0898447, 3.5466833, 2.7905817, 3.113526, 2.6970649, 1.6952008,
            0.8088171, 1.8812065, 3.0661545, 2.316031, 3.1402366, 3.5460663, 3.7387996, 3.0636678,
            3.4926574, 3.8770463, 2.9594288, 2.7016003, 0.41812247, 1.0779788, 1.9747369, 1.896226,
            2.6003776, 3.2991917, 3.4571803, 3.0953753, 3.5703564, 3.210897, 2.3926196, 2.1479855,
        ],
    )
    .unwrap();
    let current_output3: Array3<f32> = conv_layer3.convolve(&test_input3);

    assert!(
        arr_allclose(&current_output3, &target_output3),
        "{:?} was not equal to {:?}",
        current_output3,
        target_output3
    );

    let test_input4 = Array::from_shape_vec(
        (1, 5, 12),
        vec![
            0.64743847, 0.36691284, 0.5396585, 0.5372604, 0.47547424, 0.44373918, 0.34716287,
            0.21774843, 0.9437953, 0.51856595, 0.15765554, 0.9350713, 0.86233217, 0.81734437,
            0.6566154, 0.3879487, 0.28848994, 0.5814131, 0.06870039, 0.78543746, 0.47194287,
            0.12733267, 0.6111727, 0.25675833, 0.74741316, 0.45714313, 0.9649919, 0.57969916,
            0.5208711, 0.93666834, 0.13247305, 0.7087714, 0.17877895, 0.40767, 0.6906785,
            0.9675369, 0.224454, 0.28950995, 0.75431514, 0.99582964, 0.8120864, 0.9536324,
            0.7703749, 0.683158, 0.16371861, 0.42877796, 0.7300311, 0.9456737, 0.05700503,
            0.19623296, 0.44457257, 0.5512328, 0.15101007, 0.25140873, 0.2031063, 0.5537751,
            0.3641559, 0.701937, 0.27669305, 0.85076064,
        ],
    )
    .unwrap();

    let kernel4: Array4<f32> = Array::from_shape_vec(
        (1, 2, 5, 5),
        vec![
            0.00186597, 0.3316532, 0.15485734, 0.35000807, 0.42372492, 0.03995521, 0.5067197,
            0.38907993, 0.37287286, 0.21294773, 0.8646356, 0.10154326, 0.75313085, 0.7910046,
            0.15368015, 0.25977603, 0.40315583, 0.635939, 0.25689796, 0.13678746, 0.43744904,
            0.6658951, 0.564682, 0.70429957, 0.67241764, 0.15790685, 0.25059524, 0.6432024,
            0.60438925, 0.45131883, 0.96080875, 0.40131757, 0.60942906, 0.7035094, 0.6473561,
            0.05433872, 0.7478619, 0.24740443, 0.35665986, 0.00020906, 0.23741227, 0.57013196,
            0.6398819, 0.7132858, 0.90739846, 0.8246988, 0.1319153, 0.6876462, 0.846729,
            0.18134636,
        ],
    )
    .unwrap();
    let conv_layer4 = ConvolutionLayer::new(kernel4, 1, Padding::Same);
    let target_output4: Array3<f32> = Array::from_shape_vec(
        (2, 5, 12),
        vec![
            2.0365431, 2.9490836, 3.0331779, 2.8548086, 2.908665, 2.1172302, 3.0499513, 2.3633249,
            2.1738148, 3.3646894, 1.931078, 1.8278483, 2.6932087, 3.800699, 4.0931892, 4.102718,
            3.7426498, 3.974339, 3.6786277, 3.1629257, 3.8129697, 3.2043686, 2.9943833, 2.7069066,
            3.6770704, 4.716246, 5.584631, 5.923017, 5.141457, 5.531926, 4.753922, 4.7360206,
            4.7081637, 5.050024, 4.952313, 3.9205976, 3.218762, 4.376295, 5.2916975, 5.616717,
            5.09171, 4.8070717, 4.270381, 4.2587934, 4.090684, 4.533881, 3.7697911, 3.4487782,
            2.0512564, 3.1999261, 3.8658826, 4.542446, 4.312213, 4.01612, 3.5449796, 3.6211932,
            3.0643482, 4.3295364, 3.3256578, 3.1219788, 2.696005, 3.574628, 4.120244, 4.047898,
            3.209781, 3.4656146, 2.9569368, 3.1947732, 3.0449648, 3.059724, 2.8078446, 2.1802998,
            3.5140378, 4.570535, 5.6395416, 6.0340323, 5.839388, 5.602359, 5.3243036, 5.0687027,
            4.5418377, 5.240677, 4.5003386, 4.045315, 3.8253376, 6.005171, 6.782108, 7.3669806,
            7.2057133, 6.1440163, 6.3393497, 5.6812587, 5.709244, 7.4067698, 5.150238, 4.4708185,
            3.063973, 4.8498545, 5.555981, 5.734428, 5.342146, 5.480862, 4.7779527, 4.521054,
            4.594633, 5.3098593, 4.374544, 3.8607917, 2.0428703, 2.9957292, 3.946063, 4.688729,
            4.330951, 4.7848997, 4.131883, 3.696283, 3.906973, 3.6578665, 3.3960094, 3.1482964,
        ],
    )
    .unwrap();
    let current_output4: Array3<f32> = conv_layer4.convolve(&test_input4);

    assert!(
        arr_allclose(&current_output4, &target_output4),
        "{:?} was not equal to {:?}",
        current_output4,
        target_output4
    );

    let test_input5 = Array::from_shape_vec(
        (1, 5, 12),
        vec![
            0.9026019, 0.54676574, 0.33139232, 0.83673465, 0.05539654, 0.5554673, 0.9149804,
            0.9791666, 0.9000323, 0.6329186, 0.30872977, 0.30553624, 0.04431259, 0.5287215,
            0.3358437, 0.72178566, 0.72704846, 0.85191244, 0.07464863, 0.867838, 0.5849202,
            0.14913943, 0.18325551, 0.40498126, 0.75359416, 0.01821492, 0.5917236, 0.91982275,
            0.5287654, 0.7151285, 0.38420153, 0.517026, 0.5150141, 0.26934662, 0.7356045,
            0.97902703, 0.6362754, 0.27803296, 0.32063982, 0.83432084, 0.78711736, 0.28247103,
            0.7812688, 0.5270146, 0.4719829, 0.47535485, 0.23715672, 0.4404677, 0.90286416,
            0.66611385, 0.02649495, 0.3193976, 0.16608049, 0.5121102, 0.17436478, 0.313714,
            0.47244504, 0.9906781, 0.9064671, 0.29454133,
        ],
    )
    .unwrap();

    let kernel5: Array4<f32> = Array::from_shape_vec(
        (1, 2, 5, 5),
        vec![
            0.99321055, 0.12515199, 0.17643407, 0.16320723, 0.48754972, 0.53866875, 0.6358971,
            0.8935865, 0.82249755, 0.92702305, 0.10556214, 0.28283548, 0.14977625, 0.53714937,
            0.06378802, 0.4497216, 0.79292244, 0.5300166, 0.687625, 0.4744624, 0.73655206,
            0.42605233, 0.6592577, 0.3237799, 0.42867732, 0.87574345, 0.70010746, 0.01496939,
            0.78416556, 0.61210716, 0.98323476, 0.9316805, 0.05175687, 0.70876056, 0.52122,
            0.68573385, 0.415587, 0.87644994, 0.73337436, 0.5451011, 0.20423086, 0.5554448,
            0.48578474, 0.2764571, 0.9192946, 0.8920509, 0.34320405, 0.4283556, 0.3897719,
            0.06360459,
        ],
    )
    .unwrap();
    let conv_layer5 = ConvolutionLayer::new(kernel5, 1, Padding::Same);
    let target_output5: Array3<f32> = Array::from_shape_vec(
        (2, 5, 12),
        vec![
            1.6044791, 2.9738913, 3.3851674, 3.7892752, 3.8722038, 4.294318, 4.137747, 3.9084167,
            3.5568383, 3.961927, 2.1635895, 1.326947, 2.721849, 4.353232, 5.6967025, 4.60343,
            6.06272, 6.227995, 6.0270433, 5.618525, 5.4995894, 5.311312, 3.91107, 2.920878,
            3.0333917, 4.994297, 5.9221473, 6.666374, 6.5829268, 7.270841, 7.437726, 7.2875614,
            6.7290916, 5.8672414, 4.196739, 3.2553055, 2.6342373, 4.5372405, 5.163582, 5.2659416,
            4.8123574, 5.458763, 4.7279058, 5.160408, 4.7754726, 5.5735207, 4.883772, 3.6935985,
            1.9687274, 3.025896, 3.7061832, 3.3091571, 3.5674644, 3.793495, 3.3734276, 3.139727,
            3.4212806, 3.5227828, 3.017164, 2.2153528, 2.6128983, 4.7450275, 4.9631734, 5.229725,
            5.221007, 5.603853, 6.3370733, 5.216707, 4.964918, 5.62664, 3.372604, 1.8241458,
            2.4214692, 5.4495196, 6.82168, 6.1032133, 6.589137, 7.960164, 6.5126605, 6.450159,
            6.347713, 6.6249123, 4.462326, 2.5822103, 3.4378226, 6.0951605, 6.8771152, 6.928906,
            7.359851, 8.011133, 7.755198, 8.077671, 7.01576, 6.9095745, 5.2552094, 3.9806104,
            2.5835505, 4.1654005, 5.976403, 5.2296276, 5.530905, 5.8994403, 5.5716815, 5.67661,
            5.59254, 5.2627087, 4.028413, 3.174121, 2.4722266, 3.4605873, 3.788105, 3.772298,
            3.1616974, 3.8597307, 3.7574093, 3.4823174, 4.3733683, 4.5068307, 3.6149652, 2.9026988,
        ],
    )
    .unwrap();
    let current_output5: Array3<f32> = conv_layer5.convolve(&test_input5);

    assert!(
        arr_allclose(&current_output5, &target_output5),
        "{:?} was not equal to {:?}",
        current_output5,
        target_output5
    );

    let test_input6 = Array::from_shape_vec(
        (1, 5, 12),
        vec![
            0.729173, 0.19460331, 0.8634254, 0.6576018, 0.9657459, 0.22873744, 0.47843248,
            0.22157177, 0.9162307, 0.02157675, 0.44649428, 0.2792192, 0.685827, 0.75294507,
            0.7919586, 0.22560763, 0.88778716, 0.80092114, 0.00003577, 0.9737877, 0.9146247,
            0.13869576, 0.7059647, 0.0936791, 0.2647747, 0.52025, 0.0330946, 0.17754778,
            0.41998118, 0.02919354, 0.82382417, 0.4156855, 0.49590722, 0.69720376, 0.7155315,
            0.40795937, 0.15397236, 0.02265206, 0.7090415, 0.75877124, 0.67035425, 0.39483562,
            0.86222315, 0.9993058, 0.84902793, 0.26427644, 0.86764544, 0.24274233, 0.69865257,
            0.5739991, 0.7620597, 0.29289714, 0.88402116, 0.8942853, 0.7757528, 0.16431308,
            0.48939565, 0.56055367, 0.46453193, 0.9573795,
        ],
    )
    .unwrap();

    let kernel6: Array4<f32> = Array::from_shape_vec(
        (1, 2, 5, 5),
        vec![
            0.8899508, 0.16098963, 0.63514715, 0.810474, 0.29953358, 0.46075395, 0.02808736,
            0.59781086, 0.8855644, 0.61877847, 0.9537467, 0.6197168, 0.3379795, 0.13108306,
            0.30692965, 0.33537498, 0.01351478, 0.45529485, 0.6626128, 0.9497022, 0.7403127,
            0.06039312, 0.08292098, 0.80679554, 0.1354166, 0.2560622, 0.80891573, 0.97702754,
            0.4124968, 0.4359102, 0.8733311, 0.1396195, 0.52047473, 0.88564533, 0.29781443,
            0.21130918, 0.83071965, 0.3337948, 0.9783562, 0.42070097, 0.55396014, 0.16172563,
            0.7634967, 0.36205766, 0.48491392, 0.4980414, 0.6001484, 0.65126085, 0.3691911,
            0.11615072,
        ],
    )
    .unwrap();
    let conv_layer6 = ConvolutionLayer::new(kernel6, 1, Padding::Same);
    let target_output6: Array3<f32> = Array::from_shape_vec(
        (2, 5, 12),
        vec![
            2.267953, 3.21564, 4.774048, 3.2968996, 3.6771712, 3.6815, 4.3876266, 3.6043158,
            4.310758, 3.7443454, 2.9551795, 1.9743922, 2.998526, 3.4111335, 5.1871247, 4.8766108,
            5.8212566, 5.59785, 6.4534116, 5.083731, 6.310168, 4.7517743, 4.1092153, 2.85573,
            3.376641, 4.260986, 6.426632, 6.350503, 7.1726723, 7.027444, 7.525627, 6.3287616,
            7.0544252, 7.293503, 4.5518117, 3.7035964, 2.3545494, 3.612031, 5.4025555, 4.8088326,
            4.280886, 5.6827087, 6.4783244, 4.3112965, 5.7472615, 4.7814374, 3.4069211, 3.5255702,
            1.704738, 1.8037834, 3.0709944, 2.9129531, 4.4352136, 3.5596359, 3.3493762, 4.0201774,
            4.4374776, 4.0895247, 3.067373, 2.1984627, 2.429233, 3.631213, 4.239349, 4.6242943,
            3.3622413, 4.9148736, 4.5391765, 3.7365353, 4.5728416, 4.529556, 3.096163, 2.2520673,
            2.6779222, 4.06283, 5.8922014, 5.3134274, 6.138168, 5.344391, 7.0131917, 5.955953,
            6.4323845, 5.829684, 4.389828, 2.9295511, 4.677944, 5.265842, 7.075786, 6.8029404,
            7.425776, 7.882634, 7.062007, 6.941506, 7.9178176, 6.396098, 5.7343545, 4.2179337,
            2.9269273, 4.1152554, 5.0759416, 5.4419208, 5.6196337, 5.6062374, 6.4989867, 6.1425962,
            5.969679, 6.053014, 3.9032686, 3.3640952, 1.8862177, 2.7229784, 3.218368, 3.6371803,
            4.251641, 4.4670253, 4.5964932, 4.4884605, 4.512729, 3.909811, 3.939609, 2.24833,
        ],
    )
    .unwrap();
    let current_output6: Array3<f32> = conv_layer6.convolve(&test_input6);

    assert!(
        arr_allclose(&current_output6, &target_output6),
        "{:?} was not equal to {:?}",
        current_output6,
        target_output6
    );

    let test_input7 = Array::from_shape_vec(
        (1, 10, 15),
        vec![
            0.26983073, 0.8690525, 0.7446416, 0.471613, 0.72900707, 0.842964, 0.21457537, 0.938401,
            0.41665936, 0.05351101, 0.43856344, 0.7253113, 0.8520324, 0.4151233, 0.35101932,
            0.7388761, 0.3592986, 0.6741479, 0.9965808, 0.3117034, 0.8605703, 0.94308543,
            0.8192489, 0.31478795, 0.750324, 0.36604244, 0.78454614, 0.039194, 0.23696694,
            0.2418382, 0.24788351, 0.5622223, 0.15428482, 0.50688076, 0.37682602, 0.44385925,
            0.00051633, 0.53422695, 0.5675659, 0.53845215, 0.2130759, 0.86445093, 0.432881,
            0.6255918, 0.3942565, 0.07226853, 0.09869356, 0.32627374, 0.8543963, 0.85603166,
            0.25422713, 0.24929269, 0.36793318, 0.39957172, 0.9079535, 0.865758, 0.82237726,
            0.60374194, 0.7658025, 0.0215734, 0.473204, 0.6594781, 0.86392707, 0.8566667,
            0.48541847, 0.54855824, 0.5860555, 0.158874, 0.10558709, 0.19664533, 0.39609066,
            0.27843866, 0.49128443, 0.75033015, 0.35650545, 0.4687038, 0.6159849, 0.2547001,
            0.17250927, 0.07203952, 0.8724657, 0.14018923, 0.12091745, 0.4770398, 0.43290496,
            0.6356798, 0.7619444, 0.2383507, 0.95481586, 0.49641547, 0.7066018, 0.10666513,
            0.06810815, 0.79673207, 0.29373887, 0.55241185, 0.23906927, 0.18915932, 0.02753429,
            0.1438574, 0.5419741, 0.71984386, 0.12837073, 0.55637455, 0.14355855, 0.10225686,
            0.8755492, 0.62895286, 0.21388301, 0.30016333, 0.49605927, 0.8245107, 0.4528765,
            0.6836941, 0.28745723, 0.5031258, 0.26911622, 0.92149794, 0.7165893, 0.04745785,
            0.55642486, 0.34654748, 0.83168656, 0.8410765, 0.7668131, 0.84094906, 0.6012723,
            0.9256995, 0.66010624, 0.43380973, 0.62281454, 0.45852852, 0.61445725, 0.524579,
            0.06486581, 0.14233574, 0.13930365, 0.5838787, 0.45914945, 0.30819193, 0.70949817,
            0.8803759, 0.6927248, 0.50569826, 0.7358748, 0.58652496, 0.85065925, 0.3247378,
            0.6760192, 0.4483504,
        ],
    )
    .unwrap();

    let kernel7: Array4<f32> = Array::from_shape_vec(
        (1, 2, 3, 4),
        vec![
            0.59195757, 0.37883574, 0.7796499, 0.32748002, 0.44507304, 0.7488422, 0.14428215,
            0.8785777, 0.15468395, 0.6638725, 0.30651525, 0.9492515, 0.55669755, 0.08302987,
            0.45890567, 0.05946975, 0.9099885, 0.30235246, 0.24214035, 0.42138377, 0.38782486,
            0.21880285, 0.9182205, 0.85290706,
        ],
    )
    .unwrap();
    let conv_layer7 = ConvolutionLayer::new(kernel7, 1, Padding::Same);
    let target_output7: Array3<f32> = Array::from_shape_vec(
        (2, 10, 15),
        vec![
            1.0814548, 2.1323817, 2.4973965, 2.753912, 3.2686222, 2.6999412, 2.9557095, 3.1735246,
            2.170726, 2.134482, 2.3161843, 1.8841673, 2.1994247, 1.7476768, 1.3605331, 1.4534962,
            1.9481233, 3.6172092, 3.4964957, 3.6694987, 3.8769042, 3.49276, 3.8832414, 3.2430928,
            3.5594049, 3.0214827, 3.0416975, 3.116152, 3.3505416, 2.1976514, 1.0677532, 1.381607,
            2.783234, 3.4381344, 3.2216341, 3.7821343, 2.7365277, 3.3947675, 3.2709196, 3.7666745,
            3.6673348, 4.336421, 3.171865, 3.46026, 1.83915, 0.91922307, 1.8328133, 2.7943184,
            3.6317737, 3.2441936, 3.2806304, 2.6186538, 2.3358836, 2.0719445, 2.9609692, 2.9781382,
            3.7939553, 3.5006883, 3.7917643, 2.402421, 1.2533131, 1.8343247, 2.8190906, 2.9632208,
            3.431161, 3.3012323, 2.9566202, 2.079488, 2.0367002, 2.6386008, 3.0868235, 3.4907887,
            4.140903, 3.6044214, 2.6395493, 1.3721285, 1.9903783, 2.93755, 2.8375483, 3.2624552,
            3.1352162, 2.119961, 2.3670347, 1.7173977, 1.615894, 2.5158603, 2.5359862, 3.292122,
            3.2395022, 2.182125, 1.540076, 1.587864, 2.9522884, 2.6551623, 1.898135, 3.0292368,
            2.1140578, 3.0805218, 1.9280403, 2.253911, 2.6944966, 3.0830922, 3.2145474, 3.7446282,
            2.0274777, 1.3677855, 2.305688, 2.9195988, 3.3846996, 3.3347259, 3.7674952, 3.472927,
            3.4113274, 3.1806006, 2.6538794, 2.741838, 2.9023075, 3.5010095, 2.9077055, 1.9710189,
            0.910616, 1.9292147, 3.000282, 3.4651284, 3.825086, 3.6794014, 4.109372, 4.423121,
            4.2246227, 3.6658049, 3.8908427, 3.0488849, 3.9681275, 2.9874423, 2.5932493, 0.5915877,
            0.9139862, 2.103384, 1.9484974, 2.812225, 3.0557218, 2.8687353, 3.1934116, 2.939462,
            2.9590642, 2.6122613, 2.5148375, 2.402917, 2.4818912, 1.505717, 1.1337812, 1.7499158,
            1.798035, 1.9395019, 2.4178672, 1.6241606, 2.3779545, 1.7972807, 1.3681991, 1.3708366,
            1.811352, 1.4229425, 1.5127765, 1.175832, 0.6968384, 1.2800081, 1.8740455, 3.4507523,
            3.0665913, 3.477496, 3.193316, 3.700609, 2.7950106, 3.1223989, 2.8017015, 2.7004724,
            2.0577233, 2.7527544, 2.7812288, 1.6772647, 0.94852006, 1.611922, 2.7949266, 2.737929,
            3.2217035, 2.7332962, 2.725784, 3.1489577, 3.4299555, 2.7757647, 3.5325406, 2.9523811,
            3.0376623, 2.269337, 1.1461529, 0.7903619, 1.5075662, 2.767911, 2.81318, 2.4763384,
            2.392187, 2.1864324, 1.7319317, 2.1911664, 2.7861257, 3.0431335, 2.8922827, 3.3660185,
            2.671238, 1.8794124, 1.179114, 1.7226572, 2.3825965, 2.2984712, 3.1521244, 3.0385427,
            2.3035538, 1.5902123, 1.8307476, 2.3434737, 2.852096, 3.206879, 3.927091, 2.7296002,
            2.212889, 1.1796026, 1.8164002, 2.651226, 2.4376755, 3.508818, 2.3663263, 1.8977236,
            2.1275537, 1.5550191, 1.6424568, 2.1700613, 1.9549918, 3.0682502, 2.338068, 1.942599,
            1.1480613, 1.3990161, 2.736357, 1.9201223, 1.9795187, 1.9006358, 2.0081508, 2.2833223,
            1.2622976, 2.150114, 2.4684813, 2.521714, 3.240907, 2.42824, 1.8084475, 1.2627532,
            2.307512, 2.3937974, 2.1998029, 2.8944168, 3.0323944, 2.7882197, 2.6807806, 2.1216798,
            2.0701382, 1.8533604, 2.6822655, 3.1654806, 1.894539, 1.5106019, 0.9348926, 1.9276571,
            2.823421, 3.272918, 3.2081048, 2.945599, 3.4211245, 3.7101915, 3.2739098, 3.180776,
            2.940328, 2.7191458, 3.0209348, 2.3158405, 2.226647, 0.42594737, 1.5172019, 1.9890183,
            2.1600204, 3.0716002, 3.1224084, 3.1149871, 2.9096756, 3.0367503, 2.902698, 2.6181502,
            2.2853231, 2.456609, 2.1447015, 1.4560375,
        ],
    )
    .unwrap();
    let current_output7: Array3<f32> = conv_layer7.convolve(&test_input7);

    assert!(
        arr_allclose(&current_output7, &target_output7),
        "{:?} was not equal to {:?}",
        current_output7,
        target_output7
    );

    let test_input8 = Array::from_shape_vec(
        (1, 10, 15),
        vec![
            0.5070326, 0.5272234, 0.71761, 0.560904, 0.22129431, 0.2624427, 0.6557088, 0.00633,
            0.6603214, 0.45500925, 0.6523986, 0.14666249, 0.32440838, 0.2805719, 0.42671442,
            0.74477625, 0.9118973, 0.5335283, 0.36968935, 0.5693756, 0.36426732, 0.11819325,
            0.95361024, 0.13343851, 0.5940242, 0.7282295, 0.9320007, 0.46956548, 0.5087874,
            0.7952918, 0.73709416, 0.3358689, 0.03185032, 0.27057356, 0.26166973, 0.5843129,
            0.5337139, 0.19571388, 0.1192536, 0.75616854, 0.97167397, 0.71154076, 0.26672947,
            0.07128377, 0.3383284, 0.8008563, 0.9504947, 0.5971434, 0.7847773, 0.92326206,
            0.24163638, 0.12968542, 0.5954836, 0.6734995, 0.08627631, 0.7485715, 0.8782484,
            0.6863155, 0.7264353, 0.08944888, 0.68172634, 0.4284322, 0.48237634, 0.6856524,
            0.04009921, 0.0687674, 0.9063645, 0.42620143, 0.61030614, 0.10040135, 0.50107217,
            0.763057, 0.25769317, 0.8816114, 0.7770131, 0.23345616, 0.62762326, 0.15315741,
            0.73589575, 0.2752067, 0.85641515, 0.7439484, 0.6581306, 0.4056261, 0.13899311,
            0.26460668, 0.9179794, 0.96651816, 0.89336777, 0.18948041, 0.9371178, 0.7124811,
            0.9657549, 0.6203675, 0.32684848, 0.11439406, 0.07654371, 0.95680344, 0.9728639,
            0.6055871, 0.00439729, 0.8525613, 0.3167563, 0.13499211, 0.68338645, 0.7955047,
            0.21689218, 0.2826704, 0.12328367, 0.6890043, 0.5906649, 0.41700745, 0.30266365,
            0.5716598, 0.12726787, 0.35587692, 0.16889893, 0.3114892, 0.1309899, 0.24026695,
            0.55435276, 0.34375766, 0.4225387, 0.37165096, 0.6202945, 0.6069533, 0.05756181,
            0.0153275, 0.8497578, 0.79796964, 0.4071996, 0.19325097, 0.04944435, 0.59729165,
            0.39304134, 0.679002, 0.6126854, 0.67232877, 0.7156292, 0.09058711, 0.33372015,
            0.8941644, 0.30899736, 0.3348802, 0.6412177, 0.26750943, 0.03709449, 0.56803024,
            0.8756273, 0.5771133,
        ],
    )
    .unwrap();

    let kernel8: Array4<f32> = Array::from_shape_vec(
        (1, 2, 3, 4),
        vec![
            0.56024176, 0.5868575, 0.75167763, 0.36936092, 0.37185487, 0.35425207, 0.24336162,
            0.01027582, 0.2671537, 0.83992416, 0.49819484, 0.7831867, 0.70054483, 0.8701863,
            0.49413827, 0.84670645, 0.8069649, 0.093459, 0.93408287, 0.8206956, 0.70209366,
            0.32817394, 0.744203, 0.39091238,
        ],
    )
    .unwrap();
    let conv_layer8 = ConvolutionLayer::new(kernel8, 1, Padding::Same);
    let target_output8: Array3<f32> = Array::from_shape_vec(
        (2, 10, 15),
        vec![
            1.3236284, 1.9708991, 2.0770705, 1.7348506, 1.3330328, 1.2409432, 1.388514, 1.2678378,
            1.5829661, 1.7736686, 1.8484821, 1.9128577, 1.791806, 1.7798725, 1.2453847, 1.7903876,
            2.3588357, 2.663392, 2.2359438, 2.2261205, 2.1990514, 2.3062, 1.9325516, 2.5321903,
            2.5639582, 3.6627765, 3.1560223, 2.6115026, 1.9206526, 1.5132902, 2.2576795, 3.084044,
            3.5860715, 3.4247026, 3.0413873, 2.58097, 2.3205433, 2.3438675, 2.1540656, 3.3632627,
            3.3001, 3.826237, 3.615526, 3.1436641, 2.2811966, 1.9860848, 2.4456074, 2.827616,
            2.2981834, 1.9052885, 2.1737442, 2.1694543, 2.7139347, 2.3041534, 2.5421677, 3.1184688,
            3.5004985, 3.4970398, 2.735303, 1.9579742, 1.8160306, 2.4835224, 3.409239, 3.2603066,
            3.1612995, 3.088457, 3.1588967, 3.022166, 2.4389458, 2.2269568, 2.8496637, 3.1810756,
            4.259771, 4.031611, 2.6067233, 1.952259, 2.8280468, 3.614744, 3.1055007, 2.4469786,
            2.0962734, 2.4479985, 2.8065884, 3.4824927, 2.5516927, 2.9205709, 2.6932201, 3.0292614,
            3.3207335, 2.2076535, 1.5490328, 2.407568, 2.2684014, 2.5940707, 2.1980793, 2.9301336,
            2.9697573, 3.4525373, 2.880136, 2.183271, 1.9406648, 2.285169, 2.599563, 2.897238,
            1.9938991, 1.8578249, 2.5539997, 3.1920605, 3.0286276, 3.0066452, 2.290462, 1.7716899,
            2.3711367, 2.821843, 3.4043336, 2.7817338, 2.2826972, 1.5934263, 2.01403, 1.7074112,
            1.7920451, 2.3144302, 2.8855054, 2.2693903, 2.5859196, 2.4677377, 2.4273415, 2.5832868,
            2.7119098, 2.2568936, 2.0576444, 1.4741156, 1.9009264, 2.1113045, 2.0028012, 1.0258183,
            1.3100857, 1.7199739, 1.4147189, 1.5364829, 1.6053916, 1.354437, 1.198949, 1.4210887,
            1.6256677, 1.7247566, 1.2994055, 1.1548965, 1.4460796, 1.0897913, 1.7597566, 2.6372736,
            3.23275, 3.0903134, 2.7304022, 2.214849, 1.9261378, 2.6514492, 2.0764868, 3.0914114,
            2.8393803, 3.2610874, 2.7713177, 2.8149936, 1.9092456, 2.2187307, 2.9444394, 4.038419,
            3.5392375, 2.8828878, 3.1358652, 3.2013898, 2.674736, 3.4588857, 4.2150426, 4.2169776,
            4.499471, 4.0466704, 3.6165645, 1.9660757, 2.5873342, 3.6148784, 4.7615685, 4.2459955,
            3.5672247, 3.1443646, 3.6014857, 2.9882693, 3.509478, 3.7415895, 4.736308, 4.907632,
            5.2080445, 4.32946, 2.158207, 2.2129345, 3.0475142, 4.661725, 3.8095965, 3.0446336,
            3.7958307, 3.4809902, 2.9966693, 3.298996, 3.9264004, 4.3767543, 4.02258, 4.775174,
            4.3244267, 2.8484893, 1.9824282, 3.1620708, 4.482045, 4.0606017, 3.7184393, 4.527711,
            3.2917974, 4.2442384, 3.4609258, 3.6854699, 3.7324798, 3.9149384, 5.685525, 4.896625,
            3.3705516, 2.367405, 3.1465452, 5.0315456, 3.5779257, 3.7789884, 3.3381286, 3.3601336,
            4.705175, 4.12606, 3.9719949, 3.9657626, 3.5491796, 4.148375, 4.692111, 3.586812,
            2.023974, 2.9883523, 4.2638235, 3.5158885, 4.1076584, 3.43372, 4.0556574, 3.7990968,
            3.6367145, 3.4434588, 4.0207562, 2.7162957, 3.4171247, 3.643233, 2.0923204, 1.7803453,
            3.4697847, 3.8977027, 3.6976702, 3.4213493, 2.9031894, 3.1961448, 3.6135793, 3.6222749,
            3.7938259, 3.7921214, 2.5258589, 2.3213005, 2.7119677, 1.5280321, 1.762624, 3.0922368,
            3.7312067, 3.5686297, 3.3202517, 3.6026573, 3.3881907, 3.508858, 3.1005156, 3.2173557,
            3.0494847, 2.7872467, 2.8128552, 2.5656378, 2.3491611, 0.9811486, 2.0560758, 2.6420045,
            2.277126, 2.5694628, 2.2711859, 1.4428134, 2.2899642, 2.4442298, 2.028346, 2.124065,
            1.9510777, 1.7524594, 1.6928842, 1.9308455,
        ],
    )
    .unwrap();
    let current_output8: Array3<f32> = conv_layer8.convolve(&test_input8);

    assert!(
        arr_allclose(&current_output8, &target_output8),
        "{:?} was not equal to {:?}",
        current_output8,
        target_output8
    );

    let test_input9 = Array::from_shape_vec(
        (1, 10, 15),
        vec![
            0.43911496, 0.92919487, 0.29325068, 0.62813336, 0.8131431, 0.19520658, 0.47931832,
            0.42483747, 0.47526902, 0.28184402, 0.09741595, 0.45691565, 0.44086096, 0.9638409,
            0.33859608, 0.26381832, 0.29839757, 0.68755937, 0.09156765, 0.58584654, 0.04617033,
            0.14705709, 0.81179595, 0.16751295, 0.06864621, 0.6308731, 0.38993102, 0.3644169,
            0.68174505, 0.272409, 0.23609333, 0.21866773, 0.80119157, 0.01742986, 0.49270406,
            0.37920174, 0.90869635, 0.8191268, 0.7636344, 0.7827788, 0.9694966, 0.79533535,
            0.00732174, 0.8372113, 0.9449071, 0.7670253, 0.50964797, 0.7843069, 0.7365313,
            0.71123123, 0.89694643, 0.9544987, 0.16811895, 0.97018677, 0.25394833, 0.5585159,
            0.51973414, 0.4357872, 0.29419306, 0.5180376, 0.80581653, 0.7190028, 0.52249014,
            0.5252596, 0.33191478, 0.3388958, 0.18619475, 0.6839338, 0.72234726, 0.25884646,
            0.7980101, 0.36219832, 0.7046317, 0.9284394, 0.468965, 0.23158234, 0.32747796,
            0.9097073, 0.7440483, 0.03255624, 0.30697423, 0.6246821, 0.1907446, 0.9843364,
            0.4038572, 0.5747709, 0.65160054, 0.6822517, 0.9840877, 0.18341686, 0.5288406,
            0.92906404, 0.87780553, 0.9090181, 0.82569945, 0.20383635, 0.7166643, 0.17061436,
            0.91526777, 0.08598401, 0.70100874, 0.40537685, 0.5971982, 0.92796123, 0.15859716,
            0.7859081, 0.8564488, 0.35816404, 0.79062706, 0.9644883, 0.13154314, 0.31929043,
            0.80048305, 0.07180241, 0.52815664, 0.45786336, 0.91537887, 0.9783313, 0.25753945,
            0.42799363, 0.07738555, 0.9294206, 0.07022415, 0.60058224, 0.6196278, 0.9008346,
            0.04155485, 0.82207745, 0.41282526, 0.9949608, 0.3109271, 0.47614527, 0.7615821,
            0.35893062, 0.07713356, 0.6123928, 0.62511915, 0.88098776, 0.21521498, 0.89468116,
            0.1842307, 0.10784956, 0.8354833, 0.2630701, 0.7184675, 0.06132602, 0.06056971,
            0.71349823, 0.00944792, 0.07349233,
        ],
    )
    .unwrap();

    let kernel9: Array4<f32> = Array::from_shape_vec(
        (1, 2, 3, 4),
        vec![
            0.35231608, 0.8533961, 0.17608605, 0.18067755, 0.51991457, 0.19053963, 0.5045173,
            0.7456122, 0.27621788, 0.48649722, 0.39297876, 0.54849166, 0.3746991, 0.8194284,
            0.34880427, 0.79505837, 0.41293454, 0.890512, 0.12076204, 0.20799449, 0.88948244,
            0.24437675, 0.7731474, 0.65954226,
        ],
    )
    .unwrap();
    let conv_layer9 = ConvolutionLayer::new(kernel9, 1, Padding::Same);
    let target_output9: Array3<f32> = Array::from_shape_vec(
        (2, 10, 15),
        vec![
            0.8970425, 1.0943992, 1.897887, 1.8427483, 1.4485583, 1.3759036, 1.5424688, 1.5014583,
            1.1454718, 1.117915, 1.4707973, 1.1602112, 1.6221006, 1.735188, 1.2978623, 0.9542188,
            1.7635, 2.2190752, 2.4155476, 2.2535787, 2.0742006, 3.003304, 2.180383, 2.5616283,
            2.9067457, 2.410893, 2.163627, 2.4211211, 2.924784, 2.4079983, 1.2035769, 1.8624079,
            2.2269735, 2.5762935, 2.802445, 2.5098505, 2.9531896, 2.6340284, 3.2628973, 2.9826748,
            2.9757683, 2.5453608, 3.093641, 2.6157086, 1.7808378, 1.5273777, 2.2518916, 2.8745713,
            2.65228, 2.938519, 2.7219777, 2.859206, 3.7934809, 3.383147, 3.1044009, 3.6306648,
            2.740658, 3.1301613, 3.1872537, 2.0557866, 1.3542968, 2.221955, 3.6802025, 3.0806744,
            2.6387246, 2.7261884, 2.7231467, 2.7443757, 3.016607, 2.844838, 3.0257978, 2.733584,
            3.3460944, 2.9311268, 2.1428921, 1.5836499, 2.6582336, 3.3504007, 3.1978345, 3.0626886,
            2.3253858, 1.8488618, 2.5145597, 2.7242541, 2.5323174, 3.293745, 2.5917103, 3.6128485,
            3.195901, 2.4262722, 1.7593501, 2.3972824, 3.2837207, 3.8785026, 3.341782, 2.7860172,
            2.1907616, 2.5888855, 2.293548, 2.5858235, 3.0475776, 3.0602632, 3.6680596, 2.7259789,
            2.381196, 1.5024208, 2.479714, 3.2798467, 3.907357, 3.179407, 3.3883913, 2.786966,
            2.1953561, 2.7144682, 2.8403475, 2.5548632, 2.9018545, 3.1305873, 2.9536026, 1.9769518,
            1.8597261, 2.0287752, 3.0608773, 3.1935065, 2.979986, 2.3101735, 2.8894477, 2.5287602,
            2.3564427, 2.8551748, 2.0868301, 3.0142636, 2.5957015, 2.148333, 1.802955, 0.7360641,
            1.3880796, 1.6594908, 2.4174447, 1.8565186, 1.7256715, 2.1561208, 1.5121418, 1.7471125,
            2.1075141, 1.5020183, 2.0590584, 1.0444522, 1.2015154, 1.1470615, 1.1027232, 1.5957452,
            1.6356155, 1.8954326, 2.0175185, 0.9706888, 1.7015401, 1.489041, 1.253679, 1.4334629,
            1.2285045, 1.390018, 2.0576885, 2.2442458, 1.2603638, 1.56736, 1.970657, 3.3064263,
            2.8371124, 2.935128, 2.5455744, 3.3513818, 3.4211361, 3.2448044, 3.2362082, 3.7001543,
            2.9681678, 3.5348341, 3.6986043, 2.5915394, 1.4499167, 2.4215815, 3.156615, 3.1818807,
            3.2719605, 3.3577664, 4.1992927, 3.2722604, 3.825485, 3.492294, 3.6220355, 2.929527,
            3.1556149, 3.2502725, 2.6516724, 2.075412, 2.8849807, 3.2761493, 3.6651483, 3.252998,
            3.6061907, 3.5354083, 3.849718, 4.378668, 4.1000433, 4.4518766, 3.2747302, 4.3753796,
            3.6821756, 2.7388678, 1.9677272, 3.058532, 4.0059133, 3.7721593, 3.7904778, 3.7204022,
            2.819858, 4.2209835, 3.6150625, 3.2506385, 4.115316, 3.1888094, 3.9710116, 4.0244083,
            2.3537505, 1.9593835, 3.233384, 4.6917496, 4.254874, 3.3360353, 2.9877846, 3.1924338,
            2.7875323, 3.6661599, 3.326186, 3.7121487, 3.3871882, 4.5523424, 3.9481225, 2.6496825,
            2.1673667, 3.432057, 4.182622, 4.394918, 3.9682267, 3.1052415, 2.860421, 3.1652172,
            2.9692829, 3.2746632, 3.6333938, 3.883254, 4.6161723, 3.8495889, 2.8515222, 2.4208052,
            3.2370887, 3.670778, 5.0594873, 3.8586266, 3.9024699, 3.0093846, 3.9117718, 2.3807197,
            4.028674, 3.1749225, 4.1882796, 4.102286, 2.7787676, 2.5597117, 2.1426, 3.0574539,
            3.917627, 4.2012577, 3.7887676, 3.276954, 3.3190148, 2.655313, 3.0651515, 3.7227845,
            2.5940323, 3.6888287, 3.084531, 2.678551, 1.8501868, 1.6490909, 1.3438425, 2.3972516,
            2.1627097, 2.5453837, 1.4936799, 2.4959054, 2.0983455, 2.303153, 2.2517512, 1.7621369,
            2.1957932, 1.7379256, 1.196699, 1.013642,
        ],
    )
    .unwrap();
    let current_output9: Array3<f32> = conv_layer9.convolve(&test_input9);

    assert!(
        arr_allclose(&current_output9, &target_output9),
        "{:?} was not equal to {:?}",
        current_output9,
        target_output9
    );

    let test_input10 = Array::from_shape_vec(
        (1, 10, 15),
        vec![
            0.4922565, 0.5211581, 0.97382414, 0.9779564, 0.1754263, 0.4551989, 0.81067127,
            0.7095975, 0.5087082, 0.78796804, 0.03310984, 0.20805901, 0.45704818, 0.9133983,
            0.5689028, 0.04247752, 0.55938286, 0.9835293, 0.04525762, 0.7176199, 0.82096803,
            0.5575717, 0.5744108, 0.9780689, 0.34563604, 0.3324931, 0.8797563, 0.14932355,
            0.1134909, 0.5645703, 0.30096474, 0.4096875, 0.5703153, 0.88738924, 0.6242374,
            0.77620894, 0.681929, 0.24701218, 0.74485576, 0.61556435, 0.63869125, 0.05875124,
            0.3210932, 0.96946657, 0.09463912, 0.6275637, 0.34162354, 0.74390864, 0.8736778,
            0.9513908, 0.24045336, 0.7003475, 0.87750345, 0.16564246, 0.6314963, 0.21785556,
            0.7654987, 0.13988015, 0.03287261, 0.82226163, 0.60896695, 0.13331373, 0.62307173,
            0.23316076, 0.9600204, 0.55291533, 0.29808274, 0.8765127, 0.98263544, 0.27148733,
            0.11101003, 0.2754741, 0.4540411, 0.19701396, 0.08459944, 0.98017716, 0.9800813,
            0.62585706, 0.18621969, 0.5836321, 0.17965508, 0.81336415, 0.94554824, 0.28304926,
            0.32718146, 0.46701643, 0.91682273, 0.6142979, 0.19277428, 0.28408903, 0.25507236,
            0.9800453, 0.36125833, 0.96792, 0.33258557, 0.9508625, 0.8424581, 0.8130291, 0.7774976,
            0.17691322, 0.9389267, 0.22419459, 0.33442205, 0.7614585, 0.37563834, 0.70754576,
            0.1499497, 0.9873837, 0.7166968, 0.40278858, 0.22288306, 0.3279577, 0.07722609,
            0.598755, 0.8143903, 0.87905455, 0.83061284, 0.9923988, 0.6196494, 0.536406,
            0.06662867, 0.83588266, 0.28182983, 0.662181, 0.99850965, 0.60448396, 0.12318801,
            0.91713256, 0.8540598, 0.19103892, 0.5929614, 0.9118344, 0.9381113, 0.3421722,
            0.8149188, 0.9595595, 0.02717085, 0.8916309, 0.9755575, 0.27588442, 0.59208006,
            0.00008138, 0.9552037, 0.12578069, 0.01249961, 0.05413999, 0.5153533, 0.40144867,
            0.8698811, 0.6468678,
        ],
    )
    .unwrap();

    let kernel10: Array4<f32> = Array::from_shape_vec(
        (1, 2, 5, 5),
        vec![
            0.8840439, 0.34315115, 0.52290094, 0.66408885, 0.98115784, 0.85046166, 0.7979905,
            0.9444794, 0.6930413, 0.90735817, 0.91156703, 0.45996496, 0.9045769, 0.17170428,
            0.43418503, 0.69308424, 0.42869946, 0.9244341, 0.41451567, 0.6224708, 0.00536506,
            0.33826837, 0.47926104, 0.0032256, 0.02230139, 0.35960108, 0.48593593, 0.86064774,
            0.28908366, 0.4153976, 0.3468706, 0.2242362, 0.93169004, 0.3198661, 0.5576108,
            0.17364207, 0.69407916, 0.88076496, 0.11111139, 0.19382912, 0.9307082, 0.9188555,
            0.10532705, 0.88550454, 0.20754221, 0.97926295, 0.3472928, 0.71126235, 0.03633394,
            0.7482733,
        ],
    )
    .unwrap();
    let conv_layer10 = ConvolutionLayer::new(kernel10, 1, Padding::Same);
    let target_output10: Array3<f32> = Array::from_shape_vec(
        (2, 10, 15),
        vec![
            3.6978028, 4.6707377, 5.51736, 6.4216824, 6.773158, 6.2769403, 6.9424314, 6.8226786,
            5.7114344, 5.182114, 4.9461184, 5.195571, 4.2753124, 3.5264697, 2.6256049, 4.7449384,
            6.216406, 8.349813, 8.142436, 9.331203, 8.963184, 8.302687, 8.079386, 7.6109424,
            7.158318, 5.5132117, 6.0796556, 5.623643, 4.5875072, 3.4256964, 4.771745, 6.055551,
            9.145177, 8.391955, 8.931327, 8.9906645, 9.843938, 8.020005, 7.945405, 7.649963,
            6.1911716, 5.4479923, 5.049665, 4.7764926, 2.8860478, 5.0805, 6.305799, 9.219542,
            7.9680233, 8.986635, 8.624611, 8.8536825, 8.1868725, 7.8335533, 7.736732, 6.2821174,
            5.696796, 5.0956383, 4.4602437, 3.2813797, 5.73739, 6.543953, 9.192895, 8.655929,
            8.90466, 9.268996, 9.123575, 8.40123, 8.336764, 7.881412, 6.3745456, 6.048982,
            6.2100825, 4.4665728, 3.213485, 6.0047565, 6.473502, 8.444796, 7.8778195, 8.84153,
            8.387108, 8.864442, 8.26414, 8.055592, 7.967378, 8.141147, 7.382805, 6.9696565,
            5.1343145, 4.248237, 5.3096414, 7.1592436, 8.300888, 8.482481, 7.924176, 8.322186,
            8.32728, 7.5395494, 8.423005, 8.55723, 9.221088, 8.357604, 9.024503, 6.7032504,
            4.802277, 5.589002, 7.3311796, 8.146433, 8.676155, 7.7171164, 8.756091, 8.085699,
            7.4253726, 7.413078, 8.280633, 8.464063, 8.021509, 8.641559, 6.592393, 5.21186,
            4.246324, 5.6825237, 6.8998713, 6.4051285, 5.8515143, 6.12742, 5.166916, 5.075394,
            4.655774, 5.6946692, 6.2534986, 6.074456, 7.0804367, 5.5542088, 4.3417063, 2.7036622,
            3.280841, 4.286546, 4.297736, 3.0886288, 4.186101, 2.9428535, 3.214046, 2.6468887,
            3.6257849, 3.6323576, 4.0635676, 4.5010905, 3.499371, 2.6691375, 2.1337438, 3.1662817,
            4.4882836, 4.066984, 4.170732, 4.277116, 4.488225, 4.119184, 4.359962, 3.461288,
            2.8349414, 3.0026424, 3.0558283, 3.0587106, 1.8318081, 3.5772407, 5.548462, 5.8328595,
            5.8610845, 7.0968246, 6.2669463, 6.0391893, 6.180512, 5.5211787, 4.262904, 4.7737455,
            4.561462, 3.7466815, 3.5919857, 2.8550084, 5.299343, 5.337315, 7.2035503, 8.175972,
            8.255983, 8.045052, 8.058989, 7.9129376, 6.445995, 7.077329, 4.9127693, 4.9780984,
            5.259611, 3.9746401, 2.3970644, 5.403871, 5.521092, 7.8157034, 7.134116, 8.504394,
            6.6595607, 8.478321, 7.8050303, 6.6766486, 6.6234927, 5.6401796, 5.92142, 4.4227347,
            3.5534515, 3.1578994, 4.9000354, 6.9882054, 7.7522206, 7.8792715, 7.9249654, 8.211366,
            7.792865, 7.984612, 7.772266, 5.4770784, 5.9350367, 5.171974, 5.7900867, 4.1345887,
            2.0231783, 5.331856, 6.6439238, 7.549578, 7.539109, 6.6953526, 7.7922354, 8.174173,
            6.973864, 6.426187, 7.149451, 6.6143627, 6.231894, 5.7593527, 4.509014, 3.1920583,
            5.2436934, 5.5413437, 7.8379445, 7.0583534, 7.02129, 7.8643036, 7.6014957, 6.9188266,
            6.7626166, 6.93406, 8.031855, 6.337111, 6.859575, 5.2383738, 3.6567764, 5.319687,
            5.892617, 8.408025, 7.2336855, 7.866521, 7.1797686, 6.8090544, 6.4903226, 6.5620127,
            7.5782876, 6.256521, 7.4543037, 7.3307443, 5.6046658, 4.552386, 3.9040008, 5.921063,
            5.23824, 7.0911226, 5.7369447, 5.935199, 4.6252723, 6.2338448, 5.5177155, 5.307095,
            6.1704254, 6.2240205, 6.081964, 4.9805226, 3.3986306, 3.57844, 3.1182158, 5.9013205,
            4.2467265, 3.805209, 3.858178, 4.353152, 3.578318, 3.7078052, 4.474897, 4.98383,
            4.9168015, 5.373883, 4.4490194, 2.4743557,
        ],
    )
    .unwrap();
    let current_output10: Array3<f32> = conv_layer10.convolve(&test_input10);

    assert!(
        arr_allclose(&current_output10, &target_output10),
        "{:?} was not equal to {:?}",
        current_output10,
        target_output10
    );

    let test_input11 = Array::from_shape_vec(
        (1, 10, 15),
        vec![
            0.28782296, 0.7382309, 0.60003114, 0.3259743, 0.85578996, 0.14142898, 0.39191914,
            0.05517358, 0.6050927, 0.968827, 0.47373444, 0.76571184, 0.50472075, 0.53850234,
            0.05837096, 0.56728834, 0.3979838, 0.2393961, 0.36507484, 0.01646563, 0.27730468,
            0.62646276, 0.94121945, 0.66457146, 0.8425775, 0.4301739, 0.68211764, 0.6059688,
            0.7629583, 0.56038123, 0.48163053, 0.437191, 0.43973154, 0.29997745, 0.21913478,
            0.6611514, 0.209788, 0.176356, 0.88925517, 0.14793599, 0.36509594, 0.5616029,
            0.6617385, 0.30053073, 0.36820948, 0.62227124, 0.4957459, 0.69923055, 0.3227648,
            0.9702412, 0.5679234, 0.13432135, 0.7430913, 0.19231908, 0.26170298, 0.10480803,
            0.00958306, 0.20726651, 0.20851518, 0.17973869, 0.23704103, 0.1163867, 0.2735905,
            0.8537909, 0.40303, 0.75797635, 0.34342998, 0.74670875, 0.82946825, 0.91931367,
            0.9654975, 0.18782942, 0.10021565, 0.05109123, 0.3069365, 0.10895161, 0.9891213,
            0.62504834, 0.507994, 0.47125, 0.84314245, 0.6054993, 0.92367506, 0.6953895,
            0.37023902, 0.67128026, 0.43450755, 0.28869846, 0.27641538, 0.8369712, 0.6856483,
            0.26890948, 0.65425915, 0.84581685, 0.51146317, 0.48995435, 0.52071315, 0.80564773,
            0.670521, 0.3835857, 0.47078377, 0.5100531, 0.82525116, 0.02126783, 0.9583153,
            0.23316967, 0.9487504, 0.9609589, 0.95734006, 0.00943314, 0.7521432, 0.46106157,
            0.84370506, 0.16933449, 0.71423984, 0.5316646, 0.6400151, 0.9638914, 0.69432026,
            0.8581641, 0.70813745, 0.2836983, 0.33953485, 0.8950543, 0.20262088, 0.81930757,
            0.09556881, 0.22266188, 0.63842744, 0.8304186, 0.12425002, 0.7582065, 0.09737789,
            0.84872884, 0.17490041, 0.37569723, 0.6669188, 0.8970669, 0.22398192, 0.29424527,
            0.56277037, 0.41113177, 0.7882464, 0.24159203, 0.5460915, 0.29690132, 0.3142075,
            0.7648111, 0.04421633, 0.9636684,
        ],
    )
    .unwrap();

    let kernel11: Array4<f32> = Array::from_shape_vec(
        (1, 2, 5, 5),
        vec![
            0.98529965, 0.26998708, 0.13811645, 0.9724998, 0.41856614, 0.13321315, 0.0937838,
            0.4742414, 0.79873264, 0.1621314, 0.5493846, 0.6481355, 0.05176858, 0.17029643,
            0.955536, 0.089831, 0.05664136, 0.9231865, 0.98567015, 0.01680515, 0.54690886,
            0.8593988, 0.6496963, 0.8382851, 0.2400014, 0.36792266, 0.01756373, 0.6596718,
            0.5680892, 0.19350345, 0.4854058, 0.7869872, 0.12335967, 0.14544043, 0.25711668,
            0.05608724, 0.18204254, 0.9562488, 0.44598028, 0.3229758, 0.8930679, 0.24216229,
            0.21437034, 0.38366762, 0.64894366, 0.8650639, 0.7790032, 0.3529938, 0.37360683,
            0.26240814,
        ],
    )
    .unwrap();
    let conv_layer11 = ConvolutionLayer::new(kernel11, 1, Padding::Same);
    let target_output11: Array3<f32> = Array::from_shape_vec(
        (2, 10, 15),
        vec![
            1.7790928, 2.3112137, 2.6574607, 3.2868488, 2.3190827, 1.7972422, 3.6158218, 3.1864102,
            3.3900578, 3.7588143, 4.040856, 3.6005104, 3.272749, 2.9118366, 2.1705112, 2.0169969,
            3.3550916, 4.8250866, 3.995534, 3.5113513, 4.80176, 3.8087974, 3.1171868, 3.9312181,
            4.787122, 4.1995516, 4.150902, 3.8393722, 3.2480493, 2.1674323, 3.0357065, 4.944644,
            5.208961, 5.570664, 5.2325587, 5.1346216, 5.599645, 6.87564, 6.765289, 6.484191,
            6.9949236, 5.457736, 4.8698783, 3.8041232, 3.0119944, 3.145824, 4.1276345, 5.377394,
            5.870141, 5.411256, 6.0046268, 7.4222608, 6.12541, 7.1314716, 7.0483956, 5.509046,
            5.650236, 5.6404815, 3.6709964, 2.747094, 2.8721452, 5.4585004, 6.0164785, 5.7430067,
            6.262473, 6.9708643, 6.4690433, 6.5753207, 6.615107, 6.26011, 5.4477816, 4.530878,
            5.3272343, 3.7948053, 2.3082452, 4.125591, 5.218129, 5.3805556, 8.344576, 7.6409984,
            6.8924303, 6.4134874, 6.441544, 6.987461, 6.4000955, 6.24633, 5.0384846, 5.154875,
            4.0282817, 2.8454452, 2.02215, 5.6526194, 6.8781724, 6.7008357, 6.742994, 6.413321,
            7.559603, 7.40937, 7.044071, 7.3685656, 6.805601, 5.8585134, 5.0209274, 4.130566,
            4.1662073, 4.6480846, 5.595265, 5.8834176, 7.686084, 7.2983027, 6.9599, 6.2829566,
            6.6236763, 6.893175, 6.6115212, 6.048422, 5.6619205, 6.628152, 5.2701325, 4.120878,
            2.1569932, 4.597866, 6.2161627, 5.7751784, 4.5990143, 4.458082, 4.7924695, 5.752834,
            4.577372, 4.1272707, 5.0488505, 4.7184224, 4.958552, 4.9735723, 3.1942847, 3.137252,
            4.023797, 3.8032281, 4.627031, 4.568993, 3.5733333, 3.7610772, 3.18077, 3.757836,
            4.2778854, 4.0206757, 4.2677965, 4.194384, 4.1097465, 3.1588109, 1.4298507, 2.1391265,
            2.3494236, 2.0906057, 2.3331125, 2.4642382, 2.83005, 2.081738, 3.0489202, 3.3054795,
            3.1759493, 3.3177657, 3.202424, 2.485935, 1.3365637, 2.698077, 2.8299553, 3.9089386,
            3.3544831, 3.2476377, 2.9769435, 3.615662, 4.472927, 3.5991015, 3.9807668, 4.051871,
            3.8710544, 2.9895356, 2.970071, 2.1549015, 3.2577348, 3.9232376, 4.5696526, 5.038468,
            4.3756633, 4.913619, 4.78343, 5.416654, 5.87645, 5.713347, 5.6842704, 5.3505435,
            4.269776, 2.762534, 2.2168674, 2.6165655, 3.9954457, 4.884281, 4.7850075, 5.1318097,
            5.554064, 6.2442183, 6.484909, 5.993125, 5.6575317, 4.99221, 4.0796494, 4.298067,
            2.966674, 2.4334278, 3.8251028, 3.8195567, 4.9224577, 5.979742, 5.4510574, 5.705312,
            5.856917, 5.5298347, 5.0687404, 5.632784, 5.2718463, 3.8339367, 4.110356, 2.616443,
            2.0392218, 2.9911911, 5.498532, 6.1511497, 6.654385, 5.265003, 6.5173025, 6.1582794,
            6.4610667, 5.577404, 4.905168, 4.975239, 4.457369, 4.421864, 3.37746, 2.8435986,
            3.812323, 4.9663215, 5.180668, 6.587075, 6.023675, 6.3532505, 6.2004857, 6.3341227,
            6.7724547, 6.5749655, 5.123139, 5.152195, 5.279077, 3.556866, 2.890015, 3.6607099,
            5.3818007, 6.587785, 6.420025, 5.6420264, 6.160296, 5.760164, 6.3822722, 5.424709,
            5.6163926, 5.525895, 4.3423324, 6.47513, 4.305279, 3.644064, 3.9099133, 4.62369,
            4.0518274, 5.3155417, 4.886273, 5.4085903, 4.0021877, 4.426284, 4.410221, 4.778438,
            4.745909, 4.7357306, 4.5373755, 4.4256215, 2.537812, 2.7073917, 4.1940007, 3.8815355,
            3.805711, 3.2853658, 3.5262477, 3.2365723, 4.1230154, 2.940074, 3.7354796, 3.5670543,
            4.245095, 3.7857237, 2.8556383, 2.42982,
        ],
    )
    .unwrap();
    let current_output11: Array3<f32> = conv_layer11.convolve(&test_input11);

    assert!(
        arr_allclose(&current_output11, &target_output11),
        "{:?} was not equal to {:?}",
        current_output11,
        target_output11
    );

    let test_input12 = Array::from_shape_vec(
        (1, 10, 15),
        vec![
            0.554433, 0.90017563, 0.6817857, 0.95833224, 0.28551313, 0.85106283, 0.70093375,
            0.4791875, 0.5805011, 0.9803199, 0.97033703, 0.48236644, 0.66855663, 0.35855147,
            0.25242767, 0.6717967, 0.26290378, 0.53677225, 0.18097793, 0.07985484, 0.79416144,
            0.7215235, 0.42313012, 0.6529702, 0.00384528, 0.08442257, 0.7838985, 0.980683,
            0.36212954, 0.61172485, 0.5263662, 0.8496614, 0.13177402, 0.9175598, 0.04323238,
            0.03087392, 0.03482862, 0.36226457, 0.6059544, 0.29194582, 0.34645593, 0.9409913,
            0.60953087, 0.8610255, 0.1627552, 0.8939359, 0.66327935, 0.48094535, 0.06551108,
            0.86129206, 0.65446067, 0.9592776, 0.8000413, 0.21450381, 0.6442533, 0.46971878,
            0.84573215, 0.34651902, 0.18830031, 0.57119006, 0.27269888, 0.7915957, 0.21737069,
            0.04463017, 0.393406, 0.8441482, 0.77705365, 0.6315176, 0.8522896, 0.16809769,
            0.22305161, 0.773223, 0.9678148, 0.2237789, 0.8982615, 0.271913, 0.34780893,
            0.49277794, 0.14560463, 0.33638617, 0.1585067, 0.18610527, 0.6963084, 0.9429821,
            0.40789625, 0.20056698, 0.37306353, 0.9367061, 0.7103306, 0.06833509, 0.48335183,
            0.45182207, 0.96346164, 0.00378525, 0.33689302, 0.28288215, 0.75004077, 0.1607512,
            0.514175, 0.35879079, 0.36688787, 0.00774159, 0.15532039, 0.01133456, 0.94680935,
            0.052598, 0.73530346, 0.8096563, 0.7097644, 0.37942106, 0.38656324, 0.13763146,
            0.99930644, 0.67476803, 0.06055127, 0.8463604, 0.4460729, 0.33209085, 0.94373864,
            0.5397614, 0.05766413, 0.64256257, 0.7357459, 0.09256811, 0.8832945, 0.03911254,
            0.782554, 0.4004812, 0.80732703, 0.8010379, 0.28867772, 0.7802926, 0.9490529,
            0.5395702, 0.1369102, 0.4513485, 0.1162144, 0.9589836, 0.24819064, 0.3149064,
            0.22322156, 0.39812055, 0.45308354, 0.5711523, 0.97817534, 0.06805564, 0.5386646,
            0.6699801, 0.1879456, 0.8407316,
        ],
    )
    .unwrap();

    let kernel12: Array4<f32> = Array::from_shape_vec(
        (1, 2, 5, 5),
        vec![
            0.64728755, 0.53731096, 0.63207716, 0.00916763, 0.46754488, 0.8670982, 0.1932068,
            0.43971533, 0.10441232, 0.46486124, 0.22910197, 0.7679019, 0.23872072, 0.03931138,
            0.8551502, 0.19610135, 0.8555064, 0.08035298, 0.05671094, 0.9091975, 0.27582648,
            0.33816597, 0.42012835, 0.7745094, 0.14011143, 0.47505257, 0.98297566, 0.5085966,
            0.22395916, 0.01153891, 0.669607, 0.12918296, 0.55476546, 0.528783, 0.5067741,
            0.14234911, 0.5152856, 0.6446142, 0.9118427, 0.8193508, 0.989135, 0.7842302,
            0.59264964, 0.35247177, 0.48483032, 0.22649786, 0.04158387, 0.5814206, 0.8653732,
            0.4524277,
        ],
    )
    .unwrap();
    let conv_layer12 = ConvolutionLayer::new(kernel12, 1, Padding::Same);
    let target_output12: Array3<f32> = Array::from_shape_vec(
        (2, 10, 15),
        vec![
            2.6659603, 2.6327724, 3.0117407, 3.4231148, 2.7220633, 3.3320253, 2.6605368, 3.0584466,
            3.2563064, 3.6395578, 4.0381584, 4.0652103, 3.618084, 2.5396624, 1.8044988, 3.1761932,
            3.3957, 4.2828455, 3.9673095, 4.7777305, 4.8989553, 3.8520248, 4.7519493, 4.470789,
            4.9309096, 4.8671045, 5.2553134, 3.826996, 3.7219863, 2.6169562, 3.5945106, 3.574599,
            5.5394964, 5.1665826, 5.829851, 5.590305, 5.2498913, 6.0569196, 4.855001, 5.454067,
            6.9543343, 5.7359076, 5.203796, 4.918296, 3.4869168, 3.286203, 2.8694067, 4.4827666,
            4.8452687, 4.0324135, 4.740393, 6.114573, 5.1535153, 4.717889, 5.1916575, 6.1137,
            5.1722083, 5.848408, 4.948499, 3.0869563, 3.7871373, 3.1803527, 4.4223986, 4.388322,
            5.018454, 3.9247475, 5.453668, 4.7730966, 5.3193398, 4.8131056, 5.6415935, 4.7317753,
            4.6045747, 4.873263, 3.4539735, 4.0068297, 3.729281, 4.237507, 4.725239, 4.967094,
            4.639705, 5.8592362, 6.078432, 5.0201154, 4.5078144, 6.012604, 4.7614303, 5.279564,
            4.087257, 3.2392323, 3.2665126, 3.9532678, 4.1472507, 4.099838, 4.92111, 4.447742,
            6.0150814, 5.2513824, 5.584927, 5.071908, 5.5212474, 5.6326957, 5.1937227, 4.055467,
            2.9684868, 3.5007153, 3.6786768, 4.524098, 3.82294, 5.3131766, 3.787889, 5.2093635,
            5.280725, 5.111135, 5.9128466, 5.2729754, 4.7043505, 5.141795, 4.5143957, 2.782082,
            3.1418693, 3.0255198, 3.2411306, 3.9803813, 3.7980852, 3.2219777, 4.5065084, 4.256002,
            3.4123893, 4.6074147, 4.3711934, 3.7275171, 4.219945, 2.912278, 2.3933816, 1.6094004,
            2.3604717, 2.5442972, 3.1492336, 3.0909648, 2.4507349, 3.1554344, 2.7627492, 4.1329966,
            2.7906525, 3.5060215, 4.474409, 2.519292, 2.9999158, 2.6897326, 2.8498776, 3.3806038,
            4.289001, 3.867973, 3.428482, 3.2169096, 3.813018, 4.1164093, 3.8786714, 4.2961454,
            4.9395776, 4.812872, 4.7927113, 3.3070621, 2.3479247, 4.17896, 5.7184544, 5.0785594,
            5.6279125, 5.527085, 5.8599434, 5.4122868, 5.9419665, 5.9641247, 5.944923, 5.9430714,
            5.6057715, 5.316387, 5.007605, 3.3193285, 4.36908, 5.1125364, 6.4356, 6.5101676,
            7.093728, 6.857849, 6.68367, 6.731225, 5.5325522, 6.441418, 7.7890553, 7.612219,
            7.7053447, 6.414051, 4.2248096, 3.7315886, 5.4300394, 5.649055, 5.2510223, 4.0316877,
            5.365259, 7.603497, 7.3225913, 6.7250204, 6.5449305, 6.5049777, 6.9156337, 7.6773973,
            5.95925, 3.9437828, 4.1849217, 4.975058, 5.717572, 5.447557, 5.610871, 6.1134844,
            6.2448, 6.440326, 6.502307, 6.7810416, 5.8869944, 5.371311, 6.098799, 6.734048,
            4.638553, 4.1841526, 4.872776, 6.099985, 5.6737194, 5.6885386, 5.4357576, 7.481115,
            7.1021013, 6.5476685, 6.471259, 6.615975, 5.7864776, 7.1596913, 5.326441, 4.291208,
            3.5203698, 4.899323, 5.737896, 5.7024693, 4.664224, 5.686554, 6.809243, 7.0327697,
            7.1744905, 6.3175364, 6.5389814, 6.5119843, 6.0910053, 4.609068, 3.814918, 3.8130238,
            4.4933915, 6.0419087, 5.5363226, 6.075311, 4.7383366, 5.812956, 6.111595, 7.0207624,
            6.7884145, 6.144777, 5.153824, 6.3917933, 6.0503116, 4.518868, 3.3072748, 3.96552,
            5.288742, 5.472474, 4.59909, 4.466333, 5.333936, 5.227967, 5.48969, 5.890729, 5.798138,
            5.310631, 5.6518793, 4.263013, 3.707297, 1.9977272, 2.7531147, 4.149759, 4.2301407,
            4.3526645, 3.3995404, 3.8319979, 4.14592, 5.0475893, 4.7934675, 5.11578, 5.0600157,
            3.854877, 3.8069627, 3.2744873,
        ],
    )
    .unwrap();
    let current_output12: Array3<f32> = conv_layer12.convolve(&test_input12);

    assert!(
        arr_allclose(&current_output12, &target_output12),
        "{:?} was not equal to {:?}",
        current_output12,
        target_output12
    );

    let test_input13 = Array::from_shape_vec(
        (1, 15, 10),
        vec![
            0.44947338, 0.5519129, 0.79122764, 0.7513198, 0.9315116, 0.03313805, 0.41213843,
            0.45310238, 0.01799934, 0.4328227, 0.23842481, 0.20688592, 0.57869387, 0.9324833,
            0.43915927, 0.53123087, 0.5324186, 0.4149537, 0.22217223, 0.0080786, 0.65063345,
            0.7681623, 0.8421627, 0.27179125, 0.68530315, 0.9955617, 0.77906156, 0.18006648,
            0.5975193, 0.6555531, 0.9498266, 0.9690994, 0.5122471, 0.3840358, 0.8757204, 0.7260429,
            0.04691354, 0.40678895, 0.35535267, 0.19270384, 0.23519029, 0.6665529, 0.26402712,
            0.55168146, 0.08576613, 0.9567203, 0.57141143, 0.20602623, 0.75538653, 0.96776,
            0.44755465, 0.82362133, 0.29203537, 0.30861592, 0.39762703, 0.26186082, 0.9658112,
            0.27424002, 0.50570756, 0.8114843, 0.5536027, 0.59788686, 0.05054026, 0.28394443,
            0.6402348, 0.02258505, 0.60607, 0.6834324, 0.8004999, 0.3349493, 0.4295082, 0.37033585,
            0.0394791, 0.50698835, 0.29841292, 0.9388161, 0.84357476, 0.29760668, 0.25654384,
            0.71037215, 0.14646496, 0.9906275, 0.9552909, 0.7966291, 0.6094893, 0.7271988,
            0.09518696, 0.3957746, 0.6157527, 0.31079137, 0.46793708, 0.8514491, 0.86081386,
            0.8208274, 0.2372746, 0.6977758, 0.79387194, 0.9463199, 0.99063903, 0.29514915,
            0.8795419, 0.741553, 0.03520088, 0.83411527, 0.47134155, 0.26704508, 0.2872401,
            0.04289522, 0.583651, 0.94414073, 0.5729697, 0.72244126, 0.7707775, 0.02079507,
            0.22973806, 0.18128674, 0.05054512, 0.6523751, 0.27093726, 0.32479268, 0.53774405,
            0.08921466, 0.18494032, 0.78120434, 0.15868789, 0.81183356, 0.21792394, 0.6620494,
            0.6886836, 0.39724785, 0.59319293, 0.02472531, 0.21891202, 0.5342134, 0.4041879,
            0.53426075, 0.20461221, 0.29362342, 0.7835011, 0.47930118, 0.2895624, 0.7320774,
            0.55179524, 0.37774232, 0.04187773, 0.23883641, 0.63051957, 0.97746944, 0.6415133,
            0.4162999,
        ],
    )
    .unwrap();

    let kernel13: Array4<f32> = Array::from_shape_vec(
        (1, 2, 3, 4),
        vec![
            0.04763152, 0.75958186, 0.13098118, 0.6238241, 0.4102024, 0.5710282, 0.59153587,
            0.66274744, 0.6454271, 0.8120847, 0.22876394, 0.6206928, 0.19057496, 0.4622738,
            0.9772445, 0.17967562, 0.27354005, 0.48198408, 0.09082693, 0.6217685, 0.0965838,
            0.8904992, 0.5337058, 0.17222154,
        ],
    )
    .unwrap();
    let conv_layer13 = ConvolutionLayer::new(kernel13, 1, Padding::Same);
    let target_output13: Array3<f32> = Array::from_shape_vec(
        (2, 15, 10),
        vec![
            0.67401546, 1.1215409, 2.0441842, 2.5790253, 2.3563511, 2.3050413, 1.8258854,
            1.2587796, 1.2846226, 0.8521885, 1.4730406, 2.2670755, 3.6851952, 3.755576, 3.9735727,
            3.4245083, 3.4506807, 2.3778622, 2.3766093, 1.7364291, 1.7814137, 2.649948, 3.871949,
            3.7501388, 3.8602571, 3.8358657, 3.3525286, 3.185462, 2.205624, 1.6087599, 2.1744623,
            3.1912565, 3.5525432, 3.7298055, 3.496217, 3.9524634, 3.2281742, 3.0791755, 2.9901042,
            2.3332217, 2.1837294, 2.6610825, 3.025929, 3.3493295, 3.06542, 2.7451684, 3.0728993,
            2.9429188, 2.9252236, 2.4799788, 1.6636083, 2.149423, 2.4216962, 2.6612012, 2.2439084,
            2.8002534, 2.8467975, 3.1390312, 4.155414, 2.8164773, 1.8003035, 1.9887784, 2.1390412,
            2.5717034, 1.6825188, 3.055592, 3.2961974, 2.9591126, 3.791016, 2.821476, 1.3910757,
            1.9436841, 2.4236228, 3.0844228, 2.710273, 3.260563, 3.2593584, 3.416778, 3.165536,
            2.197587, 1.4738077, 2.2176971, 3.362325, 4.0484457, 3.597419, 4.143571, 3.2154298,
            3.50506, 3.4205267, 2.5685837, 2.078197, 3.250811, 3.9617908, 4.6365056, 3.7192187,
            3.492932, 2.8381622, 3.3353536, 3.296037, 2.8409722, 2.2056112, 2.9727712, 4.136408,
            3.3054419, 2.9272504, 2.9279144, 2.4508653, 3.2615454, 2.9787757, 2.6556544, 2.2291198,
            2.0407815, 3.0630932, 3.1715958, 1.8733735, 2.436898, 1.5729557, 2.3473814, 2.7434897,
            2.5099094, 1.7270024, 1.7670461, 2.5604987, 1.9387448, 2.3340535, 2.211647, 2.1191154,
            2.7766752, 2.4865954, 2.4535186, 1.0979638, 1.3899264, 2.4741347, 2.2691221, 2.2942834,
            2.7558508, 2.2925823, 3.5046666, 3.0841618, 2.8328447, 0.96332943, 1.1127431,
            1.9914161, 1.8045952, 1.6421807, 1.6601162, 1.6588105, 2.4751353, 2.672968, 2.0157323,
            0.5172541, 0.9621918, 1.6067123, 2.1494098, 2.3377311, 1.624212, 1.8280318, 1.1312642,
            1.0298961, 0.7873815, 1.0722333, 2.2388756, 3.1588414, 3.2443814, 3.0948997, 3.0444555,
            2.7708082, 2.4076524, 1.5657549, 1.6744678, 1.3797832, 2.5008986, 3.1391294, 3.1089752,
            3.2011852, 3.1130097, 2.7807016, 2.1386893, 2.0868034, 1.1888676, 1.61222, 2.3944,
            3.2495909, 2.6128604, 2.7791183, 2.7895458, 3.3586023, 2.5237734, 1.9534163, 2.53435,
            1.5989605, 2.7079997, 2.738089, 2.246455, 2.2482264, 2.9019642, 1.9174457, 2.7133656,
            2.3929985, 2.013071, 1.0846809, 2.089118, 2.0241318, 1.961493, 1.5684054, 2.4689631,
            2.4131763, 2.3120315, 3.2763033, 2.9679124, 1.1775963, 1.9512364, 1.8610115, 1.6956155,
            1.7857662, 1.9806732, 3.3917184, 2.650601, 2.4541419, 2.3314042, 1.1155424, 1.8441939,
            2.5330946, 2.600427, 2.5742664, 2.5878863, 2.4264283, 2.41121, 2.831576, 2.21046,
            1.1383951, 2.329849, 2.6856434, 3.2374098, 2.9922807, 2.9444957, 3.2034016, 3.2491167,
            2.6597266, 2.5471296, 1.2324597, 2.9499776, 3.547211, 3.1598895, 3.2079253, 2.9933107,
            1.9550786, 2.280744, 2.4869936, 2.5087054, 1.5282514, 2.5788157, 3.4094229, 3.291593,
            1.5624537, 2.0564466, 2.045243, 2.2898765, 3.108268, 2.0213904, 1.5942192, 2.3462477,
            1.8763931, 2.114999, 2.5629385, 1.5080166, 1.8945339, 1.5958433, 2.0736094, 2.7220254,
            1.1425226, 1.7988491, 2.151668, 1.6110533, 1.7004849, 2.0204988, 1.4481455, 2.2783508,
            2.0429888, 2.2518387, 1.053523, 1.2365329, 2.0975962, 2.081734, 1.7272587, 1.9849259,
            1.916068, 2.8520036, 3.149551, 2.3150542, 0.8704428, 0.88983953, 0.9777112, 1.334669,
            1.1972579, 1.329501, 1.1843226, 1.3907322, 1.8398385, 1.762221,
        ],
    )
    .unwrap();
    let current_output13: Array3<f32> = conv_layer13.convolve(&test_input13);

    assert!(
        arr_allclose(&current_output13, &target_output13),
        "{:?} was not equal to {:?}",
        current_output13,
        target_output13
    );

    let test_input14 = Array::from_shape_vec(
        (1, 15, 10),
        vec![
            0.62424076, 0.95776683, 0.998361, 0.150883, 0.28713444, 0.35105017, 0.1765902,
            0.9674033, 0.65025777, 0.1959308, 0.3119046, 0.55247456, 0.38556734, 0.18145509,
            0.94255227, 0.7036003, 0.3402552, 0.16401337, 0.28418577, 0.5504918, 0.6148071,
            0.7740251, 0.37459207, 0.25677747, 0.80441076, 0.17314304, 0.5946227, 0.30094627,
            0.06480476, 0.5798754, 0.62549657, 0.6065069, 0.9259787, 0.3677915, 0.69532603,
            0.8356569, 0.39276573, 0.18570696, 0.61698794, 0.9064707, 0.01547038, 0.2551995,
            0.11438051, 0.03861368, 0.6524532, 0.36442748, 0.08230381, 0.79969245, 0.27816203,
            0.3741886, 0.44356522, 0.27386904, 0.4171807, 0.14990133, 0.4750283, 0.6358263,
            0.77572674, 0.7072159, 0.34310365, 0.36999545, 0.8200852, 0.46510443, 0.9230857,
            0.86201537, 0.04691705, 0.12260284, 0.89921826, 0.47400048, 0.7492544, 0.05440097,
            0.28273952, 0.9184355, 0.9064988, 0.7027802, 0.19125043, 0.8670149, 0.08634489,
            0.722654, 0.77540857, 0.00211577, 0.6443405, 0.2344423, 0.9849179, 0.9893316,
            0.87634915, 0.48734385, 0.8760625, 0.53053117, 0.01152504, 0.6788874, 0.76156837,
            0.4680538, 0.07214947, 0.549209, 0.8383253, 0.00365476, 0.9782156, 0.7419056,
            0.40790308, 0.00302504, 0.80174476, 0.7689671, 0.50054824, 0.16478458, 0.89107823,
            0.7763043, 0.73042727, 0.41667554, 0.7348974, 0.71259016, 0.93557405, 0.37013116,
            0.14954911, 0.33766475, 0.39673004, 0.03940821, 0.2414454, 0.9373305, 0.84819096,
            0.9272432, 0.8604789, 0.92845494, 0.8023847, 0.06647868, 0.12827316, 0.02774826,
            0.8982795, 0.1193029, 0.37523487, 0.28379655, 0.0638791, 0.08446726, 0.68760884,
            0.2630593, 0.01052708, 0.45302406, 0.10402057, 0.5539082, 0.39986408, 0.53770447,
            0.24856173, 0.12796782, 0.80071914, 0.38390577, 0.6908975, 0.5850918, 0.71101063,
            0.17578217, 0.55867785, 0.71616316,
        ],
    )
    .unwrap();

    let kernel14: Array4<f32> = Array::from_shape_vec(
        (1, 2, 3, 4),
        vec![
            0.3247584, 0.9196999, 0.46712968, 0.08430128, 0.83232373, 0.49657014, 0.24024557,
            0.60874844, 0.47418702, 0.9770886, 0.99522823, 0.7749884, 0.7253688, 0.26021662,
            0.8869578, 0.5181486, 0.5871326, 0.76900613, 0.5745777, 0.81429285, 0.78002185,
            0.7069771, 0.33134556, 0.7407027,
        ],
    )
    .unwrap();
    let conv_layer14 = ConvolutionLayer::new(kernel14, 1, Padding::Same);
    let target_output14: Array3<f32> = Array::from_shape_vec(
        (2, 15, 10),
        vec![
            1.5734308, 2.235556, 1.9293512, 1.836474, 2.2914016, 1.6953267, 1.9263414, 1.7391273,
            1.3713318, 1.4952855, 2.4956286, 3.8214052, 3.990404, 4.0606313, 3.6504471, 2.5486937,
            3.0447645, 3.1196172, 3.112377, 2.6187518, 2.2885065, 3.0276198, 3.5214033, 3.8421035,
            3.7280195, 4.10989, 3.7884932, 2.255648, 2.8964238, 2.5720856, 1.880273, 3.0470307,
            3.2652369, 3.2803905, 3.852895, 3.2534504, 3.0537148, 3.1545458, 3.201036, 2.1172128,
            1.6157422, 2.4744155, 2.9248838, 3.3358324, 3.6140938, 3.4807494, 4.313739, 3.5605962,
            3.0451639, 2.9432943, 1.4896159, 2.0193985, 2.4790893, 2.6739237, 2.55591, 2.7405062,
            3.7858896, 3.59744, 3.4333255, 2.3988674, 1.9159201, 3.3743036, 4.396646, 3.1804895,
            2.9946787, 3.8973942, 3.7285326, 4.2980256, 3.9530032, 2.1717176, 2.595415, 3.8232977,
            5.227939, 5.103023, 4.7239604, 3.46259, 3.510376, 4.3031383, 3.0922432, 2.4679132,
            2.0792828, 3.509272, 4.640801, 4.841855, 4.712824, 4.1659904, 4.1782765, 3.8838854,
            3.581467, 2.2525377, 2.4955847, 3.0571036, 4.173823, 4.556449, 4.621278, 5.263544,
            5.131052, 3.7470894, 3.6824374, 2.6708796, 2.9848676, 3.0665677, 2.9444335, 3.320998,
            3.4042814, 3.36366, 3.9777153, 4.614976, 4.938668, 3.0959568, 3.0135627, 3.8360949,
            4.23341, 2.9926603, 2.4183388, 3.023573, 4.4141507, 3.991128, 4.170567, 3.4317355,
            2.3758945, 3.030119, 3.3629742, 2.4251537, 1.7871475, 2.1197643, 2.1452372, 2.9192193,
            4.196344, 3.5082717, 1.6532108, 3.2674825, 3.9678152, 2.9621627, 2.7628293, 2.2305675,
            2.7317865, 2.843198, 3.0470493, 2.3779101, 0.33240777, 1.2618798, 1.8293662, 2.0477688,
            2.4295301, 1.9883319, 1.8838371, 2.2647202, 2.6261148, 1.9494658, 1.5242916, 2.3814614,
            2.7985477, 2.9973161, 2.442935, 2.0214095, 2.4592662, 2.428229, 2.1097693, 1.7923363,
            2.4740722, 3.5115902, 3.8665247, 4.1188426, 3.579226, 3.3459063, 3.6815865, 3.3135426,
            2.9894679, 2.1550174, 2.1814032, 3.347394, 3.5821972, 4.651384, 4.326827, 3.6727567,
            4.0266314, 3.000879, 3.170396, 2.2124004, 2.0646613, 2.5756943, 3.2549675, 3.9404385,
            3.5846305, 3.368437, 4.0285397, 2.6714823, 3.5672488, 2.6155996, 1.3911122, 2.39792,
            2.5656958, 3.1402519, 3.7161214, 3.3620129, 4.012886, 3.9343915, 3.842708, 2.848647,
            1.2626722, 2.5031621, 2.837315, 2.9381192, 3.3515062, 3.078476, 3.760772, 4.3162284,
            3.4543471, 2.9309099, 2.1707206, 3.184163, 4.688938, 4.0186677, 4.3171983, 3.4961815,
            4.155813, 4.1928625, 3.8417974, 2.820163, 2.0369701, 4.0684876, 5.469941, 5.1060205,
            4.8656163, 4.893912, 3.724557, 4.250875, 3.89825, 2.1352015, 2.087125, 3.4284842,
            4.92737, 4.716356, 4.791629, 5.2011523, 4.262804, 4.459967, 3.5521507, 2.5013916,
            2.2652764, 3.261674, 4.6372204, 4.751792, 4.2786727, 5.164685, 5.358941, 4.1019764,
            4.356845, 2.77072, 2.4834695, 3.0200243, 3.8718517, 3.6765234, 2.9830637, 3.8344414,
            4.8536887, 4.066984, 4.9286356, 3.475635, 3.0007875, 3.696566, 4.1451902, 3.7300153,
            2.8331065, 3.0178885, 3.2517302, 4.1888247, 4.561099, 3.488074, 2.2348719, 2.9452376,
            3.552719, 2.9451263, 2.2613363, 1.6133196, 2.9260993, 3.0454347, 4.1068134, 2.9434466,
            1.5887747, 2.9073465, 3.0770235, 3.150536, 3.07342, 2.9214594, 2.6958714, 3.169414,
            3.4068868, 2.280595, 0.37732694, 1.3285868, 1.8837099, 1.7497425, 2.704723, 2.1767356,
            2.212258, 2.4216886, 2.49278, 1.9377952,
        ],
    )
    .unwrap();
    let current_output14: Array3<f32> = conv_layer14.convolve(&test_input14);

    assert!(
        arr_allclose(&current_output14, &target_output14),
        "{:?} was not equal to {:?}",
        current_output14,
        target_output14
    );

    let test_input15 = Array::from_shape_vec(
        (1, 15, 10),
        vec![
            0.58577555, 0.40479863, 0.7506117, 0.11343616, 0.8795398, 0.83064, 0.8858372,
            0.3898591, 0.9350765, 0.9673369, 0.64465624, 0.0283905, 0.22112074, 0.1391855,
            0.34128338, 0.65248054, 0.291874, 0.70765275, 0.32796225, 0.22921298, 0.59572685,
            0.5726663, 0.72872376, 0.8248998, 0.29288608, 0.92347336, 0.25887516, 0.91578674,
            0.800785, 0.7670362, 0.8990461, 0.8424308, 0.7045559, 0.43518323, 0.48451254,
            0.31151697, 0.10086012, 0.5242353, 0.19001916, 0.01069371, 0.01020448, 0.12606935,
            0.04778918, 0.8456499, 0.57045126, 0.46361542, 0.7532553, 0.62787765, 0.3127784,
            0.9686197, 0.96754897, 0.5766132, 0.6463905, 0.6347338, 0.52757853, 0.55145216,
            0.08155768, 0.13378453, 0.2262157, 0.73179847, 0.5428326, 0.9094368, 0.2528448,
            0.24383228, 0.7446406, 0.5544842, 0.01949351, 0.13375893, 0.04438103, 0.8489,
            0.6848837, 0.9220802, 0.00185038, 0.44556108, 0.00844186, 0.8082305, 0.33159012,
            0.5138473, 0.65069795, 0.9300001, 0.58097035, 0.5413155, 0.5714561, 0.21683556,
            0.8548128, 0.02262598, 0.62476623, 0.33444464, 0.98826236, 0.03221937, 0.12669064,
            0.50246465, 0.42635268, 0.91064155, 0.7792924, 0.07601635, 0.6067355, 0.3940292,
            0.30074376, 0.1328066, 0.72018456, 0.34319454, 0.6295161, 0.03357495, 0.03066352,
            0.51702976, 0.9283114, 0.36689135, 0.6327302, 0.37459058, 0.93406814, 0.33968034,
            0.59511477, 0.4350908, 0.7094508, 0.29612544, 0.80898666, 0.7905302, 0.4748418,
            0.6989706, 0.85952836, 0.70326394, 0.38940284, 0.37933362, 0.22292, 0.3949557,
            0.27719194, 0.8619771, 0.9255003, 0.30563155, 0.5844432, 0.36121982, 0.09087573,
            0.23811613, 0.17829578, 0.9398569, 0.04807154, 0.7588201, 0.05337733, 0.19222781,
            0.98696715, 0.32119673, 0.3872288, 0.74463385, 0.6260977, 0.0084233, 0.31085488,
            0.10247751, 0.60939455, 0.00353958,
        ],
    )
    .unwrap();

    let kernel15: Array4<f32> = Array::from_shape_vec(
        (1, 2, 3, 4),
        vec![
            0.22236562, 0.31823838, 0.9627444, 0.866447, 0.8205645, 0.7792785, 0.61566937,
            0.59327537, 0.33567885, 0.96525836, 0.47292593, 0.2669342, 0.705448, 0.28257245,
            0.02662205, 0.05098573, 0.8293213, 0.9416077, 0.9101412, 0.07020015, 0.8425068,
            0.9708137, 0.3117258, 0.11623824,
        ],
    )
    .unwrap();
    let conv_layer15 = ConvolutionLayer::new(kernel15, 1, Padding::Same);
    let target_output15: Array3<f32> = Array::from_shape_vec(
        (2, 15, 10),
        vec![
            1.0001131, 1.9708642, 1.9619781, 1.8700687, 2.4614468, 2.7047038, 3.2175462, 3.2537503,
            3.3775387, 2.5626485, 1.5438945, 2.4380112, 3.279713, 2.9346688, 4.1241817, 3.934191,
            4.4547157, 4.23711, 4.2320123, 4.088921, 2.0393753, 3.107821, 4.307441, 3.687084,
            3.8523998, 3.4932132, 3.4828525, 3.7594666, 3.431876, 2.839881, 2.1904192, 2.9278305,
            3.7018046, 3.6135316, 3.6366367, 3.815948, 3.3801575, 3.7293293, 3.6441576, 2.9532938,
            1.6981282, 2.8773277, 4.0196867, 3.8133113, 3.8017578, 3.763663, 3.3197968, 2.8346174,
            2.7680473, 2.126612, 1.6542848, 2.5862458, 3.8265011, 4.0061946, 3.5709476, 3.5028777,
            3.3501918, 2.4099362, 2.3811479, 2.4681866, 2.7197564, 3.4347456, 4.2278557, 3.6900327,
            3.1154597, 2.754941, 2.4385827, 2.200205, 2.5700111, 2.984918, 2.424851, 3.2198386,
            3.496586, 3.0282617, 3.0138655, 3.2874465, 2.7429998, 2.8665457, 3.3645217, 3.5577745,
            2.0195832, 2.8396842, 3.0031369, 3.5322232, 3.1589305, 3.8979955, 3.188519, 3.3988798,
            3.6752262, 2.8477633, 1.5590316, 2.7510545, 3.6616874, 3.7416184, 3.2735538, 2.700431,
            3.1608286, 3.527719, 3.6777856, 2.156428, 1.5065832, 3.0551405, 3.5678346, 3.2823417,
            3.3906481, 3.4262524, 3.655908, 3.8644962, 4.02882, 2.6392758, 2.246913, 3.349195,
            4.187607, 3.075676, 2.6652253, 3.1542668, 4.0075192, 3.9121952, 4.5005703, 3.7999287,
            2.5288413, 3.063977, 3.6241252, 2.681632, 2.6849153, 2.5943406, 3.9177594, 4.3341975,
            3.7818727, 3.1996758, 2.2030997, 3.0704436, 3.35377, 2.4422786, 2.9952922, 3.023621,
            2.8200445, 3.0762343, 2.735336, 2.2722578, 1.7180775, 1.8312672, 2.1905606, 1.9520868,
            1.8074585, 2.1601062, 1.4961635, 1.8002766, 1.2130547, 0.85208935, 1.089469, 1.7179719,
            1.4046971, 1.835235, 2.2446926, 2.7317064, 2.5916321, 2.479482, 2.3878124, 1.8988522,
            2.112605, 2.6965778, 2.2467437, 2.2378254, 3.4743109, 3.5103328, 3.7878287, 3.6664112,
            3.9156897, 2.1246598, 2.5339622, 2.8595917, 2.9233751, 2.7444353, 3.1978807, 2.604889,
            3.4182324, 3.2577493, 3.088174, 1.9571855, 2.6978283, 3.6210203, 4.118308, 3.502364,
            3.0775251, 2.870997, 2.88927, 2.9584036, 3.2380261, 1.6345837, 2.376894, 2.5040083,
            2.9746256, 3.068086, 3.2329783, 2.4885783, 2.5440035, 2.5330756, 2.67866, 1.5909905,
            2.3003201, 2.5752504, 2.8224573, 3.6424215, 3.4117014, 2.6751359, 2.350368, 1.6861831,
            2.9663424, 2.263058, 3.53447, 3.246152, 3.1349323, 2.6492465, 3.2349634, 2.5606742,
            1.5894736, 1.2836814, 2.626773, 1.951936, 3.248825, 3.3298054, 2.4145224, 2.2486794,
            2.671765, 2.3711288, 2.3222497, 2.429246, 3.0199165, 2.4099665, 2.827986, 3.0687406,
            2.778324, 2.8626633, 2.2091863, 2.9677663, 2.4451776, 3.2926257, 3.139582, 2.184323,
            2.0016837, 2.690331, 2.8440397, 3.1641927, 3.0449092, 2.991459, 2.55316, 3.133779,
            2.4581218, 0.9460528, 2.0126414, 2.9278662, 2.8677664, 3.0426059, 2.1377256, 2.9161716,
            3.5167086, 3.1802664, 2.5922985, 1.4732853, 2.888534, 3.2478797, 2.5662296, 2.1687605,
            2.2719526, 3.2559202, 3.8200192, 4.0579658, 3.4694123, 1.9043176, 3.0055287, 3.0714967,
            2.7735088, 2.4048424, 2.7774422, 2.388457, 3.560157, 3.614585, 3.4925816, 2.2035406,
            2.7823074, 2.6163747, 2.3631904, 1.9181285, 2.105532, 2.1106865, 2.87912, 3.0849423,
            2.5538654, 0.9907101, 2.067427, 2.1312847, 1.813152, 2.0470676, 2.3511477, 1.9240249,
            1.4289907, 1.7912669, 1.1477413, 0.85662234,
        ],
    )
    .unwrap();
    let current_output15: Array3<f32> = conv_layer15.convolve(&test_input15);

    assert!(
        arr_allclose(&current_output15, &target_output15),
        "{:?} was not equal to {:?}",
        current_output15,
        target_output15
    );

    let test_input16 = Array::from_shape_vec(
        (1, 15, 10),
        vec![
            0.19467542, 0.09732427, 0.43287596, 0.20617688, 0.8857049, 0.9601851, 0.09430943,
            0.28105715, 0.6942895, 0.07089514, 0.7148581, 0.00085336, 0.23516753, 0.04615124,
            0.59699446, 0.53420085, 0.75324225, 0.38793716, 0.2669936, 0.29911962, 0.7380972,
            0.17850904, 0.65695775, 0.8119258, 0.26960826, 0.12972821, 0.6597052, 0.7345929,
            0.6485681, 0.22981846, 0.24392553, 0.26706976, 0.32711208, 0.9581323, 0.31259444,
            0.91530424, 0.17250775, 0.715259, 0.5014661, 0.7273789, 0.23862323, 0.4093651,
            0.04974006, 0.8688277, 0.46409306, 0.20740515, 0.19872624, 0.27135858, 0.02647329,
            0.90772045, 0.97377276, 0.47016057, 0.06899374, 0.47393376, 0.49847803, 0.02369655,
            0.10663922, 0.02373338, 0.21085607, 0.56809616, 0.70259374, 0.4123619, 0.01858313,
            0.25862443, 0.4823392, 0.47215322, 0.593886, 0.8265343, 0.06712108, 0.3228139,
            0.11140465, 0.59627575, 0.49184018, 0.8395536, 0.13370071, 0.25792846, 0.54400545,
            0.8792363, 0.58678144, 0.03434712, 0.8123595, 0.67917913, 0.02545591, 0.2468276,
            0.9191908, 0.02958322, 0.20474248, 0.76555794, 0.82307637, 0.24628638, 0.17773865,
            0.17740512, 0.4937253, 0.9466453, 0.13741271, 0.728613, 0.5338591, 0.7898385,
            0.47936276, 0.23633894, 0.8572216, 0.06004518, 0.3347224, 0.50485814, 0.09635731,
            0.18004768, 0.24514198, 0.228041, 0.05106571, 0.30884218, 0.38737774, 0.7948706,
            0.5052517, 0.23866583, 0.5068071, 0.15044466, 0.09537497, 0.13518302, 0.7257979,
            0.86458087, 0.7176047, 0.09527912, 0.72005635, 0.7382226, 0.41232714, 0.5491061,
            0.7183669, 0.07962471, 0.04476061, 0.19437055, 0.79608136, 0.6295519, 0.98047,
            0.56819236, 0.10505454, 0.9480506, 0.10080674, 0.9538371, 0.2355401, 0.94827145,
            0.46488547, 0.60260093, 0.76637876, 0.3219317, 0.4168223, 0.25562465, 0.8997145,
            0.59076214, 0.22263806, 0.6840723,
        ],
    )
    .unwrap();

    let kernel16: Array4<f32> = Array::from_shape_vec(
        (1, 2, 5, 5),
        vec![
            0.24348243, 0.94946456, 0.34627816, 0.9748906, 0.7407666, 0.9677088, 0.13005458,
            0.69001645, 0.14445187, 0.9216249, 0.03732051, 0.44508553, 0.666532, 0.9382296,
            0.80578685, 0.976145, 0.6098745, 0.04455515, 0.5690737, 0.6428197, 0.21377262,
            0.6692434, 0.86947584, 0.12576632, 0.8154824, 0.3646563, 0.32867205, 0.00950876,
            0.02384425, 0.68798536, 0.6243543, 0.061506, 0.4878141, 0.24558064, 0.15653013,
            0.40195072, 0.52372193, 0.62839466, 0.67610437, 0.6370576, 0.74306166, 0.8282889,
            0.39436254, 0.45260343, 0.6606655, 0.7309763, 0.40489906, 0.9551375, 0.4431474,
            0.6631732,
        ],
    )
    .unwrap();
    let conv_layer16 = ConvolutionLayer::new(kernel16, 1, Padding::Same);
    let target_output16: Array3<f32> = Array::from_shape_vec(
        (2, 15, 10),
        vec![
            1.4952114, 2.2298043, 3.8512836, 3.0546446, 4.6525645, 4.374775, 4.6943893, 4.219555,
            3.4550118, 2.7836525, 2.5621555, 3.3331337, 5.032518, 4.6817102, 5.769039, 5.6571307,
            7.0664606, 5.477382, 4.4576383, 3.5412729, 2.1878145, 3.9947975, 5.9748354, 6.5839505,
            6.861521, 7.4805307, 5.6064568, 7.092187, 5.4037304, 3.9210966, 2.8155198, 4.9245305,
            6.063399, 5.0377455, 6.0844245, 6.995247, 5.6048527, 5.6053996, 4.6478143, 4.2933226,
            3.177, 4.5390983, 6.8718357, 5.6409955, 5.468576, 6.5700784, 6.485949, 5.613088,
            5.064891, 3.7403347, 2.911372, 4.619698, 6.981874, 5.7772303, 5.6529546, 7.0995584,
            4.847385, 6.29558, 4.742945, 4.3337874, 3.104814, 5.0520916, 6.2383637, 5.854809,
            3.8834057, 6.4492555, 5.847397, 5.2930317, 5.161637, 4.492151, 2.858716, 3.8750737,
            7.202166, 5.9522433, 6.097777, 6.3606496, 6.615904, 5.6938424, 5.8302445, 4.534262,
            3.6431062, 5.3850884, 5.5439534, 5.4589496, 5.5859036, 7.321617, 5.9065266, 5.4596686,
            4.9837093, 4.702968, 3.2272537, 4.2182693, 6.982191, 6.120406, 4.7063866, 6.3798804,
            5.9583282, 6.0069895, 5.046388, 4.5736136, 3.7488356, 5.60593, 6.2959237, 6.1090317,
            6.692998, 5.574515, 6.0599494, 5.6119924, 4.2153454, 3.1664503, 3.7276893, 6.064679,
            7.556377, 6.5042114, 7.2007785, 5.992833, 5.3721867, 5.4176097, 5.3761044, 3.9439836,
            4.899612, 5.068421, 7.492876, 7.1544805, 5.846749, 6.962836, 5.18779, 7.2601953,
            4.4329915, 3.6940503, 3.7579381, 5.219655, 6.155554, 5.659822, 6.7044573, 4.222168,
            4.2713985, 5.0037613, 4.6444163, 3.7088451, 2.8248029, 3.6374195, 4.7778363, 4.7951703,
            4.539243, 4.3322783, 3.9625814, 4.0259647, 3.6933692, 2.1698678, 1.1481501, 1.2529032,
            2.411701, 2.0668056, 3.112132, 3.2498338, 3.1543956, 2.3141391, 1.6384228, 1.488258,
            2.013814, 2.5447433, 3.3444877, 3.8246372, 4.2009077, 4.270515, 4.8334103, 4.563795,
            2.582372, 2.0408318, 2.3151088, 3.4910667, 5.0477967, 5.491347, 5.3689647, 6.4407883,
            5.6365795, 5.501785, 4.2838645, 2.8936608, 2.5683498, 3.9146633, 5.548153, 4.5215063,
            5.31489, 5.8852453, 5.4772134, 5.5490527, 3.9807184, 3.3011034, 2.8982933, 4.2392855,
            5.656627, 5.1816945, 5.180027, 5.526536, 4.919176, 5.1428194, 4.210942, 3.6475577,
            2.6923368, 4.345129, 5.0237904, 5.209213, 4.442639, 6.2166677, 3.8350813, 4.8054442,
            3.495903, 3.3777637, 2.5580182, 4.0321345, 5.3224406, 4.8783536, 3.442265, 4.7545815,
            4.6935964, 4.268968, 3.2654822, 3.0157666, 3.0772974, 4.1880946, 5.37159, 4.322714,
            4.730429, 5.619786, 4.7688594, 4.5921807, 4.005766, 3.333152, 3.1871467, 4.3738847,
            5.1990504, 4.6430635, 4.5936794, 6.292333, 5.5052004, 5.140992, 4.068375, 3.4628608,
            3.0922737, 3.9879694, 5.038539, 5.644219, 4.4626217, 5.4117827, 5.8636293, 5.5174565,
            4.1324153, 3.1445649, 3.2121148, 4.644586, 5.7438993, 4.0806303, 5.195907, 5.0793424,
            4.8188553, 4.7152395, 3.9758718, 2.9923916, 3.47932, 4.608412, 5.3843956, 5.518777,
            5.316081, 5.054257, 3.9877253, 4.9178066, 3.4315667, 3.1667957, 4.585765, 4.549077,
            5.5626187, 5.5495973, 4.8367753, 4.867552, 3.8252926, 4.889425, 3.4886732, 2.518722,
            3.924527, 5.1492157, 6.041226, 5.2056065, 5.6082296, 4.3756366, 4.0903196, 4.863799,
            3.646095, 3.2302308, 3.7300525, 4.30683, 5.0737224, 4.956344, 5.215791, 4.4910936,
            4.1738315, 4.400542, 3.4805355, 2.3257709,
        ],
    )
    .unwrap();
    let current_output16: Array3<f32> = conv_layer16.convolve(&test_input16);

    assert!(
        arr_allclose(&current_output16, &target_output16),
        "{:?} was not equal to {:?}",
        current_output16,
        target_output16
    );

    let test_input17 = Array::from_shape_vec(
        (1, 15, 10),
        vec![
            0.18731794, 0.43634078, 0.4686375, 0.7620647, 0.57885796, 0.26523942, 0.13030814,
            0.7995473, 0.951001, 0.58605653, 0.82163817, 0.21192186, 0.12197074, 0.06249312,
            0.3968833, 0.23130116, 0.670139, 0.89535373, 0.9697048, 0.7154457, 0.8203782,
            0.21395262, 0.7457981, 0.7147152, 0.05275504, 0.93545914, 0.8986874, 0.8690856,
            0.63580817, 0.15263815, 0.7466949, 0.6235891, 0.62486136, 0.7352324, 0.23342584,
            0.9827126, 0.93357897, 0.96423954, 0.02081718, 0.47192466, 0.50718915, 0.9034243,
            0.678573, 0.48106775, 0.27722874, 0.0061415, 0.2891619, 0.9937529, 0.02278532,
            0.7661429, 0.23943478, 0.7568481, 0.1846646, 0.05945846, 0.7522374, 0.723256,
            0.5690188, 0.80126184, 0.13196982, 0.2549996, 0.9684265, 0.09975351, 0.6575368,
            0.01221572, 0.5690517, 0.8633032, 0.5916843, 0.7327984, 0.38392547, 0.45234743,
            0.88714564, 0.48625886, 0.4974664, 0.280569, 0.3272779, 0.7308698, 0.16297498,
            0.8690239, 0.5834708, 0.33016786, 0.2406453, 0.599151, 0.8538999, 0.30761606,
            0.3641591, 0.11430372, 0.45364544, 0.6984523, 0.7053654, 0.4003387, 0.38632825,
            0.91106904, 0.5180514, 0.1837249, 0.38816592, 0.16589011, 0.91154295, 0.93466866,
            0.9079338, 0.6218017, 0.7199313, 0.5790186, 0.5812801, 0.5897581, 0.00632351,
            0.51240736, 0.3697457, 0.13892107, 0.9900367, 0.47229373, 0.56468743, 0.59834725,
            0.6383385, 0.03793695, 0.9450343, 0.96132326, 0.6061949, 0.63035446, 0.5111371,
            0.03746503, 0.558335, 0.30164844, 0.68653256, 0.99669343, 0.5127781, 0.25915265,
            0.34361982, 0.6647127, 0.42920145, 0.22015804, 0.22396304, 0.553291, 0.21043801,
            0.03016802, 0.13123624, 0.4177692, 0.15363416, 0.26550946, 0.9799374, 0.6468661,
            0.22700246, 0.28266105, 0.7568015, 0.49555436, 0.7577122, 0.20788053, 0.91674453,
            0.56273526, 0.45675126, 0.48490578,
        ],
    )
    .unwrap();

    let kernel17: Array4<f32> = Array::from_shape_vec(
        (1, 2, 5, 5),
        vec![
            0.82385767, 0.42006218, 0.8251126, 0.35886785, 0.09741933, 0.50827706, 0.09494945,
            0.9338919, 0.41674572, 0.12654002, 0.47637334, 0.72644436, 0.22123201, 0.29542014,
            0.46568522, 0.6850643, 0.6808416, 0.3779981, 0.805789, 0.2891591, 0.6993045,
            0.33186397, 0.9734199, 0.9644196, 0.09362596, 0.0414281, 0.27610767, 0.43870836,
            0.34610718, 0.3848816, 0.24301769, 0.23232727, 0.32100558, 0.22719596, 0.85453415,
            0.76819396, 0.8545096, 0.653471, 0.6439924, 0.61992764, 0.5419032, 0.42076096,
            0.7094996, 0.8802664, 0.30416232, 0.00992903, 0.07512625, 0.21167818, 0.9575676,
            0.33277866,
        ],
    )
    .unwrap();
    let conv_layer17 = ConvolutionLayer::new(kernel17, 1, Padding::Same);
    let target_output17: Array3<f32> = Array::from_shape_vec(
        (2, 15, 10),
        vec![
            2.8123116, 2.812055, 2.7787743, 3.0194068, 3.106902, 3.9220734, 4.7322035, 4.432924,
            3.352646, 2.4072845, 3.641139, 4.191481, 4.502393, 5.199857, 4.5749283, 6.200288,
            6.3493934, 6.148312, 4.487849, 3.0890226, 4.316657, 6.269198, 5.966064, 5.583668,
            5.931044, 7.385742, 6.7466326, 8.398724, 5.9088554, 4.8080935, 4.409938, 6.1858954,
            5.58108, 5.353605, 6.911349, 7.5249557, 7.0010343, 8.051163, 5.5828037, 4.2829366,
            5.3897576, 6.155551, 6.0858116, 6.705836, 7.077644, 8.221209, 7.874343, 7.2001724,
            5.3386006, 2.9330547, 5.927366, 5.716141, 6.2403183, 6.623253, 5.7940607, 7.6879387,
            6.9577837, 6.9885964, 5.054572, 2.8752308, 4.8815546, 5.5738053, 6.4881334, 5.568585,
            5.16775, 6.418614, 5.879179, 6.8300576, 5.2052016, 3.1629288, 4.1282115, 5.3659186,
            5.992447, 5.163408, 5.923646, 6.941421, 7.7717543, 7.4895625, 5.435135, 3.4790168,
            5.3648214, 6.2784605, 5.493072, 5.5376544, 5.0757, 6.01876, 7.7405095, 6.9262147,
            5.8561215, 4.1835146, 5.71672, 5.8737173, 6.0997553, 6.3358846, 5.2700615, 6.8439612,
            7.160316, 6.181862, 5.9141173, 3.8751745, 5.069876, 5.92485, 7.2584667, 5.8111877,
            5.881092, 6.405714, 6.433757, 7.23406, 5.633118, 3.5621321, 4.4585304, 5.6759086,
            5.8181324, 5.83186, 5.6706204, 5.10591, 6.8990498, 7.40109, 5.5331306, 4.4175606,
            4.3254614, 5.896489, 6.526495, 6.2210336, 5.778546, 5.938218, 7.103192, 5.554529,
            4.7807484, 4.18583, 3.2566133, 4.117677, 5.3028636, 4.8506985, 5.3747473, 5.310411,
            5.6083493, 5.0725985, 3.7815835, 2.4803622, 2.3452985, 3.2259173, 3.4790072, 3.842762,
            3.629589, 3.4125068, 3.6813703, 3.8093104, 3.2797494, 2.3056498, 1.6477731, 2.3031926,
            3.6161294, 2.8533084, 2.8017993, 3.3230605, 4.0837154, 4.3043814, 3.9392664, 3.3276718,
            2.4020975, 3.2414913, 4.6496696, 3.946092, 4.653672, 5.5591803, 5.705844, 6.635671,
            5.9392953, 4.6646686, 3.143622, 4.6006117, 5.3494725, 5.2278776, 6.10451, 6.5581174,
            6.161689, 6.995285, 6.5079975, 5.688958, 3.627377, 5.5517426, 5.4058447, 5.979729,
            6.047576, 6.647997, 6.5709395, 6.7067323, 5.7924848, 4.7960763, 3.7298176, 5.4371405,
            5.6640124, 5.9175763, 5.5731483, 5.650382, 6.6256704, 7.002309, 5.6567845, 4.118087,
            3.3017704, 4.4642777, 6.2256613, 5.3311768, 5.4621964, 5.2617955, 5.954766, 6.664896,
            5.3590784, 3.5948482, 2.8185875, 3.9864898, 6.0085974, 5.4978876, 5.4314985, 5.5787373,
            5.571091, 5.9274383, 5.1026907, 3.7223654, 3.438616, 4.3443713, 5.2311296, 5.1180453,
            4.6587625, 5.601926, 6.6837873, 6.3077145, 5.7256646, 4.2914023, 3.609188, 5.231084,
            5.2814503, 5.348169, 4.316129, 4.9381986, 5.99618, 5.868773, 6.0976896, 4.676197,
            3.4900348, 4.8470383, 5.8696346, 5.285121, 4.983539, 5.3626027, 6.2339892, 6.5381575,
            6.2091846, 4.536856, 3.2864554, 4.5545564, 6.122629, 5.81006, 5.441612, 4.695722,
            5.767375, 6.6949167, 5.8196154, 4.717403, 3.271341, 4.5465136, 5.937855, 5.8767157,
            5.2854013, 5.1741123, 5.6453586, 5.6104393, 5.1140423, 4.7666783, 2.8105602, 4.697983,
            5.984471, 5.955051, 5.574469, 5.494307, 5.8005795, 5.1462393, 4.2668147, 3.8393989,
            2.1691744, 3.3975468, 4.087597, 4.388792, 4.256538, 4.339597, 5.2171216, 4.881627,
            4.6329985, 3.402025, 1.624654, 2.7128425, 3.3110557, 3.4600024, 3.9223125, 3.6862688,
            3.7395518, 3.6537392, 3.7496817, 3.0409808,
        ],
    )
    .unwrap();
    let current_output17: Array3<f32> = conv_layer17.convolve(&test_input17);

    assert!(
        arr_allclose(&current_output17, &target_output17),
        "{:?} was not equal to {:?}",
        current_output17,
        target_output17
    );

    let test_input18 = Array::from_shape_vec(
        (1, 15, 10),
        vec![
            0.5804159, 0.14874539, 0.84465176, 0.33960778, 0.03217437, 0.23459853, 0.86872333,
            0.05481404, 0.4075119, 0.13763186, 0.38947833, 0.19455469, 0.2231027, 0.710135,
            0.38075933, 0.36192992, 0.5788371, 0.45671245, 0.02821646, 0.65663046, 0.6821529,
            0.13092387, 0.04243296, 0.40237483, 0.96532, 0.08922233, 0.65666056, 0.07955468,
            0.30693734, 0.61528814, 0.8301079, 0.9080613, 0.10633651, 0.95870477, 0.24841434,
            0.49642795, 0.02807361, 0.67816275, 0.14359485, 0.96717685, 0.970054, 0.53526694,
            0.789418, 0.44380167, 0.1696324, 0.22258878, 0.54548246, 0.33204898, 0.6242531,
            0.39491078, 0.95525235, 0.17685722, 0.4390062, 0.25685027, 0.9619644, 0.7054154,
            0.25693816, 0.06693318, 0.71142703, 0.30001205, 0.24983038, 0.04385825, 0.83179814,
            0.9035203, 0.99454165, 0.4820838, 0.2207663, 0.6613494, 0.6531026, 0.941437,
            0.02962555, 0.00604056, 0.6749602, 0.09254023, 0.16296797, 0.7694261, 0.49170363,
            0.04446485, 0.8114944, 0.29030007, 0.1919063, 0.18254054, 0.13724734, 0.00911832,
            0.20514874, 0.59104544, 0.815183, 0.26495343, 0.62743604, 0.94401777, 0.54503894,
            0.6431647, 0.52856827, 0.51207054, 0.03335644, 0.28076503, 0.07791043, 0.86478263,
            0.980501, 0.54355013, 0.03467919, 0.886572, 0.36146563, 0.13580918, 0.8819829,
            0.48148784, 0.09721047, 0.7819647, 0.49357224, 0.6708243, 0.72222507, 0.366483,
            0.37231642, 0.11044633, 0.88196933, 0.7812372, 0.2546282, 0.8222847, 0.328725,
            0.78940445, 0.46583235, 0.3009351, 0.90517753, 0.7002328, 0.750793, 0.75040495,
            0.53337294, 0.51972127, 0.72387767, 0.9831707, 0.20632543, 0.16955712, 0.76152086,
            0.05444199, 0.2814817, 0.15761587, 0.95890856, 0.90069485, 0.01261302, 0.21181779,
            0.78206104, 0.92161584, 0.74544144, 0.8816592, 0.9976662, 0.2966056, 0.2162454,
            0.06208929, 0.50320554, 0.6565798,
        ],
    )
    .unwrap();

    let kernel18: Array4<f32> = Array::from_shape_vec(
        (1, 2, 5, 5),
        vec![
            0.5351854, 0.10227188, 0.28489798, 0.20003575, 0.1822242, 0.05310873, 0.13790856,
            0.78958035, 0.5917116, 0.38009274, 0.2742251, 0.9041115, 0.99974847, 0.9090851,
            0.4171188, 0.48332873, 0.169661, 0.15740211, 0.04401799, 0.33348852, 0.42292982,
            0.4798304, 0.90991354, 0.54084134, 0.4826352, 0.5674032, 0.6246967, 0.70394504,
            0.12639284, 0.16602974, 0.4649844, 0.36747122, 0.75747913, 0.91581804, 0.02039539,
            0.51063865, 0.6296097, 0.55201155, 0.25472447, 0.48130554, 0.324559, 0.66492975,
            0.01730853, 0.77949584, 0.13672462, 0.73892075, 0.02376527, 0.8798877, 0.6356067,
            0.22369854,
        ],
    )
    .unwrap();
    let conv_layer18 = ConvolutionLayer::new(kernel18, 1, Padding::Same);
    let target_output18: Array3<f32> = Array::from_shape_vec(
        (2, 15, 10),
        vec![
            1.5230243, 2.379141, 2.8154614, 2.3947077, 2.753637, 2.492546, 2.6901455, 2.7589877,
            1.833069, 1.4908653, 2.096498, 2.78438, 2.78627, 2.9779186, 3.777945, 3.599246,
            3.1154916, 2.9819927, 2.562595, 2.0560255, 3.5107694, 4.265303, 4.5853806, 4.515006,
            4.6861067, 4.5693583, 3.8633964, 3.9182587, 3.4668918, 2.9606268, 3.7791085, 4.621786,
            6.240288, 5.03221, 4.765132, 4.0628276, 4.4468613, 4.129778, 4.133274, 3.3977816,
            4.030597, 5.0020523, 5.6012783, 4.7841268, 4.87713, 5.1738834, 4.65372, 4.714964,
            3.8661544, 3.4524455, 3.7141352, 4.1910105, 4.927026, 5.8855004, 5.9874606, 5.451,
            4.591379, 4.5830173, 3.967496, 4.09429, 2.590306, 3.3470647, 5.520424, 5.5353694,
            5.4791064, 4.615096, 5.425725, 5.267032, 5.0201116, 3.937888, 2.4966233, 3.158621,
            3.9076467, 3.7185566, 4.317537, 4.997292, 5.5887055, 5.231844, 4.2503715, 3.859957,
            2.1677322, 2.900907, 4.2639103, 4.579166, 4.7899885, 4.9126983, 4.9905176, 6.046425,
            5.6886377, 5.020364, 2.3255136, 3.3298624, 4.4350286, 4.098816, 4.211627, 4.185167,
            4.7559805, 5.9606676, 5.3389764, 4.343993, 2.9944873, 3.5040996, 4.073904, 4.266102,
            4.699163, 5.529877, 5.9632525, 6.206812, 5.1822805, 4.8387947, 3.4552248, 3.8799648,
            4.907802, 5.1838174, 5.2798815, 5.6580296, 5.6520996, 6.008911, 5.410293, 4.8905396,
            2.894409, 4.32808, 6.201571, 6.0243015, 5.794578, 5.3387218, 5.883131, 6.4663787,
            5.0540857, 4.3415513, 2.9049425, 3.909907, 4.8380075, 4.728855, 5.0596275, 5.180373,
            5.2167764, 5.0095277, 3.7567117, 3.0915813, 3.1999264, 3.9956112, 5.186162, 5.099013,
            5.312579, 4.339719, 3.3158154, 3.245139, 3.3096318, 3.0109763, 1.9016763, 2.2846196,
            2.7656348, 2.6326845, 3.6133454, 2.6454895, 2.613682, 2.585115, 2.1559424, 1.223832,
            2.6310127, 4.1176953, 3.277869, 3.7676456, 3.9190571, 4.0877323, 2.6675858, 4.2168407,
            2.424503, 2.477377, 4.304621, 5.112113, 5.49014, 4.4733367, 5.1659946, 3.9698565,
            4.735663, 4.272001, 4.2608995, 2.2342854, 4.039642, 5.366313, 5.4484143, 5.7214146,
            4.8960834, 5.0518928, 3.8914776, 5.450565, 3.5734437, 3.0453534, 4.2308936, 5.5422626,
            6.7592864, 4.89825, 6.442996, 4.9955726, 5.3462205, 4.721218, 4.4843454, 3.2477174,
            3.322043, 5.690382, 5.4774323, 6.3993864, 5.924906, 5.5252223, 4.471888, 5.774929,
            4.2064786, 3.650897, 2.9819674, 4.19655, 4.7149057, 5.647611, 5.174825, 5.12045,
            6.2412715, 5.6570373, 4.3911695, 4.143605, 3.1990135, 3.9990184, 4.221943, 4.4986553,
            4.8741994, 5.341523, 6.3169518, 6.002128, 5.028293, 3.680536, 3.0283628, 3.9775567,
            4.193747, 5.299367, 5.3168826, 4.939987, 5.4662395, 6.8565993, 5.3937984, 4.835297,
            3.138649, 2.9874961, 4.5721107, 4.615651, 4.3927407, 5.425784, 5.7913175, 6.3076916,
            5.1662307, 3.9987226, 3.5295475, 4.4020977, 5.044869, 5.2663193, 5.2866254, 5.5624638,
            6.783667, 6.8076415, 5.504539, 4.8386965, 3.97998, 4.272013, 5.6403074, 5.991483,
            5.1018834, 6.3193655, 6.5725346, 6.0341806, 5.341356, 4.4319696, 3.7264516, 5.3121357,
            6.69475, 6.3026423, 5.582069, 6.091823, 5.7963276, 6.3749695, 5.3230357, 3.1649525,
            3.3084376, 4.8210745, 5.353044, 4.9528666, 5.403463, 5.6168976, 4.4487505, 4.6537757,
            3.5469227, 3.2529113, 2.841976, 3.4150949, 4.051681, 4.5869083, 3.718839, 3.860414,
            3.4135506, 3.4538167, 2.895266, 2.0985897,
        ],
    )
    .unwrap();
    let current_output18: Array3<f32> = conv_layer18.convolve(&test_input18);

    assert!(
        arr_allclose(&current_output18, &target_output18),
        "{:?} was not equal to {:?}",
        current_output18,
        target_output18
    );

    let test_input19 = Array::from_shape_vec(
        (3, 6, 6),
        vec![
            0.584571, 0.96449506, 0.7977554, 0.32541806, 0.10196066, 0.8232674, 0.8543414,
            0.9710584, 0.505133, 0.04858193, 0.16233306, 0.651015, 0.62667716, 0.04012987,
            0.8986551, 0.5988572, 0.7548613, 0.9230523, 0.8094736, 0.41193417, 0.11411006,
            0.29621908, 0.8657136, 0.3099813, 0.7817938, 0.5514695, 0.9309671, 0.35345063,
            0.04673942, 0.2836077, 0.4491099, 0.16020048, 0.0033604, 0.7036799, 0.09309967,
            0.8027366, 0.66168624, 0.75922126, 0.98626304, 0.41794768, 0.85175455, 0.6952307,
            0.8909816, 0.77955645, 0.25186005, 0.6967979, 0.44887283, 0.443149, 0.75464064,
            0.81323266, 0.85127234, 0.15431848, 0.56885445, 0.29611066, 0.87579244, 0.9531821,
            0.5536974, 0.53754663, 0.23263316, 0.527793, 0.6797737, 0.74194604, 0.01885639,
            0.08134871, 0.6701397, 0.42471457, 0.93320847, 0.6966494, 0.5644708, 0.03809474,
            0.09368633, 0.5213245, 0.7867202, 0.5103296, 0.05583452, 0.7863488, 0.5674216,
            0.06023929, 0.39982173, 0.32429224, 0.11995548, 0.8987073, 0.1602559, 0.33672985,
            0.742261, 0.14132027, 0.06929818, 0.4782574, 0.5697997, 0.11632108, 0.49556065,
            0.47647962, 0.7417032, 0.34966558, 0.47131556, 0.9838283, 0.6777289, 0.90295655,
            0.67075133, 0.0573609, 0.8237337, 0.36602104, 0.15022676, 0.66375136, 0.17951131,
            0.7120909, 0.48833874, 0.85454535,
        ],
    )
    .unwrap();

    let kernel19: Array4<f32> = Array::from_shape_vec(
        (3, 2, 3, 3),
        vec![
            0.18296848, 0.10698621, 0.61914563, 0.5212063, 0.922373, 0.6521379, 0.45965454,
            0.3666493, 0.99957263, 0.63527644, 0.17045999, 0.32906872, 0.39238515, 0.8330784,
            0.24240606, 0.16471672, 0.39931872, 0.18019378, 0.04206449, 0.4967664, 0.8137173,
            0.2356948, 0.4160782, 0.9648439, 0.08041501, 0.65951824, 0.8111227, 0.5044555,
            0.5347742, 0.6593625, 0.2873256, 0.93752426, 0.7753997, 0.7233747, 0.5849598,
            0.73156756, 0.514743, 0.9262702, 0.2988856, 0.6292863, 0.3348592, 0.68505603,
            0.09462127, 0.39446756, 0.7353366, 0.06431016, 0.30438656, 0.65234166, 0.58759433,
            0.62632954, 0.4344534, 0.21980144, 0.00100083, 0.6921164,
        ],
    )
    .unwrap();
    let conv_layer19 = ConvolutionLayer::new(kernel19, 1, Padding::Same);
    let target_output19: Array3<f32> = Array::from_shape_vec(
        (2, 6, 6),
        vec![
            3.3624825, 5.948152, 5.762525, 4.726835, 3.98904, 3.4611754, 4.9440475, 8.622945,
            7.825581, 6.4030504, 6.6426253, 4.994688, 4.381818, 8.660008, 7.571001, 6.64913,
            6.630436, 5.825828, 4.7796564, 9.204523, 6.6976395, 6.514056, 6.982071, 5.5622234,
            4.693431, 8.8573065, 7.2804465, 5.8766265, 5.1453414, 5.468914, 2.9191206, 5.575658,
            4.963081, 3.7493377, 3.7955246, 3.4536142, 4.2713532, 5.726931, 5.1208262, 4.1608634,
            4.5786266, 3.2114387, 5.2156982, 8.653988, 6.7270746, 5.98565, 6.239894, 4.741731,
            5.2151456, 7.091782, 6.9786887, 5.846963, 6.0990634, 4.359418, 5.3254337, 8.272465,
            6.375, 5.5543494, 5.547189, 4.8342094, 5.488575, 7.692333, 6.3105984, 4.4050665,
            5.3889055, 3.92513, 3.5326986, 4.445825, 3.9975348, 3.4429162, 2.9564264, 3.4309478,
        ],
    )
    .unwrap();
    let current_output19: Array3<f32> = conv_layer19.convolve(&test_input19);

    assert!(
        arr_allclose(&current_output19, &target_output19),
        "{:?} was not equal to {:?}",
        current_output19,
        target_output19
    );

    let test_input20 = Array::from_shape_vec(
        (3, 6, 6),
        vec![
            0.8472264, 0.3598078, 0.8860002, 0.3531883, 0.25727805, 0.25435162, 0.7503538,
            0.4171089, 0.7314984, 0.4653744, 0.71255463, 0.95627284, 0.9875905, 0.22617352,
            0.7417731, 0.37862286, 0.5094745, 0.18060002, 0.9620671, 0.49016726, 0.45882288,
            0.75507283, 0.45673513, 0.9690947, 0.10567724, 0.2728893, 0.70271283, 0.8472397,
            0.55496895, 0.91851914, 0.9672113, 0.64802116, 0.21997769, 0.3842727, 0.94689554,
            0.74909705, 0.3282922, 0.2643334, 0.3491095, 0.3052412, 0.5038705, 0.37622157,
            0.04119791, 0.7131295, 0.14328648, 0.13365868, 0.36297327, 0.68727154, 0.93408334,
            0.21441843, 0.91439056, 0.40976977, 0.9953925, 0.3781238, 0.28116077, 0.97598535,
            0.36442432, 0.14792818, 0.83921397, 0.625257, 0.09807894, 0.3419448, 0.9480976,
            0.12152596, 0.29696485, 0.41873357, 0.95614773, 0.47523478, 0.25687808, 0.7602087,
            0.78506595, 0.43647116, 0.97631705, 0.26839125, 0.08090039, 0.48662946, 0.70590997,
            0.99664134, 0.77797663, 0.2436962, 0.6407154, 0.34835714, 0.8761795, 0.19121103,
            0.5305259, 0.6565131, 0.5287279, 0.29444507, 0.775589, 0.24550702, 0.9532204,
            0.8754091, 0.341333, 0.6382999, 0.5125449, 0.5005919, 0.937352, 0.6224484, 0.14624618,
            0.8417525, 0.9414587, 0.44898897, 0.6993321, 0.36183158, 0.24969168, 0.9671642,
            0.20102102, 0.799053,
        ],
    )
    .unwrap();

    let kernel20: Array4<f32> = Array::from_shape_vec(
        (3, 2, 3, 3),
        vec![
            0.29777643, 0.05473179, 0.82243276, 0.49220118, 0.959262, 0.60974807, 0.82510734,
            0.77621484, 0.31383017, 0.20135997, 0.40562743, 0.25492424, 0.5874371, 0.69954115,
            0.11803117, 0.95850575, 0.9031762, 0.8240507, 0.7735656, 0.5868046, 0.50450677,
            0.31319898, 0.23300357, 0.8095447, 0.34135282, 0.24274388, 0.6729072, 0.57593447,
            0.8085596, 0.7018395, 0.76145005, 0.58241343, 0.3309161, 0.67546684, 0.32411024,
            0.3949699, 0.412044, 0.8408538, 0.76511306, 0.8994237, 0.8364367, 0.38108206,
            0.69459295, 0.8441607, 0.40802577, 0.95296425, 0.72987187, 0.07076582, 0.8826578,
            0.44925806, 0.8213124, 0.6112075, 0.96117723, 0.3876701,
        ],
    )
    .unwrap();
    let conv_layer20 = ConvolutionLayer::new(kernel20, 1, Padding::Same);
    let target_output20: Array3<f32> = Array::from_shape_vec(
        (2, 6, 6),
        vec![
            3.7027965, 4.875864, 4.179359, 5.0049267, 5.3426137, 4.0550084, 5.7149754, 8.425953,
            7.1237383, 8.2331705, 7.801853, 6.0903277, 6.664565, 9.441586, 7.726851, 8.438264,
            8.49867, 5.806662, 6.7307563, 9.077959, 7.893326, 8.727321, 8.444815, 6.2326756,
            6.5865855, 7.9125857, 8.450588, 9.472462, 9.271508, 6.833195, 4.2001286, 5.3855405,
            5.4885798, 6.2138166, 6.903186, 4.7299232, 3.5044656, 4.433747, 4.0862164, 4.158872,
            4.878233, 3.2032232, 6.736767, 8.540547, 6.662798, 8.474693, 7.9947457, 5.5148096,
            7.6264496, 8.770458, 7.9595523, 8.724315, 8.601471, 5.8295336, 7.187696, 8.91791,
            8.280454, 9.376999, 8.2501, 5.110223, 7.487491, 8.825199, 8.742828, 8.822101, 9.862068,
            6.53732, 4.510749, 5.29094, 5.6972904, 6.7254453, 7.7914443, 4.010316,
        ],
    )
    .unwrap();
    let current_output20: Array3<f32> = conv_layer20.convolve(&test_input20);

    assert!(
        arr_allclose(&current_output20, &target_output20),
        "{:?} was not equal to {:?}",
        current_output20,
        target_output20
    );

    let test_input21 = Array::from_shape_vec(
        (3, 6, 6),
        vec![
            0.88056743, 0.9483631, 0.8974017, 0.4120727, 0.27696642, 0.69025475, 0.42224765,
            0.96611446, 0.04551166, 0.40275672, 0.19091433, 0.4437527, 0.31289253, 0.2396215,
            0.6389319, 0.85605, 0.27247688, 0.19161025, 0.50402254, 0.5852498, 0.97299683,
            0.594723, 0.38096267, 0.29591832, 0.28942943, 0.4529504, 0.19683413, 0.1757779,
            0.88774997, 0.5229589, 0.7137983, 0.82603574, 0.8461087, 0.9091735, 0.80568945,
            0.79286724, 0.3410004, 0.32917508, 0.17503856, 0.7846004, 0.7272445, 0.48829708,
            0.9584728, 0.7469263, 0.66009414, 0.59341496, 0.42636782, 0.9874962, 0.85196227,
            0.43363968, 0.02657376, 0.11542477, 0.13354255, 0.5618466, 0.070237, 0.35689688,
            0.27853093, 0.8144841, 0.99201185, 0.6685596, 0.5670808, 0.68718493, 0.73198694,
            0.84016347, 0.55920875, 0.27009216, 0.10123584, 0.2636, 0.9657689, 0.005051, 0.5576874,
            0.9025137, 0.55897933, 0.35369453, 0.9429427, 0.5162179, 0.5906877, 0.05157892,
            0.76241785, 0.07249359, 0.45541912, 0.01278013, 0.4782056, 0.76319754, 0.5541978,
            0.04795831, 0.5815242, 0.27330735, 0.8815459, 0.29006037, 0.23429064, 0.18781203,
            0.94584274, 0.4523076, 0.29750833, 0.17197818, 0.06818328, 0.6987018, 0.6090657,
            0.24505253, 0.8169458, 0.03939039, 0.5665328, 0.8011893, 0.75747067, 0.1555473,
            0.18986696, 0.13435428,
        ],
    )
    .unwrap();

    let kernel21: Array4<f32> = Array::from_shape_vec(
        (3, 2, 3, 3),
        vec![
            0.38600448, 0.19166702, 0.46490034, 0.18260308, 0.82895696, 0.03558233, 0.14173116,
            0.8877225, 0.12655611, 0.4754852, 0.7843472, 0.8912908, 0.15408872, 0.45979473,
            0.18853948, 0.826404, 0.8497178, 0.36331993, 0.98673576, 0.43612492, 0.03541405,
            0.783278, 0.24658875, 0.74658084, 0.34663445, 0.03917093, 0.3931895, 0.30789322,
            0.68702215, 0.44194368, 0.33855647, 0.9119313, 0.31810585, 0.16017109, 0.00698695,
            0.293519, 0.14280626, 0.48469457, 0.1767692, 0.42322084, 0.46112144, 0.9255381,
            0.5532242, 0.9853486, 0.24325794, 0.63504064, 0.15406865, 0.11709648, 0.1119092,
            0.21574858, 0.62332, 0.8729103, 0.52609015, 0.06899712,
        ],
    )
    .unwrap();
    let conv_layer21 = ConvolutionLayer::new(kernel21, 1, Padding::Same);
    let target_output21: Array3<f32> = Array::from_shape_vec(
        (2, 6, 6),
        vec![
            3.6412778, 4.178762, 4.4856133, 3.7085743, 4.209375, 2.8899198, 4.747504, 6.3549175,
            5.3319616, 5.018839, 5.426755, 3.5879693, 3.5739877, 5.3552775, 4.944023, 5.6674633,
            5.2385416, 3.5456738, 3.3656228, 4.728046, 6.3192344, 6.587129, 5.553093, 3.1123934,
            3.4684076, 6.340571, 7.141453, 6.261395, 6.134912, 3.7310197, 2.609569, 4.988308,
            4.245092, 4.606049, 4.1982913, 2.6071014, 2.9761348, 4.4239235, 3.8079288, 3.8208778,
            3.9832528, 2.9842038, 5.0264697, 7.2225766, 5.7286806, 5.5621386, 4.736604, 3.6969142,
            3.964484, 5.6463842, 4.7776136, 5.34568, 5.412127, 3.8500788, 2.948869, 5.079655,
            5.7337933, 7.00755, 5.7697277, 3.6098893, 4.001768, 6.982687, 7.564354, 6.6354995,
            5.8145537, 4.3958797, 2.2289934, 3.7002106, 3.7323852, 3.8781617, 3.6579518, 2.6742492,
        ],
    )
    .unwrap();
    let current_output21: Array3<f32> = conv_layer21.convolve(&test_input21);

    assert!(
        arr_allclose(&current_output21, &target_output21),
        "{:?} was not equal to {:?}",
        current_output21,
        target_output21
    );

    let test_input22 = Array::from_shape_vec(
        (3, 6, 6),
        vec![
            0.6168495, 0.3181057, 0.10088859, 0.28579375, 0.08647749, 0.8464018, 0.5181164,
            0.47873196, 0.83375126, 0.9057766, 0.00922728, 0.36432305, 0.53910846, 0.47707382,
            0.23459193, 0.6104503, 0.99977493, 0.2879088, 0.9237121, 0.24345838, 0.00414109,
            0.03638967, 0.30595168, 0.16491044, 0.7087876, 0.79154646, 0.6065011, 0.46475387,
            0.6585233, 0.93920064, 0.09687401, 0.5544905, 0.56360936, 0.10987341, 0.79093266,
            0.6827511, 0.93982804, 0.14053226, 0.49555323, 0.4556152, 0.66896224, 0.46089745,
            0.33559954, 0.3038908, 0.7388162, 0.5641086, 0.07862057, 0.46463865, 0.07132971,
            0.5696929, 0.89171886, 0.97521317, 0.86021405, 0.61829454, 0.4099887, 0.3409378,
            0.49427044, 0.10122171, 0.23691536, 0.70967704, 0.4641384, 0.8326181, 0.38735756,
            0.9489551, 0.07998312, 0.5111061, 0.02956773, 0.17711017, 0.11328588, 0.74999446,
            0.8589006, 0.07875007, 0.73433584, 0.4188041, 0.48477763, 0.00624699, 0.6286288,
            0.21567076, 0.81573004, 0.70090973, 0.8734742, 0.6482149, 0.5717835, 0.16271727,
            0.53025377, 0.0984337, 0.82271063, 0.12299971, 0.06295575, 0.7953895, 0.5933358,
            0.27819812, 0.70772564, 0.8846656, 0.33805057, 0.66772455, 0.9335431, 0.0900248,
            0.08626243, 0.0064692, 0.9791513, 0.52760124, 0.61633664, 0.9759571, 0.5431996,
            0.11189567, 0.662313, 0.47249612,
        ],
    )
    .unwrap();

    let kernel22: Array4<f32> = Array::from_shape_vec(
        (3, 2, 5, 5),
        vec![
            0.88115114, 0.93577164, 0.61019063, 0.4513792, 0.21412608, 0.21063799, 0.59758914,
            0.26163143, 0.57292384, 0.3575447, 0.41482434, 0.5686212, 0.43116546, 0.8888871,
            0.5989078, 0.96428144, 0.67385226, 0.18009396, 0.650084, 0.1288117, 0.6034601,
            0.23165825, 0.01380609, 0.45430455, 0.3510245, 0.375879, 0.7931324, 0.20369534,
            0.9617992, 0.17212614, 0.8661392, 0.818001, 0.04731771, 0.6331485, 0.83272296,
            0.58803684, 0.6773803, 0.966571, 0.59957683, 0.85136724, 0.03105091, 0.388052,
            0.55736136, 0.02805966, 0.80824125, 0.57193863, 0.9242484, 0.43400672, 0.95459735,
            0.19825369, 0.3165235, 0.34878272, 0.04700416, 0.89200944, 0.8226108, 0.49845085,
            0.02590412, 0.3321073, 0.9764468, 0.5381227, 0.92109436, 0.7710321, 0.8660679,
            0.3895538, 0.854895, 0.07690383, 0.03470363, 0.623576, 0.7447061, 0.23551573,
            0.09116793, 0.13018292, 0.29478395, 0.694041, 0.0967541, 0.8266735, 0.00767931,
            0.24422543, 0.47754803, 0.05508777, 0.30187264, 0.58673537, 0.38990366, 0.6169217,
            0.5919785, 0.35687554, 0.9651153, 0.31502706, 0.15851368, 0.90410787, 0.24201743,
            0.99100995, 0.46153438, 0.5230941, 0.05274187, 0.85842836, 0.8584512, 0.30464408,
            0.00721753, 0.18392335, 0.8556412, 0.1809689, 0.5768042, 0.3628767, 0.69780505,
            0.11757887, 0.08762363, 0.36607084, 0.24363868, 0.7472844, 0.08178072, 0.8810783,
            0.3569205, 0.451316, 0.0383365, 0.8465622, 0.9883213, 0.56150496, 0.52739674,
            0.47732064, 0.43933925, 0.21088907, 0.5524299, 0.8005311, 0.17473145, 0.40513718,
            0.82864845, 0.4856008, 0.41349155, 0.8595507, 0.77320266, 0.9890798, 0.24298015,
            0.27266598, 0.4846638, 0.87975013, 0.4469587, 0.10110632, 0.5594282, 0.9304254,
            0.09035328, 0.76902574, 0.2852155, 0.07585676, 0.24124639, 0.06790887, 0.14329627,
            0.6381789, 0.9543389, 0.6581925,
        ],
    )
    .unwrap();
    let conv_layer22 = ConvolutionLayer::new(kernel22, 1, Padding::Same);
    let target_output22: Array3<f32> = Array::from_shape_vec(
        (2, 6, 6),
        vec![
            6.579802, 8.012934, 10.92125, 11.283057, 9.726392, 6.5892735, 8.661343, 11.3600645,
            13.057155, 13.816774, 11.524599, 8.092505, 10.7192, 15.667594, 18.188164, 17.250502,
            14.0416, 10.441315, 9.490077, 13.699972, 17.13799, 16.608065, 14.412819, 10.151184,
            6.7072086, 10.652457, 12.342745, 13.650643, 10.44688, 9.45057, 5.2411785, 7.8647785,
            9.744259, 10.92034, 7.695318, 5.9851923, 7.412484, 9.943621, 12.415766, 10.621882,
            9.496189, 6.265102, 8.692948, 12.2633505, 14.627322, 14.110763, 11.989759, 8.764341,
            10.418431, 15.347526, 18.266727, 17.390217, 14.82451, 8.968906, 11.408081, 15.549373,
            19.370953, 19.139805, 16.190788, 9.250728, 9.704477, 11.109579, 16.296078, 15.723416,
            11.557698, 8.555022, 6.1319056, 6.9128423, 9.911766, 10.850244, 8.903333, 5.9992046,
        ],
    )
    .unwrap();
    let current_output22: Array3<f32> = conv_layer22.convolve(&test_input22);

    assert!(
        arr_allclose(&current_output22, &target_output22),
        "{:?} was not equal to {:?}",
        current_output22,
        target_output22
    );

    let test_input23 = Array::from_shape_vec(
        (3, 6, 6),
        vec![
            0.1983508, 0.44280005, 0.15768081, 0.7742759, 0.90144795, 0.8614371, 0.28797778,
            0.37103122, 0.0877872, 0.45872805, 0.76575243, 0.6829663, 0.2304093, 0.5233105,
            0.6974145, 0.8921432, 0.22412036, 0.0491925, 0.5368815, 0.19189753, 0.45287937,
            0.6024187, 0.37045264, 0.23233427, 0.42484194, 0.98901117, 0.36564678, 0.8630159,
            0.8116843, 0.39872772, 0.6879206, 0.7998495, 0.594579, 0.7541534, 0.80124223,
            0.59222096, 0.05390601, 0.82877624, 0.29753333, 0.82358676, 0.29054287, 0.26042402,
            0.88391197, 0.8143526, 0.579024, 0.05703124, 0.6139959, 0.10031959, 0.78280455,
            0.24171719, 0.4721017, 0.53194064, 0.6437402, 0.09277638, 0.8693754, 0.60042983,
            0.8875286, 0.86002535, 0.69702214, 0.12023476, 0.9464669, 0.9782188, 0.38164645,
            0.7172452, 0.9105007, 0.41190186, 0.29969904, 0.43725935, 0.7022435, 0.7566894,
            0.5551452, 0.88240683, 0.10910437, 0.51675713, 0.33856305, 0.4310923, 0.43717158,
            0.2241604, 0.7074267, 0.04574655, 0.62335473, 0.6056931, 0.19430637, 0.9464095,
            0.43765876, 0.47719213, 0.45312902, 0.417855, 0.8179389, 0.03511541, 0.5549018,
            0.6715673, 0.61512816, 0.655004, 0.09111205, 0.49298653, 0.3268639, 0.77552783,
            0.77209026, 0.47542888, 0.31814525, 0.52555007, 0.81072354, 0.00102462, 0.5109687,
            0.48937833, 0.122188, 0.22519495,
        ],
    )
    .unwrap();

    let kernel23: Array4<f32> = Array::from_shape_vec(
        (3, 2, 5, 5),
        vec![
            0.40227205, 0.84508294, 0.43985215, 0.05504967, 0.02137936, 0.26612982, 0.12310848,
            0.00158825, 0.75761557, 0.88188004, 0.12094665, 0.13906257, 0.9157668, 0.91879827,
            0.8513396, 0.28533912, 0.30878848, 0.12668495, 0.24235713, 0.45707443, 0.7712829,
            0.6903243, 0.09853197, 0.43307763, 0.05488254, 0.70532215, 0.34688666, 0.9355463,
            0.38260135, 0.4838589, 0.17318112, 0.21472165, 0.77769446, 0.356957, 0.22671694,
            0.18250434, 0.41477197, 0.18007399, 0.9827863, 0.58704966, 0.2950183, 0.46143153,
            0.19057809, 0.3653109, 0.93977064, 0.26191843, 0.3693467, 0.1444909, 0.9363978,
            0.42698747, 0.1281546, 0.30951205, 0.1389484, 0.7072368, 0.44510987, 0.68366706,
            0.60059834, 0.09438256, 0.36583102, 0.60821444, 0.03161661, 0.8738241, 0.29876906,
            0.33316013, 0.562216, 0.3353904, 0.10716959, 0.9334109, 0.8606402, 0.42792627,
            0.48052302, 0.6958078, 0.4525564, 0.99052715, 0.04395659, 0.71055365, 0.9117777,
            0.93380785, 0.90260816, 0.01515595, 0.88177705, 0.43487665, 0.56912595, 0.05581366,
            0.02638636, 0.50119185, 0.31323937, 0.05636088, 0.31307653, 0.3326902, 0.3734779,
            0.4210294, 0.08686391, 0.3808534, 0.36317897, 0.19031978, 0.46563995, 0.41320488,
            0.94399136, 0.28572702, 0.6142756, 0.8158052, 0.26794037, 0.12281225, 0.32823455,
            0.14740174, 0.70965314, 0.19252698, 0.79887706, 0.02814319, 0.39099365, 0.7551387,
            0.5038018, 0.15413615, 0.82638884, 0.2631662, 0.7053773, 0.6478343, 0.32534242,
            0.6635084, 0.8839653, 0.59479696, 0.68739474, 0.903793, 0.9826564, 0.56865096,
            0.33996934, 0.63317853, 0.7065151, 0.82775307, 0.22001709, 0.37304193, 0.20307006,
            0.59174454, 0.3759951, 0.673529, 0.42676452, 0.6453951, 0.93520576, 0.59322685,
            0.5885291, 0.23145947, 0.15739693, 0.8825847, 0.17851174, 0.5603199, 0.14435844,
            0.10347797, 0.37213182, 0.14642915,
        ],
    )
    .unwrap();
    let conv_layer23 = ConvolutionLayer::new(kernel23, 1, Padding::Same);
    let target_output23: Array3<f32> = Array::from_shape_vec(
        (2, 6, 6),
        vec![
            4.7411337, 7.0011067, 8.856134, 8.752295, 6.8512154, 6.064535, 6.281861, 10.035889,
            12.291813, 12.317691, 10.583484, 8.676581, 10.111918, 14.634719, 19.815954, 17.142874,
            14.579868, 9.562446, 11.019707, 15.034246, 19.338034, 18.064575, 14.553495, 10.987914,
            9.115031, 14.126499, 16.525938, 16.004284, 13.375229, 9.842579, 7.5547676, 12.084558,
            13.838549, 12.623963, 11.173927, 8.271299, 6.0362177, 8.212212, 9.796902, 9.271915,
            8.411064, 6.405924, 8.35573, 11.2582245, 14.221201, 13.7706175, 10.115512, 8.060403,
            10.413403, 14.997336, 18.31831, 17.37706, 14.141033, 10.119716, 10.522863, 16.385498,
            18.280762, 17.4856, 13.992491, 10.918068, 7.125762, 11.608667, 14.2130785, 13.0321665,
            10.586155, 7.9885864, 5.478777, 8.971697, 10.720692, 10.937113, 8.3057995, 6.4088926,
        ],
    )
    .unwrap();
    let current_output23: Array3<f32> = conv_layer23.convolve(&test_input23);

    assert!(
        arr_allclose(&current_output23, &target_output23),
        "{:?} was not equal to {:?}",
        current_output23,
        target_output23
    );

    let test_input24 = Array::from_shape_vec(
        (3, 6, 6),
        vec![
            0.21561022, 0.3830422, 0.90021485, 0.32565016, 0.82000726, 0.72865623, 0.48349917,
            0.41356984, 0.03333719, 0.08149401, 0.85722613, 0.04374503, 0.88704216, 0.09240989,
            0.8528545, 0.7946653, 0.54765993, 0.74729836, 0.72924787, 0.21080038, 0.12833528,
            0.06738389, 0.9163098, 0.2233036, 0.09597177, 0.4226413, 0.73019654, 0.8065446,
            0.13412596, 0.9296237, 0.88961375, 0.8097079, 0.92300737, 0.8407575, 0.5467569,
            0.90232325, 0.40697718, 0.7049378, 0.17525117, 0.60480595, 0.01006908, 0.09306768,
            0.04155758, 0.00396548, 0.29594678, 0.24183853, 0.23543635, 0.10814751, 0.366542,
            0.58264214, 0.1795904, 0.47117367, 0.7827338, 0.22905576, 0.3444951, 0.83183694,
            0.12226541, 0.8971257, 0.27640048, 0.37137195, 0.2710384, 0.27672654, 0.33046693,
            0.4244338, 0.8525934, 0.79606473, 0.24516417, 0.5116681, 0.32966596, 0.36674044,
            0.40403318, 0.31310067, 0.7258184, 0.01080465, 0.05479572, 0.52210695, 0.6023438,
            0.20002392, 0.6150934, 0.23236814, 0.28950065, 0.33898464, 0.5701668, 0.51984864,
            0.45874897, 0.78067493, 0.8138102, 0.9551208, 0.5881804, 0.47504795, 0.19136074,
            0.8406687, 0.04588939, 0.30594054, 0.8511978, 0.8773192, 0.8241661, 0.44152674,
            0.38872027, 0.07202522, 0.9640743, 0.5195077, 0.19128811, 0.25130445, 0.39854062,
            0.8797602, 0.7229711, 0.62001854,
        ],
    )
    .unwrap();

    let kernel24: Array4<f32> = Array::from_shape_vec(
        (3, 2, 5, 5),
        vec![
            0.69522935, 0.91174835, 0.65982074, 0.10557687, 0.23464549, 0.5982146, 0.28930026,
            0.45670658, 0.47519284, 0.96985734, 0.13737752, 0.33859882, 0.8539295, 0.74257755,
            0.9444382, 0.24404159, 0.7431825, 0.0306461, 0.32723787, 0.8498817, 0.780418,
            0.7744034, 0.47136632, 0.2987932, 0.90784407, 0.6841086, 0.38890767, 0.05255083,
            0.16184397, 0.90099066, 0.498845, 0.29081446, 0.96019644, 0.79299563, 0.47393435,
            0.72834367, 0.6158064, 0.6794256, 0.47645757, 0.3335043, 0.756347, 0.11874896,
            0.36077332, 0.3897357, 0.37567437, 0.98458624, 0.5517178, 0.29212236, 0.9600367,
            0.6615687, 0.06723779, 0.2025786, 0.02713268, 0.80878776, 0.733241, 0.04588867,
            0.02181397, 0.7670707, 0.45551613, 0.6842329, 0.6831582, 0.6664801, 0.3131931,
            0.29468352, 0.85157114, 0.8392736, 0.14075516, 0.85626125, 0.52595836, 0.98014617,
            0.27240536, 0.44448686, 0.82414293, 0.9190075, 0.22366077, 0.8532558, 0.701437,
            0.40568367, 0.37661108, 0.67640066, 0.56091106, 0.04301855, 0.12136482, 0.6737573,
            0.2752744, 0.0267396, 0.94759494, 0.6303967, 0.12444576, 0.72837055, 0.7281102,
            0.2626654, 0.09959164, 0.2171505, 0.30699563, 0.74566257, 0.7291574, 0.75221896,
            0.98712695, 0.14437845, 0.29435056, 0.9106491, 0.34656417, 0.99010134, 0.6754568,
            0.9541668, 0.84239453, 0.3434271, 0.74494994, 0.99503726, 0.16594417, 0.31254604,
            0.43238705, 0.5073427, 0.14618637, 0.09028576, 0.8893203, 0.91551375, 0.49814487,
            0.7052375, 0.65795493, 0.83047026, 0.17178877, 0.10943547, 0.9565582, 0.9222505,
            0.71428937, 0.5576436, 0.4350043, 0.43690363, 0.04750107, 0.6443613, 0.03292517,
            0.5884901, 0.27200705, 0.9026258, 0.826362, 0.0902301, 0.29801482, 0.74622726,
            0.5126913, 0.22947553, 0.6898572, 0.89290726, 0.11439011, 0.2553315, 0.5261063,
            0.96802235, 0.3207074, 0.16912474,
        ],
    )
    .unwrap();
    let conv_layer24 = ConvolutionLayer::new(kernel24, 1, Padding::Same);
    let target_output24: Array3<f32> = Array::from_shape_vec(
        (2, 6, 6),
        vec![
            5.0819454, 7.4180193, 11.288455, 10.429087, 9.21155, 7.4711404, 7.5766606, 9.728822,
            13.647063, 14.292296, 12.817882, 10.003657, 8.907453, 12.310436, 18.914684, 18.983847,
            14.567168, 12.540655, 9.398693, 13.294012, 19.775913, 19.376171, 16.875446, 13.795015,
            8.123828, 12.761068, 16.620026, 18.526672, 15.329108, 13.490862, 6.3122697, 7.8670263,
            12.013609, 13.130482, 11.565219, 8.31154, 5.9878635, 8.168834, 11.348611, 9.471805,
            7.432596, 6.0139403, 6.6591954, 9.093727, 13.428374, 12.536629, 9.613277, 7.7566276,
            11.329413, 13.103578, 17.055208, 17.438353, 14.334792, 10.363801, 9.664736, 12.394157,
            18.0545, 19.43828, 12.9659815, 11.395227, 8.185625, 12.788141, 16.38741, 16.207634,
            13.311389, 10.392802, 6.9065304, 10.16876, 11.7139635, 11.771362, 9.051828, 7.7546926,
        ],
    )
    .unwrap();
    let current_output24: Array3<f32> = conv_layer24.convolve(&test_input24);

    assert!(
        arr_allclose(&current_output24, &target_output24),
        "{:?} was not equal to {:?}",
        current_output24,
        target_output24
    );

    let test_input25 = Array::from_shape_vec(
        (3, 10, 15),
        vec![
            0.4287567, 0.69673246, 0.5962988, 0.6583277, 0.95566136, 0.3090088, 0.04040552,
            0.36515298, 0.7484168, 0.38902923, 0.57477367, 0.02147577, 0.12675387, 0.8958077,
            0.57611835, 0.8050715, 0.18574312, 0.9103308, 0.49352488, 0.04084096, 0.32406485,
            0.9127804, 0.32315838, 0.5274155, 0.3541732, 0.43012723, 0.5261415, 0.8519433,
            0.34473136, 0.22837397, 0.16551489, 0.251939, 0.9573879, 0.3333164, 0.45628268,
            0.6485293, 0.03959658, 0.7774604, 0.72181726, 0.25632858, 0.40238795, 0.29511455,
            0.18771167, 0.4778858, 0.88639265, 0.03075815, 0.38190666, 0.5188661, 0.43225557,
            0.443126, 0.7846497, 0.69072247, 0.70348734, 0.48298272, 0.5568704, 0.68944603,
            0.03431003, 0.38795924, 0.6902452, 0.85404575, 0.52294713, 0.14189826, 0.48577386,
            0.0789768, 0.29317725, 0.34614396, 0.42246845, 0.71652186, 0.03888219, 0.95906556,
            0.15285546, 0.94362164, 0.15887408, 0.13075079, 0.15117891, 0.03306201, 0.16711909,
            0.58509, 0.26331437, 0.15727986, 0.39590272, 0.2304746, 0.8428172, 0.32108444,
            0.6584057, 0.22742087, 0.03719785, 0.4095963, 0.6715706, 0.9103236, 0.37286273,
            0.2795822, 0.23605917, 0.16103324, 0.48898628, 0.7769166, 0.63719285, 0.5339775,
            0.5013731, 0.23002648, 0.726385, 0.64956135, 0.10749894, 0.7930301, 0.25076696,
            0.01513924, 0.2581999, 0.03015263, 0.5023638, 0.8415604, 0.43133247, 0.5533162,
            0.562384, 0.6384559, 0.52681637, 0.13921387, 0.09313619, 0.75766635, 0.78449273,
            0.8692138, 0.79183036, 0.72191995, 0.91970456, 0.26611277, 0.45631656, 0.8316374,
            0.60754436, 0.86304337, 0.8193103, 0.47772342, 0.73805946, 0.01831975, 0.71567196,
            0.27518228, 0.09057815, 0.5942683, 0.9828262, 0.6877077, 0.01671847, 0.59191656,
            0.11799596, 0.3565012, 0.5271378, 0.42855334, 0.7159743, 0.33997726, 0.13702092,
            0.30294093, 0.60102206, 0.31660682, 0.47319987, 0.81581175, 0.32806376, 0.2910204,
            0.7040396, 0.7646719, 0.16295868, 0.5199952, 0.10952926, 0.25027466, 0.01479205,
            0.20828883, 0.6572299, 0.16784889, 0.49984223, 0.73934627, 0.7692465, 0.45089912,
            0.42323235, 0.3092633, 0.94342923, 0.5813263, 0.17081867, 0.45052946, 0.5468596,
            0.32220426, 0.97337824, 0.15655027, 0.0631674, 0.9276395, 0.7337421, 0.6282157,
            0.44235066, 0.70144874, 0.2581846, 0.37731636, 0.74292475, 0.7893134, 0.9682662,
            0.07253607, 0.61240184, 0.5712741, 0.7101941, 0.42240703, 0.3144015, 0.23257384,
            0.355786, 0.774386, 0.7575536, 0.44447815, 0.76916295, 0.43969592, 0.09476027,
            0.89676636, 0.25122383, 0.3878751, 0.5271335, 0.21266471, 0.64234614, 0.23638117,
            0.12251099, 0.11175825, 0.6929939, 0.06464646, 0.15909617, 0.64519554, 0.325024,
            0.95026743, 0.57768893, 0.556819, 0.2965687, 0.68271434, 0.17499126, 0.28795037,
            0.6223563, 0.28275678, 0.62251085, 0.05298517, 0.9586377, 0.8305602, 0.53959036,
            0.7768914, 0.3662946, 0.53110784, 0.87225235, 0.14521246, 0.7490009, 0.55172807,
            0.9621208, 0.2896578, 0.23772797, 0.38020673, 0.41068247, 0.15089212, 0.3510485,
            0.28178045, 0.0740529, 0.28524187, 0.20798713, 0.7328364, 0.24482581, 0.13728051,
            0.9986837, 0.6677257, 0.30110443, 0.59491575, 0.33922875, 0.78129905, 0.45983207,
            0.39850447, 0.29452822, 0.3990066, 0.71123666, 0.9245769, 0.80979043, 0.12899092,
            0.03675647, 0.98098063, 0.12195553, 0.5954175, 0.9923433, 0.4660024, 0.42390975,
            0.41920665, 0.63552475, 0.6557143, 0.47023433, 0.57522744, 0.8106476, 0.4967516,
            0.7960696, 0.35081705, 0.5810784, 0.47564268, 0.5950288, 0.23334436, 0.35525572,
            0.65956026, 0.98428434, 0.9814129, 0.8474201, 0.8124901, 0.4688829, 0.6571122,
            0.44344074, 0.72268397, 0.50578433, 0.89210486, 0.29161337, 0.30685803, 0.7015651,
            0.76217693, 0.53040797, 0.23608343, 0.3370403, 0.5153227, 0.12298316, 0.38562468,
            0.39561588, 0.21013618, 0.00794073, 0.21312988, 0.09544598, 0.16640656, 0.39524126,
            0.70305294, 0.6951719, 0.76970625, 0.01947077, 0.72122115, 0.43079308, 0.654422,
            0.33095863, 0.37373173, 0.58761567, 0.49653715, 0.6094103, 0.37502283, 0.7990719,
            0.94719636, 0.90727985, 0.43818596, 0.15018035, 0.26554954, 0.2760564, 0.15040922,
            0.2605517, 0.5976553, 0.6584785, 0.23161498, 0.6921513, 0.64733315, 0.854641,
            0.03501531, 0.919175, 0.9064802, 0.96888334, 0.3072559, 0.23253885, 0.44027686,
            0.44643322, 0.46258068, 0.5722288, 0.78549147, 0.13830437, 0.6860908, 0.06808019,
            0.9976838, 0.354391, 0.21689764, 0.20947075, 0.3030436, 0.6783678, 0.34793916,
            0.91172963, 0.3608854, 0.42308012, 0.8522385, 0.80487376, 0.80669975, 0.20780124,
            0.6568672, 0.9909294, 0.6851016, 0.89588594, 0.5385484, 0.81079435, 0.4669414,
            0.6860896, 0.6578895, 0.45783395, 0.41847235, 0.20630272, 0.4953162, 0.01959337,
            0.8371248, 0.5716346, 0.18082424, 0.03656635, 0.75915194, 0.77819145, 0.18088074,
            0.97228986, 0.45446303, 0.15876009, 0.15172002, 0.21870646, 0.67578596, 0.17699589,
            0.16891658, 0.8514548, 0.8860516, 0.82196736, 0.29569438, 0.6795675, 0.5676109,
            0.51335657, 0.48570013, 0.05080688, 0.14092551, 0.35189822, 0.2716982, 0.43087652,
            0.8219524, 0.58699363, 0.18927561, 0.15438259, 0.48444232, 0.3548947, 0.13443872,
            0.05775462, 0.01398679, 0.3553907, 0.48720175, 0.39191842, 0.7353281, 0.9867899,
            0.39567924, 0.6681931, 0.8741793, 0.41219148, 0.43805563, 0.24787006, 0.4657539,
            0.85423166, 0.0098169, 0.03120668, 0.20878878, 0.54290944, 0.55167097, 0.4212191,
            0.76660496, 0.5203346, 0.55199236, 0.24225757, 0.926732, 0.29546982, 0.90794486,
            0.11640227, 0.303067,
        ],
    )
    .unwrap();

    let kernel25: Array4<f32> = Array::from_shape_vec(
        (3, 2, 3, 3),
        vec![
            0.60486084, 0.67949796, 0.26091522, 0.60724497, 0.814399, 0.1684874, 0.39451823,
            0.42586836, 0.31500933, 0.7739118, 0.26620805, 0.4912706, 0.5582184, 0.14920756,
            0.2643653, 0.33135027, 0.44614497, 0.70298517, 0.4382807, 0.8829611, 0.02333054,
            0.8527415, 0.9057288, 0.2235733, 0.4187059, 0.45508063, 0.9389992, 0.20756939,
            0.20021324, 0.47618693, 0.5130793, 0.5888296, 0.59889996, 0.712934, 0.8516371,
            0.85897654, 0.02912598, 0.49246776, 0.9397661, 0.63142025, 0.5599716, 0.44621915,
            0.24492879, 0.19181061, 0.10366015, 0.23688388, 0.49670485, 0.67701244, 0.45396152,
            0.42133403, 0.6850384, 0.85629207, 0.76669574, 0.8534153,
        ],
    )
    .unwrap();
    let conv_layer25 = ConvolutionLayer::new(kernel25, 1, Padding::Same);
    let target_output25: Array3<f32> = Array::from_shape_vec(
        (2, 10, 15),
        vec![
            4.7864757, 6.0074186, 5.1166916, 4.6071906, 4.486103, 4.7297397, 3.8581743, 3.8075638,
            3.6730137, 3.2830355, 3.2677262, 3.8251643, 3.5833874, 4.045479, 3.689021, 5.90996,
            7.8759947, 6.900096, 5.6760936, 5.6313114, 6.5000553, 6.0491147, 5.8742814, 6.3832803,
            4.966987, 5.5678844, 5.8373857, 5.8012233, 6.6335964, 4.491044, 4.7404156, 7.5677433,
            7.3875475, 5.567933, 5.465882, 6.4216843, 6.9371448, 7.4966154, 6.763228, 5.9666734,
            6.066965, 6.3729057, 6.1578674, 7.1244545, 4.087742, 3.6488683, 6.016833, 6.4569945,
            5.42863, 6.0172873, 6.654599, 6.4568176, 7.9089203, 7.58132, 7.0987453, 5.6703873,
            5.9747653, 5.9046073, 6.7287073, 4.4749184, 2.7916005, 5.320902, 5.7356505, 6.1454782,
            6.542013, 6.4450035, 7.3496943, 7.0784802, 6.9132414, 6.779422, 5.276737, 6.5297585,
            6.0471735, 6.3289986, 4.4310203, 3.4120226, 5.0772266, 5.1329417, 6.319902, 5.582979,
            5.453479, 5.947911, 6.051697, 6.798918, 5.971662, 5.933737, 6.392872, 7.444345,
            6.567186, 3.9467292, 3.469079, 5.106996, 5.6064253, 5.2604, 5.5791183, 5.3163366,
            5.688125, 6.214445, 6.670297, 6.4998837, 5.5459604, 5.6317887, 7.464881, 7.2075458,
            4.7798243, 4.4532537, 5.381784, 5.003136, 5.2950625, 5.583355, 5.891656, 6.8704166,
            7.7066255, 7.676087, 6.7810493, 5.4890122, 5.483977, 6.356794, 6.3882837, 4.450098,
            4.542044, 5.864, 5.612388, 6.4469337, 7.1258926, 7.286519, 7.219066, 8.19137, 8.337735,
            7.5410943, 6.0163317, 5.512096, 6.041706, 6.682586, 3.4252667, 2.9035213, 4.7450085,
            4.4446397, 4.7745595, 5.074689, 5.3112035, 5.195461, 5.165019, 4.954577, 5.4048743,
            4.203943, 4.7460814, 3.9374466, 3.8335586, 1.9786901, 2.971354, 5.2775273, 4.4420395,
            3.8096926, 3.4448547, 3.9075034, 3.6406517, 3.4123769, 2.8631527, 2.9001477, 2.7215734,
            2.9523993, 3.4324355, 3.3945632, 2.455567, 5.3337336, 9.105751, 7.2380753, 6.477147,
            6.6409774, 6.6670666, 6.301081, 5.987899, 6.0549774, 5.6937585, 5.028705, 5.615097,
            5.666501, 6.5327835, 4.7725143, 5.337924, 8.909392, 7.1285715, 6.5927467, 6.389791,
            6.8811474, 7.741357, 7.822374, 6.892968, 7.4417048, 6.4320784, 7.423565, 7.2466135,
            8.10744, 4.971936, 4.1325274, 6.883234, 6.313834, 6.508333, 5.9423757, 6.2664576,
            7.3854256, 7.9036856, 8.745586, 7.6405635, 6.5778832, 7.286953, 7.060715, 7.339901,
            4.5395784, 3.4127002, 6.3645573, 6.6145773, 6.694524, 6.8771954, 7.128271, 7.8167777,
            7.5112047, 8.203706, 7.0014677, 6.5117397, 6.5282817, 6.627939, 7.1049447, 5.0211267,
            2.9350529, 5.6861043, 5.722007, 6.833235, 6.2997913, 6.5258136, 7.245734, 7.2557855,
            8.044883, 6.686618, 7.51222, 7.24889, 8.266157, 7.4376307, 4.9856515, 3.6155896,
            5.8504786, 6.3902497, 7.0608573, 6.57414, 6.2708073, 6.0324745, 6.336353, 6.928045,
            6.968627, 6.508545, 6.4657745, 7.142244, 8.055067, 4.978879, 3.72388, 6.8401346,
            5.760446, 6.228422, 5.329477, 5.8271656, 7.075298, 7.3155084, 7.666792, 7.736702,
            6.3507633, 7.5221915, 6.884823, 7.5654316, 4.577767, 4.142361, 6.386664, 5.5387363,
            6.4930964, 6.505241, 7.253876, 7.583561, 8.826648, 9.032056, 8.448385, 5.940935,
            6.14272, 5.8736434, 7.15534, 4.1667256, 2.80136, 4.588922, 4.60149, 5.71818, 5.93729,
            6.856044, 6.691304, 6.779976, 6.464929, 6.6502724, 5.4207883, 5.7001724, 4.55393,
            5.302951, 2.9704883,
        ],
    )
    .unwrap();
    let current_output25: Array3<f32> = conv_layer25.convolve(&test_input25);

    assert!(
        arr_allclose(&current_output25, &target_output25),
        "{:?} was not equal to {:?}",
        current_output25,
        target_output25
    );

    let test_input26 = Array::from_shape_vec(
        (3, 10, 15),
        vec![
            0.09939361, 0.82822984, 0.0080629, 0.6076978, 0.6677539, 0.97007126, 0.6953572,
            0.23404987, 0.7702405, 0.4813676, 0.6708753, 0.9848203, 0.11385565, 0.8758087,
            0.7094253, 0.9717235, 0.75492734, 0.5238351, 0.39455086, 0.31395626, 0.9446217,
            0.89547807, 0.2690143, 0.7254593, 0.50680614, 0.67623514, 0.03957006, 0.55472255,
            0.6921552, 0.50038505, 0.52786833, 0.31035745, 0.81599206, 0.6554322, 0.03603773,
            0.5390226, 0.13498625, 0.9852127, 0.16336593, 0.99620885, 0.19921382, 0.10756692,
            0.44649956, 0.9498278, 0.7139447, 0.35815725, 0.02897831, 0.9721884, 0.0504973,
            0.86107606, 0.0762892, 0.7412536, 0.00293741, 0.5842812, 0.80308986, 0.35674444,
            0.5351153, 0.7371504, 0.4191397, 0.79290223, 0.5041107, 0.55641156, 0.04526648,
            0.7861993, 0.6335109, 0.24217102, 0.909113, 0.80903274, 0.83993906, 0.81976044,
            0.7214805, 0.4007092, 0.57626015, 0.95258534, 0.49337667, 0.10905766, 0.94602233,
            0.3964408, 0.50362575, 0.07761287, 0.9322157, 0.31622592, 0.17759776, 0.6427077,
            0.1279444, 0.15542968, 0.97430724, 0.6300257, 0.08167998, 0.75798357, 0.09109604,
            0.76193047, 0.753834, 0.99397695, 0.34140688, 0.5777924, 0.45099398, 0.34813985,
            0.49516845, 0.39270082, 0.56429654, 0.26018232, 0.8857335, 0.69079584, 0.55985487,
            0.84918076, 0.651287, 0.31415004, 0.78383875, 0.24776831, 0.09454908, 0.72278243,
            0.9236739, 0.3642707, 0.08929764, 0.09322322, 0.8198366, 0.618867, 0.8466656,
            0.10928579, 0.07829133, 0.38427126, 0.9209781, 0.05534032, 0.33815342, 0.21587123,
            0.12900938, 0.838805, 0.70533997, 0.33450192, 0.38096663, 0.80549437, 0.5303596,
            0.28034258, 0.09335517, 0.9028811, 0.78340423, 0.99226147, 0.01493673, 0.46203193,
            0.7521283, 0.6052495, 0.06838121, 0.6306182, 0.68300223, 0.1979319, 0.9812565,
            0.35303903, 0.01351135, 0.13854095, 0.8103337, 0.02116127, 0.74512017, 0.52984565,
            0.99872667, 0.5559971, 0.15128084, 0.7154567, 0.5549817, 0.43051603, 0.23737086,
            0.6562062, 0.28059772, 0.39736098, 0.4673331, 0.00891489, 0.33884785, 0.6193884,
            0.18607458, 0.4431885, 0.01808522, 0.11024449, 0.5957428, 0.257344, 0.57106304,
            0.996507, 0.02719511, 0.34088475, 0.31276718, 0.19508527, 0.51521796, 0.55529255,
            0.534297, 0.4551737, 0.03822044, 0.6844804, 0.538391, 0.19699456, 0.41928288,
            0.12089491, 0.15296015, 0.34004238, 0.08433874, 0.59906757, 0.32895055, 0.40649992,
            0.1499156, 0.2017956, 0.29841897, 0.9981424, 0.42835027, 0.58305657, 0.8831124,
            0.58563495, 0.10433917, 0.49506864, 0.40216792, 0.66390544, 0.44003266, 0.67188007,
            0.731435, 0.22884977, 0.45354384, 0.29792643, 0.5272041, 0.7485446, 0.28624305,
            0.9282255, 0.22695023, 0.43092483, 0.95730776, 0.9923889, 0.1289603, 0.71256125,
            0.9421077, 0.22165331, 0.8957009, 0.01525365, 0.46406323, 0.38429326, 0.29330772,
            0.68809766, 0.82745576, 0.3258292, 0.9536923, 0.92134255, 0.80696934, 0.17606957,
            0.53414553, 0.8541269, 0.55071187, 0.25444788, 0.6592291, 0.53072673, 0.77232087,
            0.41289273, 0.10455144, 0.6597538, 0.91647804, 0.9571631, 0.5645497, 0.86060405,
            0.55495816, 0.99726844, 0.39086932, 0.13288063, 0.43203548, 0.02057635, 0.44437656,
            0.00600106, 0.86474377, 0.96837336, 0.52825713, 0.5756082, 0.5063528, 0.616231,
            0.03237247, 0.7064923, 0.24617034, 0.19121489, 0.8937895, 0.5221176, 0.920404,
            0.45497388, 0.84028614, 0.69197804, 0.92198044, 0.00114695, 0.6866234, 0.7426373,
            0.16886179, 0.28282914, 0.7157508, 0.9215918, 0.6186801, 0.02047214, 0.46281454,
            0.6887593, 0.01173675, 0.59077984, 0.3787974, 0.13223803, 0.20979705, 0.2962676,
            0.82381725, 0.62355626, 0.19442007, 0.15597425, 0.44047666, 0.02631165, 0.79910344,
            0.68305826, 0.13235328, 0.36176983, 0.98954594, 0.10666531, 0.8560913, 0.24844927,
            0.94089866, 0.611323, 0.2604722, 0.62072504, 0.52674735, 0.04456268, 0.12730101,
            0.5831064, 0.7618813, 0.99088573, 0.3498497, 0.9893213, 0.9229839, 0.968473, 0.3473291,
            0.54743403, 0.01200672, 0.04459461, 0.11107332, 0.79086024, 0.427044, 0.28423595,
            0.5638385, 0.55078715, 0.5209626, 0.9690265, 0.40990627, 0.76069826, 0.19991861,
            0.05412404, 0.96710503, 0.9513363, 0.08358769, 0.18445559, 0.15507828, 0.55250907,
            0.7522076, 0.41979295, 0.90154666, 0.06932273, 0.98834366, 0.9326744, 0.95973784,
            0.01301026, 0.94750315, 0.19795854, 0.28899273, 0.23282553, 0.28506085, 0.8682599,
            0.8220057, 0.13914691, 0.97130793, 0.03333057, 0.8087165, 0.8024787, 0.3590328,
            0.3778757, 0.29034188, 0.13700394, 0.39205238, 0.24718882, 0.48470175, 0.7902731,
            0.5366342, 0.15042725, 0.83978635, 0.4692924, 0.90220386, 0.14340296, 0.15322222,
            0.34881374, 0.6232285, 0.83594126, 0.16714397, 0.4264953, 0.04108659, 0.89079213,
            0.67103004, 0.61967033, 0.67488444, 0.6248762, 0.07340664, 0.29599693, 0.9083485,
            0.06401163, 0.25583467, 0.43448448, 0.12822089, 0.16394943, 0.70240456, 0.7238483,
            0.549147, 0.33882853, 0.30244493, 0.7881106, 0.18323863, 0.9491711, 0.49022144,
            0.52859294, 0.44141734, 0.6618432, 0.13727196, 0.67812914, 0.7189277, 0.41655356,
            0.22713542, 0.18293881, 0.19180061, 0.53551257, 0.17122072, 0.2234552, 0.44359767,
            0.71808743, 0.22415204, 0.39959106, 0.2637363, 0.9748111, 0.66883224, 0.2623765,
            0.8298644, 0.47769547, 0.64253336, 0.4279932, 0.05377042, 0.8601327, 0.49268875,
            0.61688894, 0.5893039, 0.61891294, 0.22768961, 0.6413237, 0.64964074, 0.28283465,
            0.42210525, 0.9995373, 0.3990037, 0.3180952, 0.26837257, 0.9196311, 0.7323518,
            0.6665136,
        ],
    )
    .unwrap();

    let kernel26: Array4<f32> = Array::from_shape_vec(
        (3, 2, 3, 3),
        vec![
            0.3261171, 0.19029295, 0.3486188, 0.6853804, 0.73598146, 0.53857046, 0.808091,
            0.5484634, 0.1735309, 0.08409429, 0.19677189, 0.31993368, 0.35334954, 0.93418276,
            0.7082613, 0.548942, 0.8944676, 0.9037912, 0.09672975, 0.7584863, 0.50249976,
            0.6728813, 0.9159213, 0.34614602, 0.3804167, 0.17313573, 0.04152302, 0.9053351,
            0.13061608, 0.9456902, 0.08379908, 0.9247798, 0.48921642, 0.9617579, 0.37667143,
            0.7197943, 0.53935903, 0.9792834, 0.86110634, 0.8655558, 0.29825523, 0.10902967,
            0.8346855, 0.7259802, 0.21941453, 0.9845792, 0.46687177, 0.35792756, 0.8629179,
            0.5301964, 0.7178425, 0.50557286, 0.14295319, 0.49131492,
        ],
    )
    .unwrap();
    let conv_layer26 = ConvolutionLayer::new(kernel26, 1, Padding::Same);
    let target_output26: Array3<f32> = Array::from_shape_vec(
        (2, 10, 15),
        vec![
            3.6794064, 4.6325946, 5.306613, 5.8881335, 6.0874515, 6.4940667, 5.1573906, 5.7390738,
            4.693923, 4.221369, 4.395188, 4.257886, 3.9773388, 4.3167663, 2.8899517, 5.819928,
            7.443998, 6.7850018, 7.6909814, 7.635623, 7.3132205, 6.6492553, 6.4788775, 7.088275,
            7.0452304, 6.0649548, 4.9362144, 5.1112566, 5.910407, 4.129926, 5.7221556, 7.6705484,
            7.212863, 6.943693, 8.38603, 8.200174, 6.693089, 6.96492, 7.0470686, 4.8562555,
            3.9008677, 4.6581793, 6.9355474, 7.7597966, 4.443443, 5.1954956, 6.056039, 7.00564,
            7.6337843, 7.5777683, 6.361833, 6.1992507, 6.6743646, 7.0318985, 5.9544973, 5.8291445,
            7.0156145, 7.577445, 7.566672, 5.464204, 4.829586, 6.588106, 6.389175, 6.421148,
            7.109937, 6.797574, 7.2718596, 7.5048976, 6.0860987, 6.8752813, 8.194947, 8.73071,
            7.749804, 8.362511, 5.4581995, 5.067696, 5.7616415, 6.8701696, 6.325857, 6.1899014,
            6.392373, 5.9827447, 6.1729193, 6.772567, 8.561909, 8.573105, 7.935008, 7.312464,
            8.116693, 5.1033354, 5.550611, 7.2835298, 6.4849067, 5.9457026, 6.4636106, 6.40084,
            6.461705, 7.3968277, 7.028686, 6.574528, 6.9046884, 6.824587, 7.597798, 7.2252297,
            3.7805164, 5.0397205, 7.205554, 7.0182276, 5.9778, 5.6918187, 6.9864664, 7.894015,
            7.2896786, 7.0515733, 6.876199, 5.830313, 6.1246943, 7.314614, 6.595303, 3.995058,
            5.932016, 7.329115, 7.1719165, 6.208133, 6.177584, 7.320577, 6.8646803, 6.997297,
            6.7488337, 6.3216944, 5.742066, 5.9766054, 7.3529935, 6.4404573, 3.3517773, 3.8539252,
            5.6680512, 4.0317755, 3.658733, 4.331976, 4.4767203, 3.7046375, 4.6496944, 4.8197947,
            4.658201, 4.557923, 4.24165, 4.2358923, 3.4591148, 1.356089, 3.7347617, 5.032345,
            4.4527283, 5.663269, 5.5163145, 6.7674193, 4.8324523, 5.186926, 4.9366236, 5.0003815,
            4.0411735, 5.5243206, 3.8533387, 3.8628757, 2.9358137, 5.0119925, 8.639844, 8.440465,
            8.3790045, 8.929939, 9.000843, 7.906727, 8.438929, 7.2321854, 7.056234, 6.9638004,
            5.4037333, 6.6082973, 7.0340824, 5.279406, 5.326758, 7.8041253, 8.213109, 9.039211,
            7.5537863, 7.97869, 8.335184, 7.48855, 7.475025, 7.6750216, 5.4031744, 6.005894,
            6.0927277, 8.181408, 5.5077853, 4.3985643, 7.2997317, 7.990224, 7.600175, 9.096085,
            6.6421666, 7.86284, 6.7925086, 7.7598453, 6.86802, 7.3542805, 6.317421, 8.304089,
            8.514658, 6.613857, 5.10452, 6.034865, 6.9956045, 7.230487, 7.8280315, 8.4732895,
            7.8917828, 7.925196, 7.6115174, 8.231228, 8.995806, 9.334794, 8.726647, 9.286705,
            6.315541, 3.861196, 8.348106, 6.57611, 6.9282055, 7.3585563, 7.0192857, 7.895438,
            8.026831, 8.239221, 9.36866, 9.7345085, 9.228202, 9.835494, 8.536596, 6.6898427,
            4.820454, 6.418142, 8.253615, 6.4487925, 7.143048, 7.166193, 7.574305, 7.848833,
            7.9014926, 8.331526, 7.2087884, 8.402327, 8.054854, 8.153674, 5.1192, 4.772086,
            8.665636, 7.5602984, 8.959222, 7.2751093, 7.762882, 7.7727103, 9.317281, 8.20293,
            7.5265136, 7.1456037, 6.753013, 9.125645, 8.251826, 5.2422686, 5.433697, 7.5691214,
            7.571012, 6.837962, 6.884189, 7.438548, 8.015025, 8.70797, 8.127743, 7.536882,
            5.8821497, 7.2159605, 7.897316, 7.090342, 4.4405546, 3.559827, 6.586197, 6.2475066,
            5.4058356, 4.863215, 5.871809, 4.752628, 5.652446, 5.537176, 6.2002554, 5.196352,
            5.5201774, 5.986659, 5.0582166, 2.984207,
        ],
    )
    .unwrap();
    let current_output26: Array3<f32> = conv_layer26.convolve(&test_input26);

    assert!(
        arr_allclose(&current_output26, &target_output26),
        "{:?} was not equal to {:?}",
        current_output26,
        target_output26
    );

    let test_input27 = Array::from_shape_vec(
        (3, 10, 15),
        vec![
            0.69113374, 0.5921124, 0.4342134, 0.9615546, 0.34359774, 0.8039146, 0.11799753,
            0.26661384, 0.15955769, 0.24098068, 0.04284242, 0.72233695, 0.5201091, 0.8670922,
            0.22291587, 0.01988209, 0.19314824, 0.6377711, 0.93071467, 0.23294576, 0.33839074,
            0.21783541, 0.541387, 0.78856933, 0.6345836, 0.9847154, 0.7037668, 0.5997897,
            0.48499247, 0.524876, 0.3821681, 0.09907741, 0.30532846, 0.08845946, 0.5006215,
            0.2398776, 0.6696186, 0.5578283, 0.9853742, 0.30976853, 0.1141604, 0.94015056,
            0.86896497, 0.12097415, 0.7002529, 0.16485341, 0.46633622, 0.67187446, 0.22297226,
            0.20250201, 0.8218346, 0.61939573, 0.53496593, 0.92597115, 0.787276, 0.7033518,
            0.12606671, 0.06126022, 0.68214494, 0.6032527, 0.6562995, 0.49284568, 0.34271526,
            0.9216594, 0.6940483, 0.47624904, 0.2457454, 0.5552098, 0.32579103, 0.48232093,
            0.6059211, 0.6722847, 0.6767117, 0.378767, 0.3613456, 0.7042522, 0.2238173, 0.74746865,
            0.36677414, 0.2613474, 0.28857794, 0.48979157, 0.67423475, 0.899909, 0.27360517,
            0.3954447, 0.2689032, 0.5869422, 0.4054549, 0.7236747, 0.27611768, 0.6796681,
            0.5965492, 0.26442292, 0.72399604, 0.43040073, 0.20080982, 0.28246298, 0.6599278,
            0.91767025, 0.7645698, 0.5936739, 0.36463642, 0.96831554, 0.21878308, 0.11189529,
            0.5395196, 0.29627025, 0.11818971, 0.10945795, 0.6594448, 0.13544263, 0.499514,
            0.4529453, 0.7131112, 0.07966255, 0.29142585, 0.68724895, 0.04232477, 0.13420771,
            0.33155695, 0.18794546, 0.46529654, 0.69078076, 0.02903101, 0.8734327, 0.80222553,
            0.87264, 0.45615637, 0.5333259, 0.2464628, 0.38038793, 0.32190928, 0.21625711,
            0.5803451, 0.77878344, 0.5063043, 0.7617363, 0.08551037, 0.49260572, 0.83634585,
            0.85251176, 0.26562026, 0.11365525, 0.29192793, 0.5136638, 0.52510726, 0.9699456,
            0.38765427, 0.00939824, 0.45361686, 0.995697, 0.92569697, 0.11329727, 0.26731393,
            0.503521, 0.8463833, 0.9085028, 0.3704941, 0.9285037, 0.12043773, 0.67069006,
            0.8701852, 0.46525767, 0.6889376, 0.46818328, 0.5472589, 0.6721221, 0.90702206,
            0.09271611, 0.28051263, 0.18856683, 0.93896073, 0.90126437, 0.45777324, 0.82003325,
            0.74227345, 0.35982916, 0.26917773, 0.20851454, 0.02530834, 0.20598832, 0.9827812,
            0.9133796, 0.15525481, 0.5416497, 0.9737615, 0.05620801, 0.5500161, 0.07101188,
            0.06457912, 0.01951568, 0.7752038, 0.58928204, 0.4893268, 0.37889206, 0.08488933,
            0.6984468, 0.13838367, 0.45322236, 0.2854609, 0.91733086, 0.7673163, 0.47535938,
            0.430336, 0.4033134, 0.22314279, 0.9198305, 0.15463823, 0.52706516, 0.5380625,
            0.67769825, 0.29269645, 0.5224842, 0.9161704, 0.8363249, 0.9655628, 0.6265972,
            0.62550986, 0.10147168, 0.37210664, 0.38499138, 0.57677186, 0.04776173, 0.13979574,
            0.34796357, 0.9293805, 0.02366208, 0.61658883, 0.4602623, 0.80627346, 0.68917644,
            0.03279204, 0.61764413, 0.84899485, 0.07298613, 0.5107428, 0.15994577, 0.23598829,
            0.42557174, 0.54054207, 0.9973023, 0.7787232, 0.34836137, 0.25666964, 0.21393713,
            0.13617612, 0.29511, 0.47935697, 0.6027421, 0.26824012, 0.09325973, 0.9999695,
            0.66342247, 0.30268312, 0.4703405, 0.5264845, 0.41914597, 0.93084306, 0.3860588,
            0.3112818, 0.5403318, 0.7544129, 0.23385784, 0.4532712, 0.01928642, 0.31058535,
            0.9231324, 0.5111338, 0.85251105, 0.22631837, 0.6079196, 0.8465506, 0.15559341,
            0.47655347, 0.9317292, 0.73171294, 0.4252797, 0.8793211, 0.8085952, 0.8205566,
            0.8826353, 0.87073565, 0.9907962, 0.2437348, 0.04408429, 0.9780975, 0.83518285,
            0.442418, 0.9607086, 0.09084356, 0.68804723, 0.78929913, 0.7980087, 0.09648526,
            0.31804043, 0.9619224, 0.99013287, 0.8503088, 0.7815283, 0.39002457, 0.42641845,
            0.6908657, 0.8910958, 0.29640055, 0.17727828, 0.2089261, 0.49979007, 0.5642379,
            0.7030672, 0.27845028, 0.94389766, 0.20636925, 0.6667202, 0.76393694, 0.48988733,
            0.7356281, 0.5468075, 0.6818526, 0.6987177, 0.40215194, 0.33184996, 0.23738323,
            0.42945445, 0.64908034, 0.5833552, 0.97156674, 0.30805972, 0.8751756, 0.29061684,
            0.32266703, 0.7455838, 0.39886904, 0.45468414, 0.77469295, 0.7965488, 0.7646959,
            0.2791718, 0.26557565, 0.51671654, 0.14463307, 0.49024066, 0.5644179, 0.11350685,
            0.04281154, 0.57114464, 0.39833462, 0.2126663, 0.1499708, 0.73064125, 0.4591814,
            0.0285126, 0.9280576, 0.72670996, 0.34472197, 0.18288209, 0.8307759, 0.43013144,
            0.35543966, 0.7593779, 0.45248675, 0.78150374, 0.98412323, 0.8635111, 0.6667131,
            0.5340124, 0.13950849, 0.5753187, 0.22581473, 0.31055018, 0.3559486, 0.94544613,
            0.8794452, 0.2699716, 0.45676422, 0.20421512, 0.9916458, 0.83325416, 0.89352185,
            0.35738185, 0.944354, 0.84149826, 0.31955966, 0.0488622, 0.17070445, 0.6034462,
            0.36290234, 0.8472129, 0.49671844, 0.19694914, 0.80763394, 0.21147081, 0.22211874,
            0.43805566, 0.43717724, 0.89430046, 0.9283719, 0.8128758, 0.7373128, 0.42566535,
            0.44624192, 0.23623948, 0.8063544, 0.26903114, 0.20805733, 0.03382581, 0.48451242,
            0.56668675, 0.22873266, 0.299916, 0.9879018, 0.10301294, 0.24334253, 0.44374004,
            0.6423686, 0.8110261, 0.78476405, 0.6695578, 0.93565845, 0.371802, 0.9326136,
            0.8960472, 0.2305824, 0.10865664, 0.7400156, 0.52640325, 0.5962613, 0.49422848,
            0.8606839, 0.99988186, 0.56603134, 0.48357183, 0.35112807, 0.57117814, 0.8400437,
            0.13524966, 0.9466828, 0.39311504, 0.9012402, 0.75557137, 0.5037727, 0.4219725,
            0.47999805, 0.22245023, 0.7799652, 0.29572076, 0.7884574, 0.87387353, 0.88842475,
            0.46210247,
        ],
    )
    .unwrap();

    let kernel27: Array4<f32> = Array::from_shape_vec(
        (3, 2, 3, 3),
        vec![
            0.9100606, 0.6943571, 0.28570879, 0.49740204, 0.7628443, 0.69361484, 0.16655016,
            0.26878476, 0.5833351, 0.987483, 0.6433668, 0.26489744, 0.33358738, 0.00685212,
            0.658877, 0.97735417, 0.72935826, 0.9653691, 0.4197044, 0.03449651, 0.8037367,
            0.88689566, 0.19757593, 0.33775258, 0.9949134, 0.35532916, 0.9893505, 0.08079711,
            0.9904894, 0.34009922, 0.9768461, 0.44599372, 0.09269939, 0.15401787, 0.9979789,
            0.43281078, 0.7613341, 0.94856584, 0.74674773, 0.33150923, 0.81601155, 0.5795955,
            0.6268428, 0.08034612, 0.86004764, 0.23814383, 0.23848392, 0.10764247, 0.15689476,
            0.7057333, 0.01841728, 0.17239508, 0.5349574, 0.27755457,
        ],
    )
    .unwrap();
    let conv_layer27 = ConvolutionLayer::new(kernel27, 1, Padding::Same);
    let target_output27: Array3<f32> = Array::from_shape_vec(
        (2, 10, 15),
        vec![
            3.7142434, 5.9984183, 6.722083, 6.2414856, 5.7473702, 4.055399, 4.52469, 4.3924804,
            5.9496517, 5.7512026, 6.4299884, 6.5277586, 6.5415964, 5.700113, 3.7303107, 4.3841205,
            7.714814, 8.518843, 8.3139925, 8.299033, 7.134356, 8.014311, 8.331535, 8.079031,
            7.1832314, 8.797609, 8.3245945, 8.499322, 7.770988, 4.655586, 3.7203999, 7.2095428,
            7.120041, 6.8856974, 7.6613584, 7.676467, 7.5156007, 9.17074, 8.987585, 8.335466,
            7.197507, 7.996414, 8.305711, 7.276189, 4.2969456, 4.1638374, 7.5076685, 8.431195,
            8.56056, 8.2841835, 8.932391, 7.8855934, 8.912135, 7.269654, 7.0064173, 6.1522775,
            8.003171, 7.141166, 7.672926, 4.0692983, 4.7615566, 7.978989, 8.901883, 8.807753,
            8.229186, 8.965328, 8.991142, 8.463065, 6.925766, 6.6407876, 7.129466, 8.01098,
            7.510571, 7.508039, 3.758792, 5.8616953, 8.12472, 8.969928, 8.753275, 9.114414,
            9.110369, 8.735336, 8.508829, 8.111761, 7.06065, 6.938369, 7.396772, 7.4772286,
            7.8089275, 3.5000467, 5.3888707, 7.0270224, 8.089737, 6.1230516, 8.321592, 7.5205846,
            7.409267, 7.364904, 8.264304, 7.5302067, 7.517067, 7.895941, 7.7722316, 7.858809,
            4.303751, 4.9020195, 7.760643, 7.8085394, 6.185433, 6.6355343, 7.971264, 8.574781,
            7.7814646, 8.757596, 8.622045, 7.9712043, 8.537967, 7.7626123, 8.950735, 5.4470344,
            5.3682437, 7.6378675, 8.216578, 7.6559362, 8.493913, 8.755981, 8.851613, 7.6909575,
            8.3193865, 7.9670973, 8.400109, 8.884012, 9.977414, 9.147931, 5.6254387, 3.5885844,
            5.85758, 5.2948756, 5.773697, 4.8661866, 6.313632, 6.310482, 6.2769732, 5.023402,
            5.590639, 6.37778, 6.556562, 7.351182, 6.226402, 3.5173888, 2.7228513, 4.284475,
            4.642581, 4.012977, 3.2684114, 2.5800269, 3.4615784, 3.869753, 4.740278, 3.9931192,
            4.517381, 4.787601, 4.0094333, 3.684474, 2.4023933, 3.88004, 6.1627398, 7.7379,
            6.6128383, 6.0042596, 4.961781, 6.8166437, 6.337687, 5.869964, 5.578517, 5.851444,
            6.770857, 7.1003056, 6.4290757, 4.334681, 2.916336, 5.7464075, 6.673051, 6.0035005,
            5.884285, 5.8584003, 5.7746296, 7.4361076, 7.2097564, 7.224998, 6.198631, 6.597346,
            6.9346633, 6.094165, 3.3264802, 3.398516, 5.2575827, 5.4841127, 6.5330396, 6.1961265,
            6.779719, 7.5935698, 7.317331, 6.2253194, 5.269534, 4.932871, 6.67803, 6.32704,
            5.430869, 3.2962756, 4.232965, 6.3892956, 6.1560493, 5.8713684, 6.536381, 7.044107,
            7.442655, 7.4045873, 6.5295925, 6.4879518, 5.1024246, 5.9042816, 5.547182, 4.9890747,
            4.0176783, 5.1285024, 7.539028, 7.048782, 7.237825, 7.340895, 6.8089156, 5.68457,
            5.7769794, 6.600917, 6.0170083, 5.855536, 5.8814263, 7.095579, 5.7903256, 2.7418637,
            4.786679, 6.865117, 5.426542, 5.753682, 5.222962, 5.747658, 6.297121, 6.28575,
            6.346793, 6.026575, 4.3771696, 5.9092607, 6.6649523, 5.3308854, 3.9822702, 4.139911,
            6.1503696, 7.1182723, 5.158349, 5.363415, 6.7106767, 6.736643, 5.7463145, 7.2776055,
            6.9140606, 6.7855625, 6.390961, 7.289609, 7.6611047, 3.8764281, 4.2009287, 6.8000994,
            5.5732217, 5.0920863, 7.2314544, 6.140043, 6.670936, 6.295885, 7.0946507, 6.0370245,
            6.013041, 7.1820555, 7.8323345, 6.4998617, 3.9975877, 2.791712, 5.28402, 4.417582,
            4.4679823, 4.270708, 5.1397443, 6.1446476, 5.4897394, 4.7371984, 4.532371, 4.843129,
            5.4667144, 5.2514358, 5.5816255, 2.9373817,
        ],
    )
    .unwrap();
    let current_output27: Array3<f32> = conv_layer27.convolve(&test_input27);

    assert!(
        arr_allclose(&current_output27, &target_output27),
        "{:?} was not equal to {:?}",
        current_output27,
        target_output27
    );

    let test_input28 = Array::from_shape_vec(
        (3, 10, 15),
        vec![
            0.5322748, 0.07772017, 0.11139348, 0.8153644, 0.89346814, 0.08395886, 0.40988755,
            0.9683522, 0.71043, 0.24133632, 0.66086763, 0.45239362, 0.7648658, 0.7839022,
            0.11525997, 0.11204641, 0.9365747, 0.28355595, 0.94687665, 0.03193681, 0.95543647,
            0.31404087, 0.45478263, 0.4682662, 0.14600264, 0.11851353, 0.6869693, 0.8751561,
            0.24598803, 0.51128346, 0.21171108, 0.07832938, 0.5420683, 0.16797651, 0.97511005,
            0.46346098, 0.9251605, 0.8355728, 0.9399698, 0.63095194, 0.01171468, 0.31194556,
            0.8929391, 0.8565048, 0.4575972, 0.12795849, 0.10912379, 0.02952798, 0.10989773,
            0.4077279, 0.05740095, 0.90538734, 0.35906726, 0.558365, 0.3003097, 0.26236704,
            0.63975835, 0.6486522, 0.65862477, 0.799062, 0.69226533, 0.11245026, 0.44999343,
            0.19131283, 0.5685218, 0.58138865, 0.8676397, 0.6949583, 0.9890714, 0.9169408,
            0.6733708, 0.11409238, 0.9313712, 0.8991999, 0.4750676, 0.14831749, 0.6030878,
            0.1869184, 0.89142025, 0.73000854, 0.8760484, 0.10900346, 0.48400247, 0.0823018,
            0.06097801, 0.19118872, 0.33851793, 0.8297556, 0.25460038, 0.6896478, 0.46926925,
            0.9184611, 0.61307687, 0.6560135, 0.2807583, 0.12817004, 0.35788414, 0.73211795,
            0.766394, 0.8459047, 0.6683304, 0.87622136, 0.6872295, 0.33361897, 0.32000798,
            0.79336315, 0.51849383, 0.38584012, 0.69625896, 0.6791682, 0.20234333, 0.6032861,
            0.48042777, 0.29644713, 0.21245298, 0.6937536, 0.08710819, 0.7783868, 0.9167911,
            0.5954896, 0.33385372, 0.6801258, 0.89744276, 0.18934485, 0.0564688, 0.82598114,
            0.98988926, 0.7848688, 0.3775057, 0.835442, 0.3418887, 0.80864924, 0.8285267,
            0.9124181, 0.28085634, 0.48125055, 0.07043128, 0.47305906, 0.21471797, 0.37207896,
            0.10534421, 0.6173871, 0.49574846, 0.8706143, 0.62692714, 0.12505583, 0.32882455,
            0.13899311, 0.3103582, 0.88731766, 0.09477642, 0.6096313, 0.97063476, 0.33909172,
            0.24199934, 0.32436553, 0.50521874, 0.40645203, 0.72868264, 0.1845745, 0.67775714,
            0.80771196, 0.20815027, 0.76091385, 0.4281172, 0.04814293, 0.2477421, 0.7363536,
            0.82568175, 0.23572317, 0.8921248, 0.00548277, 0.49046424, 0.6364155, 0.9520912,
            0.5670339, 0.6343222, 0.43334082, 0.30917186, 0.22897069, 0.4161656, 0.06782987,
            0.68388855, 0.13053188, 0.19831854, 0.2792772, 0.82981783, 0.38844034, 0.6897695,
            0.43391317, 0.23881091, 0.4751435, 0.1526219, 0.7832937, 0.6972274, 0.76765394,
            0.48872954, 0.97543496, 0.8414392, 0.5716796, 0.5746593, 0.22662647, 0.72878736,
            0.8178856, 0.75768614, 0.44170135, 0.74363214, 0.03670884, 0.54763687, 0.20077299,
            0.569372, 0.13181128, 0.1308109, 0.4016911, 0.02235833, 0.55760676, 0.83430797,
            0.360836, 0.5673803, 0.9199618, 0.7916734, 0.33047372, 0.5523309, 0.7768597,
            0.49729654, 0.60879946, 0.85824955, 0.18380235, 0.8484274, 0.9645565, 0.12606913,
            0.62333465, 0.40896285, 0.6054057, 0.72344357, 0.6434178, 0.35723293, 0.93422616,
            0.2303441, 0.89859825, 0.4833327, 0.8840179, 0.7071074, 0.38079956, 0.89847404,
            0.76911914, 0.69664335, 0.9301381, 0.5279102, 0.6375929, 0.41758484, 0.05990019,
            0.05685853, 0.2730421, 0.86265, 0.8684104, 0.48180395, 0.6010754, 0.88915735,
            0.63210744, 0.07892385, 0.7639226, 0.6205975, 0.3002219, 0.89278924, 0.9059564,
            0.22659945, 0.14760193, 0.00599372, 0.30542406, 0.72884977, 0.8716085, 0.50342596,
            0.41313493, 0.8858185, 0.6434107, 0.457201, 0.5369807, 0.17925061, 0.61535144,
            0.64973146, 0.41555944, 0.61887467, 0.17343594, 0.544464, 0.19735774, 0.6933606,
            0.5880696, 0.80442405, 0.22769123, 0.53898126, 0.87782377, 0.3336502, 0.02226985,
            0.09958417, 0.27681005, 0.18543234, 0.21413611, 0.26165754, 0.027802, 0.9319044,
            0.92774296, 0.18005316, 0.81092876, 0.6219011, 0.7795068, 0.727294, 0.5608989,
            0.5227581, 0.16359355, 0.11108088, 0.88981736, 0.20012106, 0.7049294, 0.54065806,
            0.43730915, 0.60061646, 0.7395392, 0.7470405, 0.68801785, 0.95084524, 0.81441253,
            0.09777608, 0.89484024, 0.82783866, 0.06093569, 0.91676915, 0.46885744, 0.43228298,
            0.4377543, 0.16224979, 0.06134897, 0.2022184, 0.07522171, 0.7521909, 0.03596852,
            0.28626588, 0.75235975, 0.64913374, 0.92554736, 0.6520992, 0.83952224, 0.42260578,
            0.20702457, 0.30891684, 0.2664503, 0.9631269, 0.31632707, 0.41035688, 0.83820975,
            0.8525341, 0.94491214, 0.3128124, 0.94421536, 0.29261506, 0.43404636, 0.16094153,
            0.66423815, 0.06268399, 0.9579144, 0.7502819, 0.09143817, 0.5871392, 0.09202226,
            0.05626365, 0.9499455, 0.29447657, 0.79507726, 0.7507363, 0.89040357, 0.25231564,
            0.70364726, 0.9338168, 0.16046774, 0.06850108, 0.14086206, 0.18575045, 0.94590175,
            0.778617, 0.01911113, 0.3645535, 0.18393157, 0.711382, 0.29766196, 0.9409139,
            0.66175574, 0.06250098, 0.8391969, 0.1826374, 0.27238533, 0.66940516, 0.02453929,
            0.21670069, 0.7854602, 0.2715362, 0.31696305, 0.45880696, 0.12966864, 0.9414358,
            0.5301901, 0.6730583, 0.19911295, 0.61133265, 0.9958221, 0.8324337, 0.81940347,
            0.52347237, 0.30397218, 0.23559988, 0.7169752, 0.83921856, 0.00453156, 0.07645657,
            0.6461333, 0.31977177, 0.44444507, 0.51352835, 0.82848716, 0.12873596, 0.19493581,
            0.12292414, 0.52158403, 0.06434184, 0.2047097, 0.32419515, 0.11837589, 0.95561635,
            0.8962471, 0.7274973, 0.8625563, 0.16951792, 0.89949924, 0.30796447, 0.48415482,
            0.50550425, 0.24823008, 0.4232015, 0.24034186, 0.5031169, 0.2196024, 0.4342684,
            0.98074585, 0.94563127, 0.44097564, 0.03213529, 0.49693355, 0.6025867, 0.2574467,
            0.45553604, 0.44379726,
        ],
    )
    .unwrap();

    let kernel28: Array4<f32> = Array::from_shape_vec(
        (3, 2, 5, 5),
        vec![
            0.9732424, 0.3627867, 0.2487736, 0.21001962, 0.91017437, 0.39797536, 0.26517463,
            0.41195875, 0.38203195, 0.0038282, 0.68331534, 0.45850393, 0.08282983, 0.7426654,
            0.7270585, 0.7993262, 0.18561168, 0.73794276, 0.13075382, 0.92822397, 0.64137435,
            0.43831322, 0.28829068, 0.4976225, 0.2610342, 0.17956546, 0.9744765, 0.5678443,
            0.12135573, 0.63540924, 0.03319374, 0.29163483, 0.8615789, 0.13130435, 0.4782706,
            0.47632742, 0.84865195, 0.28834382, 0.99329984, 0.23911464, 0.05297824, 0.39004716,
            0.4614755, 0.71394044, 0.36967713, 0.72813416, 0.32832128, 0.7320835, 0.8497422,
            0.4687296, 0.5392427, 0.0656543, 0.10209152, 0.1913664, 0.26282084, 0.36334252,
            0.24959058, 0.68387175, 0.02750501, 0.24431834, 0.15333544, 0.79784447, 0.98453826,
            0.3191993, 0.7073291, 0.6451119, 0.6700582, 0.6492628, 0.6315665, 0.00915827,
            0.5234909, 0.88483644, 0.7887491, 0.08833914, 0.5141419, 0.07875764, 0.22806701,
            0.7883233, 0.30477428, 0.2533327, 0.6694263, 0.43796757, 0.97122884, 0.6450341,
            0.5453457, 0.6860607, 0.9949823, 0.46345225, 0.65992147, 0.9109329, 0.5078866,
            0.35286993, 0.81354123, 0.47349572, 0.69897413, 0.5385581, 0.93777996, 0.29683718,
            0.08466158, 0.00917824, 0.36412132, 0.31364414, 0.89281446, 0.2942369, 0.58694243,
            0.14618948, 0.6854037, 0.9551381, 0.21801536, 0.02948874, 0.7533694, 0.6179016,
            0.0048431, 0.8363674, 0.7436905, 0.43101177, 0.47684282, 0.8383103, 0.19812581,
            0.05256698, 0.0566386, 0.72115874, 0.5015921, 0.30938643, 0.0141753, 0.52415645,
            0.96125233, 0.78953046, 0.92893124, 0.80651444, 0.80715597, 0.2586318, 0.7037131,
            0.19224383, 0.6862902, 0.58040166, 0.43242833, 0.34644595, 0.54378766, 0.4958622,
            0.6951301, 0.64524394, 0.73673743, 0.73902684, 0.3842309, 0.29721686, 0.4160744,
            0.6445482, 0.6938951, 0.5561245,
        ],
    )
    .unwrap();
    let conv_layer28 = ConvolutionLayer::new(kernel28, 1, Padding::Same);
    let target_output28: Array3<f32> = Array::from_shape_vec(
        (2, 10, 15),
        vec![
            4.5670295, 7.6124983, 10.671146, 8.998736, 10.707016, 11.185909, 11.386857, 10.206592,
            10.623525, 11.637021, 11.137391, 10.8928585, 9.953734, 7.7905626, 5.7579727, 7.306562,
            9.737995, 12.723668, 13.241037, 14.984779, 14.295758, 15.861537, 15.220655, 14.245743,
            14.743781, 15.290891, 13.61213, 13.220465, 11.06252, 8.199126, 9.595032, 12.6166115,
            14.859146, 15.510104, 16.250952, 19.021738, 18.93457, 19.879805, 19.662766, 18.606623,
            19.428038, 18.267555, 16.321896, 13.492218, 10.379171, 8.798542, 11.328605, 16.139103,
            15.781104, 17.040712, 17.912663, 18.136942, 20.533518, 18.461151, 18.97459, 18.870373,
            16.579342, 16.5853, 12.643821, 9.133102, 8.955888, 12.075944, 14.572085, 15.016465,
            15.798058, 16.333769, 19.354074, 18.714956, 20.789124, 18.976013, 20.064388, 17.528637,
            17.540045, 13.749326, 11.544067, 11.803383, 13.043775, 16.575674, 15.777805, 17.579292,
            17.943617, 17.796467, 18.456816, 19.679886, 17.451326, 18.078753, 17.610851, 17.122467,
            13.208864, 10.720523, 10.710826, 14.238681, 15.47966, 16.17326, 17.613995, 17.825996,
            16.892254, 20.159258, 19.827843, 19.571411, 18.854609, 18.591587, 17.182636, 12.869792,
            10.194189, 11.000061, 14.379862, 17.934069, 17.63922, 15.97357, 16.956173, 19.03064,
            17.093678, 18.033787, 17.370071, 16.599356, 16.044117, 15.641839, 12.542429, 9.758685,
            10.465943, 11.712025, 13.402007, 14.03365, 14.563689, 14.526551, 14.647826, 15.563463,
            15.388629, 14.299985, 14.002874, 12.212534, 12.744092, 9.992173, 7.686265, 7.463411,
            9.238933, 10.635958, 10.300166, 11.785312, 12.499287, 11.101699, 11.534326, 11.963843,
            11.847999, 9.600454, 10.260535, 9.409414, 7.2144055, 4.639958, 5.4890876, 8.745954,
            10.655223, 12.697855, 11.973824, 13.287357, 13.610065, 13.811958, 13.849575, 14.267798,
            13.055403, 13.85207, 12.532114, 10.551125, 7.3524942, 8.741997, 11.056785, 15.61046,
            15.528712, 18.457634, 16.36186, 19.144646, 18.589914, 17.61951, 17.440565, 16.506197,
            16.370705, 15.747532, 15.209739, 10.0482, 10.639133, 14.97694, 17.548513, 18.77759,
            20.501366, 22.018972, 23.804232, 24.37466, 23.866585, 22.91069, 22.305704, 20.838587,
            20.845924, 17.485077, 12.539704, 10.053663, 13.532287, 17.538206, 19.085531, 20.001642,
            20.10327, 21.52508, 23.803715, 22.57083, 23.133049, 22.207426, 20.03397, 19.868525,
            16.87914, 12.902549, 10.27502, 14.552486, 17.030472, 17.609116, 19.685602, 21.825153,
            21.559181, 25.09254, 23.545307, 23.253069, 23.01289, 21.55587, 21.203424, 17.68094,
            14.811191, 12.447287, 15.76776, 20.05978, 19.878838, 19.149515, 20.105402, 22.329878,
            21.569712, 22.114126, 21.0229, 21.984045, 20.467373, 20.22822, 16.523937, 13.212213,
            12.9009905, 16.248343, 19.587114, 19.055725, 20.498806, 20.908834, 22.562437,
            23.390823, 24.6597, 22.7053, 23.368267, 20.832003, 20.76537, 16.264376, 12.402474,
            10.872518, 16.920286, 21.337433, 19.975952, 19.680674, 21.350334, 20.825495, 21.018959,
            21.48866, 20.533022, 18.573221, 19.548708, 18.574772, 16.261353, 11.528928, 10.649049,
            13.659104, 16.037241, 16.503777, 16.44193, 16.526249, 16.824207, 16.384956, 17.681868,
            16.315458, 15.678514, 14.867606, 14.664426, 12.409217, 9.2836685, 7.013685, 10.330029,
            11.739255, 10.930992, 11.7785845, 13.098042, 12.340081, 13.051683, 12.902563,
            11.479519, 10.461441, 9.761817, 10.7172575, 8.797016, 6.748698,
        ],
    )
    .unwrap();
    let current_output28: Array3<f32> = conv_layer28.convolve(&test_input28);

    assert!(
        arr_allclose(&current_output28, &target_output28),
        "{:?} was not equal to {:?}",
        current_output28,
        target_output28
    );

    let test_input29 = Array::from_shape_vec(
        (3, 10, 15),
        vec![
            0.6222151, 0.75789964, 0.8944672, 0.92868453, 0.969901, 0.12573825, 0.04893699,
            0.9834889, 0.1309708, 0.10405056, 0.8907584, 0.19249535, 0.7266609, 0.97847944,
            0.88732064, 0.04145219, 0.40886414, 0.94225925, 0.48782048, 0.3212815, 0.33589965,
            0.548731, 0.39472353, 0.20935446, 0.45881256, 0.878493, 0.11820386, 0.33547178,
            0.7895801, 0.6146396, 0.540371, 0.75543076, 0.9328607, 0.7910178, 0.23345572,
            0.08010992, 0.78839546, 0.5435443, 0.8130077, 0.84049743, 0.16837756, 0.35681823,
            0.9842876, 0.7681288, 0.33871782, 0.3631438, 0.8542315, 0.69573396, 0.04040196,
            0.5103013, 0.87327087, 0.37753972, 0.5957757, 0.19604516, 0.4733552, 0.8233244,
            0.9322211, 0.9590118, 0.8555658, 0.8988257, 0.69483554, 0.25473273, 0.5802638,
            0.46147576, 0.8721091, 0.29316396, 0.5244579, 0.3030269, 0.43613002, 0.26899648,
            0.55013156, 0.377008, 0.41173777, 0.36448047, 0.6758455, 0.53783196, 0.5878724,
            0.99191517, 0.95134264, 0.49309427, 0.87526673, 0.6049057, 0.9610754, 0.25857434,
            0.15807904, 0.8105548, 0.5614543, 0.523342, 0.00024235, 0.24716882, 0.62018555,
            0.20580722, 0.5964632, 0.4590641, 0.42482692, 0.4591073, 0.28503576, 0.02397736,
            0.7026854, 0.38717398, 0.7226435, 0.05888641, 0.19813369, 0.2862437, 0.86936975,
            0.98584664, 0.33910662, 0.04178984, 0.8388797, 0.8752055, 0.19628692, 0.32806987,
            0.19625323, 0.48324484, 0.26547596, 0.29169068, 0.34818614, 0.54155624, 0.55841756,
            0.43203035, 0.90635383, 0.6221619, 0.13312028, 0.58438164, 0.24158852, 0.59230626,
            0.80972457, 0.78276193, 0.18394487, 0.59019595, 0.94054115, 0.44074106, 0.6780788,
            0.5855126, 0.8341198, 0.0958912, 0.42005202, 0.5426904, 0.47856295, 0.6827206,
            0.02972909, 0.85674536, 0.7115263, 0.7810133, 0.7028763, 0.61693937, 0.9954068,
            0.53743315, 0.6575606, 0.96492666, 0.31929258, 0.02934249, 0.562458, 0.09922413,
            0.8669238, 0.3993404, 0.07765451, 0.7353419, 0.00198996, 0.446601, 0.49630404,
            0.79839313, 0.58093804, 0.21345796, 0.7230826, 0.4849385, 0.820553, 0.6282394,
            0.20790926, 0.17480347, 0.10601443, 0.8150346, 0.12723699, 0.27046126, 0.28842458,
            0.7203788, 0.6991658, 0.2606844, 0.5244236, 0.32585683, 0.7152744, 0.68926454,
            0.38133958, 0.8642892, 0.5063956, 0.5213885, 0.59597003, 0.8505795, 0.77488744,
            0.32738405, 0.52149975, 0.34216303, 0.22714303, 0.76833695, 0.36691627, 0.14223123,
            0.67387354, 0.09267096, 0.4985312, 0.5844687, 0.7644656, 0.28446305, 0.3201185,
            0.2696341, 0.8578446, 0.09514732, 0.59979403, 0.5093849, 0.71366805, 0.8897497,
            0.5639982, 0.4865683, 0.57541674, 0.6326081, 0.5130441, 0.49034655, 0.7037209,
            0.33208346, 0.63787574, 0.6291706, 0.47421247, 0.23486345, 0.869952, 0.65361416,
            0.03662743, 0.51462924, 0.9196911, 0.8793221, 0.78186774, 0.48471546, 0.5383869,
            0.62534815, 0.3553714, 0.9968118, 0.49688724, 0.37583, 0.19825909, 0.93685853,
            0.68677646, 0.24576978, 0.36799955, 0.66436833, 0.40309098, 0.40307763, 0.6084176,
            0.90556717, 0.6977219, 0.19649448, 0.12604196, 0.43395323, 0.05938564, 0.06919543,
            0.6597403, 0.9080266, 0.5624922, 0.28784844, 0.02659295, 0.47776845, 0.761984,
            0.79841346, 0.79470664, 0.02110602, 0.5436528, 0.7113907, 0.18104874, 0.24870853,
            0.57747316, 0.61245716, 0.03752139, 0.94574445, 0.4681282, 0.969797, 0.12823386,
            0.15993103, 0.42355734, 0.72048515, 0.48144373, 0.858121, 0.33813378, 0.9778505,
            0.46431798, 0.22258297, 0.6278271, 0.25811204, 0.72843254, 0.27373013, 0.27433896,
            0.732491, 0.686285, 0.9107763, 0.52486306, 0.02864541, 0.6327045, 0.38749784,
            0.44100302, 0.78058934, 0.14124234, 0.28628784, 0.76789916, 0.37555936, 0.43971175,
            0.04331319, 0.09780997, 0.40862006, 0.70528007, 0.09185711, 0.823536, 0.81429756,
            0.07302681, 0.6152849, 0.9356227, 0.77982754, 0.72116077, 0.7105842, 0.4034548,
            0.80509216, 0.09783126, 0.21926212, 0.13207655, 0.7015808, 0.17238653, 0.18460116,
            0.5575821, 0.5780929, 0.04024655, 0.60567653, 0.67101526, 0.11163998, 0.9730741,
            0.7957075, 0.13753681, 0.4249914, 0.959029, 0.64616, 0.01944306, 0.0451069, 0.60988927,
            0.5702975, 0.9154141, 0.298369, 0.47126326, 0.56598395, 0.57679987, 0.28650796,
            0.35120928, 0.22292198, 0.76072216, 0.83723956, 0.61290085, 0.14372927, 0.35133615,
            0.2495688, 0.98542094, 0.44534236, 0.26395977, 0.6413618, 0.29018158, 0.7026515,
            0.46130356, 0.83116454, 0.38838807, 0.7658825, 0.2515203, 0.15498321, 0.32756808,
            0.10193888, 0.37098822, 0.16565025, 0.6440687, 0.39290613, 0.8382721, 0.4127133,
            0.66124403, 0.8694313, 0.91799986, 0.7149846, 0.17257373, 0.72377336, 0.43520793,
            0.32025692, 0.2293873, 0.20685975, 0.5618886, 0.03298171, 0.04516815, 0.28889108,
            0.37819353, 0.35941374, 0.22646557, 0.4865611, 0.06850646, 0.36713555, 0.97507524,
            0.9856017, 0.13691914, 0.25587377, 0.23198135, 0.63168263, 0.90634483, 0.62659276,
            0.00830113, 0.57375854, 0.66081995, 0.4511592, 0.7095235, 0.3701531, 0.44504768,
            0.49891138, 0.54966915, 0.5332531, 0.02767666, 0.48693478, 0.61392415, 0.8851657,
            0.26826328, 0.40765005, 0.27840444, 0.89372283, 0.997754, 0.46338457, 0.78445923,
            0.582613, 0.74148726, 0.58712804, 0.25544515, 0.38590935, 0.6811402, 0.50827444,
            0.666266, 0.23000365, 0.408603, 0.913767, 0.06065572, 0.15407899, 0.6195248, 0.8449633,
            0.7626016, 0.18244016, 0.17815381, 0.26175067, 0.04169152, 0.30446777, 0.9487898,
            0.73767346, 0.88644, 0.420784, 0.0778392, 0.8826608, 0.6492047, 0.38854632,
        ],
    )
    .unwrap();

    let kernel29: Array4<f32> = Array::from_shape_vec(
        (3, 2, 5, 5),
        vec![
            0.68384963, 0.6266061, 0.54694176, 0.02779119, 0.5851739, 0.89240646, 0.86535263,
            0.20996386, 0.13090512, 0.7281471, 0.39318708, 0.32672238, 0.6848633, 0.84961617,
            0.45679867, 0.6759397, 0.64456964, 0.96701485, 0.16086549, 0.7087405, 0.8894942,
            0.6475722, 0.18771772, 0.2012408, 0.94878227, 0.58967286, 0.80090123, 0.5799347,
            0.9178668, 0.16573429, 0.58338785, 0.47667617, 0.9532117, 0.21564776, 0.89133877,
            0.17446654, 0.0107795, 0.29889566, 0.39913234, 0.5302894, 0.07816543, 0.7402852,
            0.98573536, 0.30748606, 0.993621, 0.03758357, 0.13146874, 0.86146384, 0.6949514,
            0.24558839, 0.7706656, 0.63164335, 0.81027585, 0.4823058, 0.00178706, 0.4582198,
            0.65619093, 0.28412482, 0.03629474, 0.45011836, 0.35812908, 0.02914437, 0.6919308,
            0.10555214, 0.27197847, 0.08190992, 0.74310327, 0.79646134, 0.6624408, 0.15210663,
            0.20802912, 0.5044609, 0.86376214, 0.9537763, 0.6020873, 0.8303515, 0.9588753,
            0.73197967, 0.43450552, 0.6544757, 0.13750179, 0.45277232, 0.91661334, 0.7614271,
            0.42497006, 0.14067934, 0.44368562, 0.79865277, 0.64449096, 0.92738414, 0.8958137,
            0.12830848, 0.04963119, 0.81917155, 0.42274445, 0.05446685, 0.04101894, 0.09930792,
            0.52868897, 0.25766373, 0.46413782, 0.83290285, 0.2857464, 0.93483084, 0.7527259,
            0.6627151, 0.9741788, 0.8654456, 0.03159403, 0.08091403, 0.14496519, 0.9354205,
            0.9959894, 0.7941408, 0.7423276, 0.02799125, 0.03848875, 0.8054729, 0.99117136,
            0.6498168, 0.32092866, 0.3983662, 0.14606105, 0.5199574, 0.4899074, 0.5360965,
            0.44993454, 0.03084684, 0.408017, 0.5713909, 0.7360495, 0.6618847, 0.9357826,
            0.8706936, 0.21162367, 0.21231653, 0.5704002, 0.7295462, 0.39067075, 0.23692593,
            0.02214848, 0.4187255, 0.4807955, 0.39574632, 0.6238521, 0.27060798, 0.93228406,
            0.65184224, 0.71227604, 0.09648224,
        ],
    )
    .unwrap();
    let conv_layer29 = ConvolutionLayer::new(kernel29, 1, Padding::Same);
    let target_output29: Array3<f32> = Array::from_shape_vec(
        (2, 10, 15),
        vec![
            8.60024, 9.578356, 10.849478, 10.392315, 11.883493, 11.359472, 10.557661, 10.675394,
            12.213816, 11.83257, 11.354325, 13.26253, 13.823084, 10.7117195, 7.640592, 10.92405,
            13.422867, 15.108469, 14.605632, 14.888592, 14.149406, 15.064519, 14.607749, 14.583041,
            15.028035, 16.662546, 18.10593, 18.953775, 15.573617, 11.901658, 13.339015, 16.843939,
            19.872355, 18.53648, 17.081701, 17.346754, 17.380007, 17.160933, 19.21113, 19.859293,
            20.077692, 21.740465, 23.644913, 18.938448, 13.870487, 13.792506, 18.883238, 21.34084,
            20.147621, 18.71605, 17.264565, 18.027197, 18.00429, 19.831594, 19.256285, 17.936468,
            20.00031, 22.422184, 17.15975, 12.8453865, 14.334343, 17.838247, 20.497807, 20.296251,
            21.47743, 19.276073, 17.34753, 17.953682, 18.576809, 18.590584, 20.405142, 18.975937,
            20.693014, 18.059685, 14.760267, 12.124325, 16.31015, 21.54099, 21.36942, 19.234804,
            17.486267, 18.303436, 17.135817, 17.845888, 16.609478, 17.411581, 18.788206, 21.655878,
            17.39062, 13.806579, 12.203203, 17.37379, 23.045988, 20.849075, 19.483208, 19.667055,
            18.976877, 19.495512, 18.581688, 18.166136, 18.401772, 17.247684, 20.361755, 16.328222,
            11.642594, 12.964671, 16.448292, 21.190262, 20.880102, 20.390299, 20.69543, 18.420874,
            17.949568, 21.403778, 20.404682, 18.140644, 17.277826, 19.751339, 17.500767, 14.432766,
            9.568537, 12.529552, 15.105547, 14.719886, 15.063532, 14.945459, 15.923733, 16.329643,
            15.808516, 14.425284, 14.6037, 13.871984, 16.400692, 14.209908, 10.76208, 6.7986436,
            8.92341, 12.2381315, 10.826292, 10.385396, 11.79367, 11.915923, 12.182618, 13.4017315,
            13.297008, 12.311925, 12.226448, 12.797065, 10.777092, 9.313782, 7.4088764, 9.980339,
            11.591073, 10.695944, 11.775641, 11.380387, 11.534258, 11.118644, 11.453127, 12.022848,
            11.78008, 12.81881, 13.653988, 11.180726, 8.7901535, 10.19581, 12.516796, 15.97564,
            16.90067, 14.646329, 14.361744, 15.184186, 14.20889, 15.685281, 16.138659, 15.821382,
            17.237276, 19.553299, 16.236935, 12.242338, 10.171594, 14.812133, 18.715431, 19.035343,
            18.341345, 17.364155, 16.304579, 17.691412, 18.571459, 18.295732, 19.04507, 19.808256,
            21.568386, 18.443048, 15.040079, 11.089223, 16.89449, 20.705883, 19.69514, 18.35345,
            17.316792, 18.006142, 17.23428, 18.806355, 17.578218, 17.920258, 19.413214, 19.663311,
            17.21185, 14.789741, 11.467409, 17.292759, 20.289793, 20.343267, 19.20741, 17.421339,
            17.022926, 18.477325, 16.686438, 17.85425, 17.506157, 17.492853, 19.890272, 17.364832,
            14.211334, 10.4091625, 15.919122, 20.858637, 19.423477, 18.797838, 17.643791,
            18.264513, 16.917433, 15.995171, 15.313986, 17.733614, 16.465738, 18.874233, 17.600489,
            15.4629965, 11.246892, 15.107102, 19.429686, 18.89255, 19.71304, 18.967318, 18.934053,
            18.735577, 17.449684, 17.14683, 17.210089, 17.371136, 18.121183, 16.86527, 14.018281,
            10.305097, 15.048618, 19.87853, 19.223013, 18.12264, 18.866789, 18.322767, 19.34105,
            18.141123, 17.885592, 18.360836, 17.69978, 18.31882, 15.262975, 13.747259, 8.066329,
            11.39525, 14.493718, 13.975121, 12.448934, 13.260532, 14.969828, 14.208456, 15.437974,
            15.084223, 14.747984, 13.27105, 14.150071, 13.353663, 11.603846, 5.6682305, 7.0379686,
            9.344925, 9.255113, 9.056176, 9.925165, 9.768084, 10.34223, 10.4509, 10.587282,
            9.754087, 9.640766, 11.009812, 9.847191, 7.491888,
        ],
    )
    .unwrap();
    let current_output29: Array3<f32> = conv_layer29.convolve(&test_input29);

    assert!(
        arr_allclose(&current_output29, &target_output29),
        "{:?} was not equal to {:?}",
        current_output29,
        target_output29
    );

    let test_input30 = Array::from_shape_vec(
        (3, 10, 15),
        vec![
            0.52886575, 0.38637865, 0.5918471, 0.01740899, 0.7394339, 0.56132907, 0.19255765,
            0.89828086, 0.18568946, 0.6458292, 0.9000991, 0.14083895, 0.19123401, 0.29393503,
            0.9709682, 0.8210748, 0.37299708, 0.6932929, 0.78315556, 0.7116838, 0.9060589,
            0.3958118, 0.9729085, 0.37787062, 0.3110578, 0.51860094, 0.82105917, 0.47715545,
            0.8672759, 0.86623365, 0.29922554, 0.03071198, 0.03382622, 0.45532396, 0.62365896,
            0.149902, 0.42382213, 0.6566605, 0.45536265, 0.42575222, 0.9792835, 0.01637395,
            0.56597984, 0.7201858, 0.13000993, 0.38580757, 0.46124813, 0.7345686, 0.45498174,
            0.01468375, 0.3311825, 0.68482727, 0.04436485, 0.5904201, 0.9714122, 0.5436191,
            0.94970685, 0.9165496, 0.8299819, 0.68421304, 0.89789516, 0.18899626, 0.59009004,
            0.9988615, 0.02270102, 0.8618434, 0.749954, 0.4278886, 0.6528449, 0.2109633, 0.6254018,
            0.8017509, 0.25951192, 0.02546183, 0.02745248, 0.64143604, 0.7372767, 0.22952433,
            0.6979411, 0.6756809, 0.7017341, 0.918334, 0.03686747, 0.21967116, 0.65583056,
            0.16345957, 0.50405574, 0.5254386, 0.2864706, 0.8577092, 0.17987564, 0.12798376,
            0.37675846, 0.04420354, 0.97041535, 0.407479, 0.07644754, 0.14767134, 0.6243532,
            0.6770185, 0.19173194, 0.46982294, 0.02457761, 0.7269523, 0.23975594, 0.19219191,
            0.3308745, 0.396583, 0.8623231, 0.48967764, 0.19221619, 0.08402257, 0.7331613,
            0.19351119, 0.31468204, 0.7701771, 0.68409836, 0.40743572, 0.9474348, 0.16978115,
            0.98625356, 0.6862598, 0.11779778, 0.5906839, 0.22131853, 0.04202804, 0.6265308,
            0.98268986, 0.6135814, 0.59731364, 0.4896969, 0.5199412, 0.21510182, 0.6619162,
            0.8715136, 0.57183194, 0.2885029, 0.50771165, 0.901779, 0.08790161, 0.4924265,
            0.9705775, 0.63548344, 0.45100802, 0.03424489, 0.7871616, 0.08637597, 0.78139436,
            0.56886005, 0.40288508, 0.55354595, 0.3848688, 0.6487766, 0.70381683, 0.5216492,
            0.7941249, 0.47117358, 0.61789876, 0.6924839, 0.95235467, 0.99155945, 0.7086247,
            0.33689418, 0.1660726, 0.68587416, 0.47262585, 0.45400557, 0.4621445, 0.33963647,
            0.7927198, 0.7496024, 0.530577, 0.519493, 0.91085595, 0.0421344, 0.1856097, 0.162838,
            0.59682316, 0.94973904, 0.45783094, 0.93284744, 0.55421734, 0.4387137, 0.05644235,
            0.44071785, 0.14814438, 0.5569182, 0.20264524, 0.04074387, 0.6096802, 0.4809522,
            0.47096238, 0.00810335, 0.2299158, 0.21848392, 0.7324421, 0.72079855, 0.6820497,
            0.7327517, 0.33685237, 0.93032444, 0.38904786, 0.7066437, 0.6656503, 0.841237,
            0.41910258, 0.5914259, 0.9108226, 0.53551847, 0.4931909, 0.5435749, 0.68504053,
            0.3623532, 0.7924024, 0.75572896, 0.3925273, 0.03436404, 0.22152406, 0.7389564,
            0.649227, 0.3867441, 0.334363, 0.5530898, 0.5252634, 0.77226716, 0.5538213, 0.6835575,
            0.3882179, 0.8170877, 0.00781578, 0.97707474, 0.9940746, 0.7451846, 0.52904606,
            0.30411443, 0.59167516, 0.80317616, 0.43357348, 0.64922994, 0.6601235, 0.907485,
            0.53241575, 0.6945486, 0.67047435, 0.7195878, 0.9020445, 0.9518084, 0.787326,
            0.96140546, 0.327034, 0.41490155, 0.72119236, 0.09215528, 0.57506335, 0.42119923,
            0.03004104, 0.17358404, 0.00080285, 0.28787526, 0.6447292, 0.906, 0.16794387,
            0.5467595, 0.75012404, 0.8576224, 0.77786934, 0.33486333, 0.88640976, 0.47692633,
            0.7414227, 0.04009474, 0.542522, 0.35029164, 0.63763183, 0.29794613, 0.03641145,
            0.16722608, 0.12909189, 0.1589417, 0.5954703, 0.85711455, 0.24522811, 0.974773,
            0.8507247, 0.67588323, 0.83975345, 0.863551, 0.1023455, 0.51589406, 0.85847044,
            0.86474276, 0.8149961, 0.38785052, 0.7663677, 0.9410913, 0.08583226, 0.8406605,
            0.71259856, 0.20553346, 0.24283217, 0.57682234, 0.47941732, 0.926685, 0.39005476,
            0.54092985, 0.88133335, 0.0324995, 0.59161955, 0.22166131, 0.7692697, 0.01657799,
            0.10074908, 0.5621936, 0.00591142, 0.45705855, 0.40678144, 0.6293653, 0.4260665,
            0.48859268, 0.9232842, 0.2502391, 0.80427086, 0.03818879, 0.36219996, 0.17138262,
            0.42277342, 0.94081557, 0.7445628, 0.21179068, 0.71635485, 0.83644694, 0.19754058,
            0.82449114, 0.42324457, 0.26319242, 0.7948271, 0.72855157, 0.42772555, 0.89472646,
            0.9749447, 0.95646167, 0.6503069, 0.15980154, 0.62844396, 0.6528909, 0.6028544,
            0.13638273, 0.39407018, 0.06674533, 0.83398765, 0.7112734, 0.9988898, 0.45113885,
            0.37628287, 0.12467484, 0.23401077, 0.5302998, 0.03754441, 0.8939974, 0.16035181,
            0.69940186, 0.7832372, 0.22348203, 0.9558617, 0.08868469, 0.38749498, 0.14952931,
            0.13567366, 0.07900955, 0.4838307, 0.8551138, 0.88709897, 0.36363718, 0.20012486,
            0.18496908, 0.26352006, 0.21221249, 0.04832328, 0.45603734, 0.48977068, 0.9727279,
            0.2223024, 0.7580914, 0.9952911, 0.78135294, 0.34888557, 0.42161968, 0.88537115,
            0.24929681, 0.24824439, 0.75166476, 0.51153195, 0.5740834, 0.31640235, 0.7000697,
            0.9271626, 0.3866544, 0.90997946, 0.52299017, 0.48876184, 0.43697715, 0.4668421,
            0.8870456, 0.13939072, 0.15193757, 0.10377176, 0.03825287, 0.83194524, 0.71169674,
            0.12412303, 0.22000751, 0.65762943, 0.80387026, 0.9246838, 0.2840905, 0.03209783,
            0.19625777, 0.11980431, 0.30807668, 0.13390501, 0.05043373, 0.12723272, 0.9824148,
            0.44856635, 0.2624294, 0.00958934, 0.0995127, 0.08031525, 0.38621363, 0.66721714,
            0.17361915, 0.21235856, 0.99523526, 0.6581009, 0.6043816, 0.38974792, 0.8524115,
            0.36282185, 0.0062347, 0.9864116, 0.53632265, 0.25642252, 0.35544556, 0.8767314,
            0.7978388, 0.9968594, 0.93126136, 0.6872969, 0.01807762, 0.53289115,
        ],
    )
    .unwrap();

    let kernel30: Array4<f32> = Array::from_shape_vec(
        (3, 2, 5, 5),
        vec![
            0.29115057, 0.09607173, 0.9291924, 0.7955641, 0.685791, 0.24262014, 0.7705071,
            0.86541873, 0.17621124, 0.6904003, 0.34976122, 0.21581873, 0.5532616, 0.95970744,
            0.55223054, 0.16051039, 0.01258456, 0.97428215, 0.09648368, 0.16584113, 0.13684596,
            0.98106205, 0.68078685, 0.0038069, 0.82000685, 0.7718611, 0.00677892, 0.48767114,
            0.70951277, 0.4362493, 0.9016004, 0.7881427, 0.20579426, 0.11782064, 0.05957514,
            0.8304564, 0.02350398, 0.7684956, 0.91710156, 0.85411555, 0.02124477, 0.11364035,
            0.54948294, 0.02591292, 0.42192397, 0.86921203, 0.4866433, 0.9635667, 0.5469399,
            0.37939194, 0.2165768, 0.38010216, 0.95164126, 0.97265726, 0.8991906, 0.6288754,
            0.94870436, 0.30023637, 0.71587545, 0.308687, 0.1237447, 0.70287865, 0.5642258,
            0.4909772, 0.00513179, 0.96346223, 0.72805625, 0.97035193, 0.34751764, 0.9530135,
            0.07550302, 0.14497681, 0.5457807, 0.43179563, 0.24281646, 0.7374898, 0.5303815,
            0.89710975, 0.02905989, 0.84309703, 0.25471458, 0.8896496, 0.04810897, 0.92559075,
            0.809669, 0.03910594, 0.50459677, 0.14540058, 0.90726244, 0.52693003, 0.8414026,
            0.11982161, 0.10823907, 0.26861846, 0.60190606, 0.6963788, 0.25325528, 0.13881885,
            0.0617022, 0.97593206, 0.5218702, 0.79595083, 0.7466225, 0.8505226, 0.9156915,
            0.42966273, 0.338509, 0.5958763, 0.01035187, 0.3031956, 0.8194214, 0.8856615,
            0.05187115, 0.5123032, 0.23396358, 0.25060338, 0.22599821, 0.35538375, 0.73213947,
            0.68476427, 0.43052003, 0.84957284, 0.67671156, 0.2562911, 0.9386545, 0.7209084,
            0.43928608, 0.6592098, 0.19666669, 0.6909486, 0.61787504, 0.46187317, 0.15833755,
            0.8886515, 0.6841967, 0.06233076, 0.41375995, 0.10668167, 0.36822248, 0.15206665,
            0.46758506, 0.04919559, 0.6929648, 0.85146296, 0.93492836, 0.8471453, 0.49949893,
            0.96549, 0.10857984, 0.04954484,
        ],
    )
    .unwrap();
    let conv_layer30 = ConvolutionLayer::new(kernel30, 1, Padding::Same);
    let target_output30: Array3<f32> = Array::from_shape_vec(
        (2, 10, 15),
        vec![
            7.82418, 10.151836, 12.3944645, 12.241764, 12.735494, 11.806353, 13.108655, 12.51236,
            12.442712, 12.079132, 13.255421, 12.715178, 11.38702, 9.619271, 7.1307445, 9.742789,
            12.152564, 16.556936, 16.412992, 16.905373, 17.421192, 16.524364, 17.891386, 16.57216,
            17.704636, 16.692963, 15.458129, 16.93465, 14.0570755, 11.179921, 12.933176, 16.355673,
            19.612318, 19.925388, 21.533949, 19.726416, 19.322134, 19.285173, 19.023455, 19.52268,
            19.859964, 20.82136, 19.275457, 16.709787, 12.067862, 11.878507, 15.04291, 20.176056,
            20.14487, 20.326374, 20.0178, 20.63821, 21.271141, 19.431503, 19.885483, 21.320171,
            19.907516, 19.871666, 17.9268, 12.57197, 12.436918, 15.947226, 20.45075, 19.577147,
            21.25183, 21.354502, 22.166555, 22.318209, 22.119774, 22.817856, 20.275429, 20.087923,
            19.468657, 15.489839, 11.05047, 9.9606085, 14.017088, 18.268953, 19.319883, 20.641352,
            21.268766, 21.320745, 21.151743, 19.723011, 18.82023, 20.323616, 19.793535, 18.89508,
            16.374655, 11.297502, 10.07559, 14.218006, 17.929466, 19.255938, 18.014069, 20.133335,
            17.945223, 17.882402, 18.07901, 20.325912, 21.02816, 20.083822, 18.59571, 17.128128,
            13.595475, 11.547667, 13.972986, 18.88411, 19.139437, 19.663692, 21.210712, 21.989578,
            21.83768, 22.598444, 21.258091, 20.78276, 21.643435, 19.167841, 18.356405, 12.948456,
            7.5356197, 10.21611, 12.8742075, 14.042055, 14.277251, 13.255477, 13.971564, 16.94918,
            16.02204, 15.523649, 16.991848, 15.097546, 14.42301, 11.817966, 8.663498, 5.787057,
            7.353717, 8.606942, 9.997799, 9.457995, 9.420775, 9.645887, 10.528116, 10.938277,
            11.497256, 12.03821, 10.8399105, 11.225427, 9.523513, 7.407985, 6.6346226, 8.077051,
            11.809536, 10.62992, 11.738368, 11.602584, 11.762965, 11.429093, 11.954754, 11.5596895,
            11.427093, 11.67789, 11.24941, 8.44118, 5.942905, 8.258484, 11.121576, 14.909948,
            15.613484, 15.167596, 15.580148, 15.0287285, 17.119343, 14.425572, 15.712392,
            14.015621, 15.131842, 14.847216, 10.786498, 9.17197, 11.184362, 15.18881, 18.211977,
            18.138733, 17.84045, 18.302967, 17.573341, 19.224375, 18.62209, 17.589478, 18.529612,
            17.932245, 18.610582, 13.047723, 10.750454, 10.531989, 15.080934, 19.262362, 19.714834,
            20.200241, 18.24871, 19.093555, 19.309109, 17.2529, 19.336946, 21.141632, 20.043804,
            19.890852, 14.716769, 12.064626, 11.122494, 12.309389, 19.3327, 17.742508, 20.092144,
            19.58095, 20.747189, 20.583288, 20.10761, 19.664429, 18.719444, 17.900074, 15.898841,
            14.198255, 9.173091, 8.927678, 13.674429, 18.425816, 18.946764, 18.997013, 19.510782,
            19.752096, 21.218216, 17.845108, 18.423496, 18.965567, 19.466892, 18.668264, 14.106825,
            10.672711, 8.880005, 14.232743, 14.641654, 16.384638, 15.502604, 17.184132, 18.019615,
            17.367361, 18.054512, 20.446857, 19.406607, 19.188637, 16.984762, 11.918426, 10.561205,
            9.386004, 12.607307, 15.5675955, 18.43556, 19.377604, 19.539627, 18.728281, 19.099695,
            19.497917, 19.183767, 18.896187, 19.960445, 18.285477, 15.466016, 11.854705, 7.0158577,
            9.097072, 14.144317, 13.969711, 13.604834, 14.802157, 14.1491, 14.891156, 14.9511385,
            15.332128, 15.870474, 14.77726, 13.018763, 11.122339, 7.3748493, 4.89736, 6.976676,
            8.650876, 9.704374, 8.575149, 9.189548, 9.362542, 10.388712, 10.317221, 8.794162,
            11.263577, 10.79489, 10.084393, 8.39843, 7.6512985,
        ],
    )
    .unwrap();
    let current_output30: Array3<f32> = conv_layer30.convolve(&test_input30);

    assert!(
        arr_allclose(&current_output30, &target_output30),
        "{:?} was not equal to {:?}",
        current_output30,
        target_output30
    );

    let test_input31 = Array::from_shape_vec(
        (3, 15, 10),
        vec![
            0.8648635, 0.3216597, 0.5967798, 0.24502176, 0.40264118, 0.7135809, 0.9563036,
            0.99361944, 0.27493003, 0.8091006, 0.03882129, 0.4241894, 0.21886946, 0.60990226,
            0.74957037, 0.0567609, 0.6618832, 0.31648433, 0.07057995, 0.7937507, 0.35538703,
            0.16586034, 0.53550744, 0.9107666, 0.08248742, 0.7804362, 0.07774146, 0.28810686,
            0.5908287, 0.07081332, 0.24666145, 0.5222477, 0.15884496, 0.7280006, 0.171798,
            0.16601218, 0.21720299, 0.75876254, 0.40750048, 0.2797197, 0.32153466, 0.24065089,
            0.1429008, 0.90698326, 0.4561631, 0.12540661, 0.1332323, 0.0730514, 0.16514674,
            0.6010551, 0.20042138, 0.79326254, 0.81028926, 0.61555564, 0.21495369, 0.6555247,
            0.59598464, 0.20266142, 0.51127625, 0.8523459, 0.5993377, 0.7477862, 0.39690518,
            0.5696813, 0.87416846, 0.9011878, 0.6916412, 0.62494177, 0.6454708, 0.32460627,
            0.70959914, 0.92651147, 0.9414587, 0.6630958, 0.21866481, 0.0734322, 0.37875828,
            0.2656954, 0.8068955, 0.4726575, 0.6983828, 0.07320249, 0.12168032, 0.6426804,
            0.9129043, 0.84286946, 0.43912458, 0.860546, 0.60123307, 0.0920186, 0.14726785,
            0.7902299, 0.24951272, 0.5177399, 0.33639956, 0.39910504, 0.26826426, 0.1295481,
            0.04226355, 0.36311296, 0.33253834, 0.03372582, 0.6151039, 0.16333707, 0.35070628,
            0.6325487, 0.45462114, 0.8023284, 0.8320421, 0.9793079, 0.34594545, 0.48682922,
            0.875736, 0.59496605, 0.21009445, 0.00543618, 0.68560296, 0.04975929, 0.45436794,
            0.49572426, 0.80676097, 0.268819, 0.4114992, 0.7848971, 0.6777965, 0.17057472,
            0.70026565, 0.8685083, 0.7508676, 0.9457111, 0.24649319, 0.9665724, 0.85440516,
            0.35102448, 0.07823556, 0.7180487, 0.8317649, 0.6794208, 0.5517275, 0.10098601,
            0.03686264, 0.8578678, 0.12133782, 0.2815227, 0.23224549, 0.50588506, 0.8644135,
            0.02310899, 0.45685568, 0.40417364, 0.2598548, 0.09913059, 0.7969972, 0.9800414,
            0.2510396, 0.11597095, 0.72586274, 0.09967189, 0.29483116, 0.22645572, 0.16055934,
            0.43114743, 0.90784466, 0.96178347, 0.6382897, 0.534928, 0.6883946, 0.5840903,
            0.75128937, 0.66844714, 0.66343355, 0.46953654, 0.46234563, 0.26003668, 0.7742914,
            0.328285, 0.83035487, 0.49730703, 0.99242496, 0.83261126, 0.8848362, 0.11227968,
            0.83485615, 0.38707262, 0.42852715, 0.3326272, 0.9234643, 0.7350134, 0.24397685,
            0.79674083, 0.95016545, 0.21724485, 0.86324733, 0.1932244, 0.5176914, 0.32076064,
            0.9673775, 0.00598922, 0.3920287, 0.24141203, 0.8279213, 0.6946018, 0.75072336,
            0.9753633, 0.24372894, 0.49899355, 0.31899843, 0.4939616, 0.11416891, 0.68334943,
            0.5965326, 0.12978615, 0.10638801, 0.11160661, 0.80415183, 0.28193727, 0.09670109,
            0.17522074, 0.30331546, 0.39188403, 0.9932483, 0.44458252, 0.5604396, 0.07845373,
            0.09437273, 0.2022228, 0.30105925, 0.18510874, 0.5031573, 0.87208086, 0.6317367,
            0.9767708, 0.21871181, 0.7000181, 0.39591292, 0.73465174, 0.00274565, 0.9079947,
            0.22369012, 0.68718666, 0.65592414, 0.6682944, 0.578825, 0.5572757, 0.17275229,
            0.35462692, 0.07000257, 0.3533166, 0.616583, 0.30442452, 0.5472081, 0.2751976,
            0.77393323, 0.43991742, 0.05888736, 0.2155859, 0.3237903, 0.42484936, 0.8007856,
            0.16511486, 0.9651604, 0.6095338, 0.780079, 0.213527, 0.68177587, 0.20005976,
            0.5214844, 0.5637177, 0.8187329, 0.34419012, 0.70609355, 0.46725455, 0.23119006,
            0.96067435, 0.29916614, 0.6806969, 0.91396964, 0.972841, 0.01715484, 0.04093061,
            0.4275515, 0.19486532, 0.25447014, 0.08197373, 0.6507138, 0.21445233, 0.11806071,
            0.17637333, 0.32952574, 0.5958368, 0.17714995, 0.7740049, 0.6388251, 0.25830767,
            0.21258484, 0.3401532, 0.96206266, 0.6204497, 0.28326756, 0.20731905, 0.8391098,
            0.63256073, 0.05410179, 0.97274446, 0.7486978, 0.12974854, 0.7944709, 0.53723675,
            0.69576323, 0.82454914, 0.37664893, 0.6722372, 0.50744605, 0.7913009, 0.78958917,
            0.6451747, 0.35058063, 0.22394986, 0.14626299, 0.05523287, 0.4686973, 0.7351389,
            0.07301666, 0.27983865, 0.10655332, 0.97564507, 0.05932388, 0.77344525, 0.61317027,
            0.08217912, 0.553476, 0.21154444, 0.19400315, 0.16894332, 0.9486215, 0.92018247,
            0.89767647, 0.5222088, 0.21455717, 0.203828, 0.13832045, 0.5881519, 0.75384825,
            0.9633764, 0.5959824, 0.758624, 0.01639629, 0.3016201, 0.17905368, 0.19411111,
            0.82684654, 0.2860684, 0.04715753, 0.06193527, 0.6444675, 0.31424382, 0.10932652,
            0.5231733, 0.44769424, 0.39186087, 0.02075461, 0.10706459, 0.5791381, 0.45745206,
            0.44355088, 0.519928, 0.01996619, 0.71309346, 0.68690145, 0.39505485, 0.5469934,
            0.31554794, 0.39265913, 0.6052618, 0.9284058, 0.1213429, 0.38917127, 0.7799773,
            0.825869, 0.88367033, 0.57404125, 0.85618263, 0.4407754, 0.633255, 0.7577091,
            0.73792094, 0.23396462, 0.3459607, 0.14433429, 0.5666275, 0.9557201, 0.85192674,
            0.6193624, 0.9293787, 0.02097251, 0.23979846, 0.07907034, 0.9563302, 0.01872301,
            0.41537428, 0.45995143, 0.64512044, 0.85995775, 0.10583407, 0.4484315, 0.9160312,
            0.5678417, 0.57392234, 0.26174, 0.10541193, 0.6379088, 0.31216502, 0.87573344,
            0.15632313, 0.7373654, 0.12863557, 0.9590727, 0.2825182, 0.79587996, 0.8191361,
            0.9381195, 0.53403527, 0.79628325, 0.62593824, 0.2113896, 0.1876398, 0.29817143,
            0.6925418, 0.1792817, 0.2641736, 0.43096247, 0.76093376, 0.6251491, 0.6965461,
            0.04901551, 0.06003402, 0.6987717, 0.12188532, 0.06863046, 0.9816463, 0.75263584,
            0.66786885, 0.6430677, 0.56340057, 0.73104405, 0.65803695, 0.07880943, 0.23246141,
            0.7858138, 0.55886114,
        ],
    )
    .unwrap();

    let kernel31: Array4<f32> = Array::from_shape_vec(
        (3, 2, 3, 3),
        vec![
            0.4816245, 0.7489411, 0.64294606, 0.7781154, 0.66253483, 0.9903388, 0.41137746,
            0.4890013, 0.06506247, 0.9972559, 0.8323405, 0.18129697, 0.49030396, 0.48294267,
            0.12433387, 0.9647698, 0.7292857, 0.73773444, 0.3909372, 0.92350286, 0.25497472,
            0.13691516, 0.34584802, 0.5884459, 0.20412357, 0.00624331, 0.56834316, 0.22074686,
            0.69736785, 0.08598603, 0.05624962, 0.29992157, 0.25001067, 0.6889985, 0.89269227,
            0.30140767, 0.6338539, 0.948173, 0.464108, 0.89087915, 0.31388247, 0.5700806,
            0.76289177, 0.00432913, 0.9234758, 0.9616415, 0.29734898, 0.811496, 0.8376677,
            0.406034, 0.9758267, 0.03124781, 0.5678819, 0.12168682,
        ],
    )
    .unwrap();
    let conv_layer31 = ConvolutionLayer::new(kernel31, 1, Padding::Same);
    let target_output31: Array3<f32> = Array::from_shape_vec(
        (2, 15, 10),
        vec![
            3.0870824, 4.9313364, 5.9663672, 6.7261424, 6.1987386, 6.047679, 5.7071958, 5.7356267,
            5.266926, 3.2845716, 4.3034277, 5.6794434, 7.170404, 6.9530106, 8.149867, 7.785269,
            6.3409123, 7.190664, 6.6835756, 4.4157515, 4.213439, 5.2370443, 6.5955877, 6.557316,
            8.269824, 6.615396, 7.983203, 6.519925, 5.5196037, 4.4008803, 3.9813087, 5.5689173,
            7.016646, 6.7852397, 7.3737974, 6.0146713, 6.529829, 5.3576827, 5.33775, 3.5495958,
            4.3873224, 6.891532, 6.6878014, 7.673178, 6.7794747, 6.189919, 5.687298, 5.5182705,
            5.144907, 3.7515035, 3.8998597, 6.3366113, 6.860862, 7.7345495, 7.78813, 6.024503,
            5.9168706, 5.666582, 5.98177, 4.2386847, 4.8854365, 7.821304, 7.0210133, 6.79513,
            6.512224, 5.984267, 6.272466, 6.327302, 7.91443, 5.645862, 5.371497, 8.084451,
            6.7795825, 8.058636, 7.3062873, 6.7381887, 6.153527, 6.642326, 7.1043644, 5.2211094,
            5.687091, 8.398562, 7.8493743, 7.31589, 6.5456133, 5.9712543, 5.9233685, 5.774339,
            6.859144, 3.7673626, 5.0436206, 6.936866, 8.532052, 6.0644608, 6.7467966, 5.657122,
            7.1224318, 5.126911, 6.725157, 3.0893638, 4.8101516, 8.206695, 7.4609065, 6.6908503,
            6.1640816, 4.9494734, 6.938674, 6.058854, 7.856431, 5.071261, 5.03025, 8.386029,
            7.043388, 8.450874, 5.5835223, 6.5014524, 6.8498135, 8.373939, 6.8073025, 4.888306,
            4.574976, 8.908881, 7.393491, 7.419601, 5.0108333, 6.4388814, 6.31481, 7.608371,
            7.3030205, 5.0847826, 4.9634104, 8.349875, 8.182875, 5.993949, 5.9538713, 6.2450285,
            7.0780506, 6.5770416, 6.857546, 3.8032672, 2.833396, 4.3848057, 4.936267, 3.3315759,
            3.3754487, 3.978013, 3.35951, 4.311275, 3.4497797, 1.9259143, 2.9504142, 3.902768,
            5.4285054, 5.5630875, 5.1978683, 5.0435343, 4.5642366, 4.1156416, 4.184299, 2.9196377,
            4.6266146, 6.122646, 7.571774, 7.170719, 7.714551, 6.3934956, 7.996002, 6.192781,
            6.267668, 3.9364479, 4.133265, 5.2630415, 7.058636, 6.857626, 6.9796276, 6.9296765,
            7.869904, 6.757986, 6.215798, 3.8584964, 4.497807, 5.602292, 6.8484697, 7.102298,
            7.2316833, 6.4172573, 6.6892757, 5.7058344, 5.8255863, 3.3643389, 5.200769, 6.4619255,
            7.4816136, 6.81242, 6.424965, 5.891604, 6.5500827, 5.1673007, 5.8724337, 3.9343472,
            4.708319, 6.1232023, 6.094433, 6.9770536, 7.140975, 6.300554, 5.4480243, 4.7834206,
            5.7737, 3.6920016, 6.319531, 7.8058352, 7.75663, 7.0166507, 6.1403975, 5.9031563,
            5.8065596, 6.405862, 7.886305, 5.305393, 5.7063956, 6.45903, 6.69225, 8.03798,
            8.213551, 7.421952, 6.207554, 7.0403337, 7.0676417, 4.31241, 7.1117153, 8.57794,
            8.476191, 6.5828495, 6.393829, 4.5837455, 5.103259, 4.864344, 6.7133045, 3.9384992,
            5.4741173, 7.689141, 7.037445, 6.7507224, 7.482905, 6.163766, 7.3901057, 6.4465203,
            7.135379, 3.5375788, 5.6399593, 8.265583, 7.3434396, 6.891005, 4.6995625, 5.909395,
            5.39136, 6.6247168, 6.4060187, 3.8109314, 4.812169, 7.8184843, 7.1023526, 7.284206,
            4.6926055, 6.563736, 7.3142586, 8.529633, 8.18103, 4.6988935, 6.3334265, 8.778025,
            8.287144, 6.239419, 5.571119, 5.531619, 6.2173667, 6.7669077, 6.7739706, 3.6371531,
            5.9405823, 7.734444, 7.597253, 6.657403, 6.17848, 7.082455, 7.1993804, 7.1554246,
            6.2216744, 3.6932232, 3.296866, 5.0283446, 4.5742893, 4.015892, 3.8170938, 3.867519,
            4.2603235, 3.8325925, 3.5308275, 3.0564365,
        ],
    )
    .unwrap();
    let current_output31: Array3<f32> = conv_layer31.convolve(&test_input31);

    assert!(
        arr_allclose(&current_output31, &target_output31),
        "{:?} was not equal to {:?}",
        current_output31,
        target_output31
    );

    let test_input32 = Array::from_shape_vec(
        (3, 15, 10),
        vec![
            0.8672895, 0.7089132, 0.81502956, 0.45569643, 0.9420309, 0.03257992, 0.41169244,
            0.10524429, 0.29636487, 0.230716, 0.89597744, 0.23406821, 0.6527877, 0.3581413,
            0.6885466, 0.9535316, 0.8442464, 0.40710646, 0.16538836, 0.6326036, 0.68527246,
            0.31145656, 0.49300048, 0.49084947, 0.02828005, 0.88413817, 0.08669137, 0.14747888,
            0.9037477, 0.6970686, 0.30263218, 0.00271136, 0.49293855, 0.9998127, 0.98342794,
            0.9118095, 0.9264461, 0.04954946, 0.40840417, 0.46344218, 0.787193, 0.20486033,
            0.4029006, 0.7686151, 0.24171825, 0.36729267, 0.19857672, 0.32654667, 0.36346474,
            0.17108533, 0.3027954, 0.36422956, 0.58195865, 0.58513415, 0.7725577, 0.8838584,
            0.80932313, 0.89565295, 0.16141163, 0.06084506, 0.5492495, 0.60231775, 0.91577756,
            0.12382696, 0.294304, 0.36349937, 0.7948714, 0.14176327, 0.49541315, 0.2934778,
            0.37438837, 0.7306092, 0.28533515, 0.10216843, 0.55541974, 0.4650447, 0.17332368,
            0.3212567, 0.36790222, 0.11517226, 0.08391169, 0.66567504, 0.3817901, 0.47639692,
            0.81930286, 0.32803875, 0.5654139, 0.37452427, 0.6643417, 0.24304809, 0.06236777,
            0.7733252, 0.78207755, 0.61082655, 0.947744, 0.08051699, 0.94621384, 0.00787854,
            0.84173137, 0.1944808, 0.13019027, 0.66277754, 0.09286012, 0.58464366, 0.6512211,
            0.7080163, 0.70387626, 0.44558695, 0.44260016, 0.697838, 0.32629654, 0.2740555,
            0.99696946, 0.17646311, 0.37098762, 0.8761452, 0.69403934, 0.21528777, 0.5237107,
            0.44565287, 0.19037104, 0.8381286, 0.70450526, 0.7929086, 0.45777786, 0.96684873,
            0.48885155, 0.15208961, 0.8550647, 0.11583171, 0.56539786, 0.6370797, 0.2444331,
            0.26558962, 0.7020013, 0.31950995, 0.00088664, 0.4422912, 0.82152086, 0.05462804,
            0.8638695, 0.92018557, 0.43966386, 0.13879521, 0.6324256, 0.47845423, 0.52424467,
            0.8988874, 0.34291574, 0.5377849, 0.7919196, 0.69536626, 0.72673947, 0.63617104,
            0.1036236, 0.5688153, 0.642465, 0.68493664, 0.6256276, 0.5914831, 0.841703, 0.26191136,
            0.63586736, 0.14973171, 0.17741989, 0.8462637, 0.51744187, 0.89845973, 0.44348246,
            0.2674213, 0.5524051, 0.4584158, 0.05020873, 0.9414409, 0.87631005, 0.8967645,
            0.9048843, 0.6688897, 0.28862262, 0.01719667, 0.89464474, 0.738402, 0.43135417,
            0.36634243, 0.99305737, 0.5723982, 0.33335868, 0.6317803, 0.86594313, 0.16760358,
            0.08334628, 0.14621608, 0.6169529, 0.5971739, 0.95570713, 0.19301598, 0.05311463,
            0.8926391, 0.06703918, 0.3840044, 0.12217854, 0.11021607, 0.05716072, 0.03542557,
            0.46326014, 0.9456335, 0.8012088, 0.9099846, 0.31587508, 0.9948361, 0.19569385,
            0.6932092, 0.287212, 0.22239834, 0.91989446, 0.645167, 0.16384327, 0.26697785,
            0.34233773, 0.9711869, 0.1736736, 0.49766174, 0.11606233, 0.20744501, 0.47700465,
            0.49665624, 0.9865482, 0.67733943, 0.48572266, 0.94583005, 0.3003492, 0.8352311,
            0.80740196, 0.39818338, 0.8049802, 0.3352269, 0.8549322, 0.32960874, 0.01231102,
            0.21975358, 0.79986304, 0.06471063, 0.77274996, 0.8312853, 0.7702817, 0.82208914,
            0.11399209, 0.04418208, 0.41363552, 0.37213323, 0.05123908, 0.16918235, 0.56118464,
            0.31676802, 0.91666114, 0.99523085, 0.02213015, 0.558943, 0.3857257, 0.9998762,
            0.5093269, 0.49142754, 0.34928933, 0.6983236, 0.63120776, 0.7523395, 0.96101004,
            0.9997972, 0.42995888, 0.86614877, 0.0841737, 0.895856, 0.11358444, 0.10170663,
            0.68170774, 0.69930184, 0.31476194, 0.37262207, 0.11822087, 0.5850524, 0.7072854,
            0.35515, 0.20403187, 0.682487, 0.44291237, 0.2778266, 0.69825464, 0.9029227, 0.6240293,
            0.41573936, 0.16815847, 0.33923522, 0.80277765, 0.07096831, 0.8554102, 0.7722144,
            0.53853285, 0.94955045, 0.5328812, 0.73666346, 0.11740076, 0.37460858, 0.674916,
            0.9220868, 0.9811295, 0.38428995, 0.8472775, 0.5904251, 0.4929124, 0.49100837,
            0.11250915, 0.43514693, 0.49978712, 0.58982396, 0.32562396, 0.08288938, 0.12515384,
            0.60863686, 0.49698648, 0.2545693, 0.17941345, 0.24435802, 0.9257646, 0.3601743,
            0.51685953, 0.14790155, 0.31631762, 0.6813218, 0.86361974, 0.8700462, 0.5406228,
            0.00816071, 0.81253463, 0.8402446, 0.16182604, 0.9968952, 0.57455206, 0.71637905,
            0.8596117, 0.21274436, 0.5098158, 0.02886825, 0.21751188, 0.23436014, 0.3830526,
            0.6327846, 0.27748674, 0.84223384, 0.9325366, 0.0989435, 0.6051626, 0.08400947,
            0.49678063, 0.97340894, 0.8396681, 0.3482415, 0.10386568, 0.7454953, 0.40149435,
            0.4452185, 0.8714838, 0.44752908, 0.90387195, 0.46964037, 0.4844109, 0.88147926,
            0.5946748, 0.58768094, 0.34565842, 0.46486276, 0.8322659, 0.64309967, 0.46776876,
            0.2263038, 0.70366824, 0.7749035, 0.9106096, 0.48822477, 0.5702429, 0.10668962,
            0.92969257, 0.00275485, 0.9503608, 0.14900696, 0.5455553, 0.00645077, 0.21402211,
            0.7504094, 0.01176434, 0.07800543, 0.0516187, 0.36804476, 0.8195282, 0.7427081,
            0.185258, 0.2418856, 0.5231299, 0.23739757, 0.92642605, 0.8063814, 0.09321253,
            0.3954864, 0.27779007, 0.6142842, 0.71764106, 0.33038312, 0.9766592, 0.42897722,
            0.94963986, 0.37697607, 0.8851262, 0.73109215, 0.6303855, 0.24837622, 0.21866089,
            0.6886716, 0.69469833, 0.0114934, 0.7045316, 0.35201788, 0.0989068, 0.9038667,
            0.51265216, 0.926821, 0.7685541, 0.4955361, 0.48527932, 0.09102922, 0.6430718,
            0.16351804, 0.3052067, 0.49957812, 0.3116739, 0.2785308, 0.13845451, 0.5386763,
            0.85340834, 0.9765559, 0.3653472, 0.02803171, 0.6471354, 0.8093628, 0.38585195,
            0.5898562, 0.17813227, 0.76870936, 0.8990035, 0.4354284, 0.15628383, 0.1745854,
        ],
    )
    .unwrap();

    let kernel32: Array4<f32> = Array::from_shape_vec(
        (3, 2, 3, 3),
        vec![
            0.86026084, 0.93176335, 0.5679988, 0.47061768, 0.53949803, 0.05189181, 0.07629808,
            0.8465009, 0.5065825, 0.7161806, 0.02412173, 0.9533139, 0.94789124, 0.11517583,
            0.85233843, 0.73321646, 0.07861274, 0.33750752, 0.5816211, 0.64147437, 0.7184982,
            0.897314, 0.09359702, 0.19160785, 0.85125345, 0.8526771, 0.4098685, 0.5046985,
            0.18144442, 0.47525635, 0.98244303, 0.1424162, 0.9882022, 0.06972428, 0.20421812,
            0.5577621, 0.30822515, 0.39205092, 0.06246058, 0.02439791, 0.42704046, 0.32884195,
            0.18523273, 0.6523331, 0.8833122, 0.53135425, 0.2849727, 0.68437326, 0.4664868,
            0.6945481, 0.27290356, 0.9941263, 0.01063524, 0.06917533,
        ],
    )
    .unwrap();
    let conv_layer32 = ConvolutionLayer::new(kernel32, 1, Padding::Same);
    let target_output32: Array3<f32> = Array::from_shape_vec(
        (2, 15, 10),
        vec![
            3.4655812, 4.6578693, 4.0343285, 3.9786477, 4.489702, 4.485743, 4.94248, 4.1158037,
            3.7375302, 1.9912653, 4.8404846, 6.7982993, 7.07674, 6.718508, 8.464861, 7.388774,
            7.2143497, 6.924979, 6.704345, 4.3701982, 4.4350038, 5.3558326, 7.1493664, 7.381018,
            8.310474, 8.701729, 7.1930156, 6.8145103, 6.2470603, 4.300132, 4.026315, 4.482962,
            6.308926, 8.809606, 7.4692726, 7.1392474, 6.347535, 6.005782, 6.183258, 4.0950055,
            3.8815854, 4.7271886, 5.378555, 8.1084385, 8.083913, 7.9602475, 9.206119, 7.27275,
            6.7598853, 3.717091, 3.9592688, 5.536323, 5.379293, 6.766364, 7.1423726, 6.9928365,
            6.5754166, 5.5695167, 6.379324, 3.7167635, 4.3983607, 5.123159, 4.526634, 5.7539062,
            7.379478, 8.148416, 7.6526384, 6.939661, 7.066315, 3.7582495, 4.9936166, 6.8641233,
            6.741083, 6.8999515, 6.644924, 7.3167152, 6.82628, 6.070623, 5.761188, 3.357228,
            4.547414, 7.293539, 6.7744193, 7.325848, 6.6924877, 7.910571, 6.3642907, 6.1835556,
            5.9064856, 3.6576717, 3.2386155, 6.4817414, 6.7404337, 8.153639, 7.8266993, 7.0672855,
            6.1710196, 5.4358816, 6.220467, 3.734942, 3.263657, 6.086648, 7.0722933, 8.187157,
            8.7651415, 7.2060804, 7.156653, 6.0829897, 7.4458623, 5.221703, 3.4628198, 6.093356,
            6.9584713, 6.698372, 8.551188, 8.606366, 7.381188, 6.165791, 6.931494, 4.881523,
            5.2445145, 6.4912066, 6.642326, 6.6274395, 6.7773395, 7.28468, 7.7506676, 6.9750133,
            6.6421347, 4.141228, 4.828547, 6.6962132, 6.4655375, 6.541156, 7.093442, 7.835112,
            7.798718, 6.7176003, 6.5531516, 3.7454214, 3.2396119, 4.3643255, 3.1460133, 3.633934,
            3.7321248, 3.9366086, 5.3160644, 5.312517, 4.8776026, 2.0186038, 2.5615292, 6.358427,
            5.1112885, 6.059117, 4.9542785, 5.037449, 5.0565004, 4.951296, 4.603125, 2.3020918,
            2.9073668, 7.80199, 6.00441, 7.4981027, 6.475704, 5.971553, 7.1532135, 6.448281,
            6.337941, 3.4874651, 2.7104313, 6.4968224, 6.3795633, 6.6601033, 8.325606, 6.9313784,
            7.8976846, 7.5744762, 6.1054425, 3.9142253, 2.3566582, 6.5227494, 5.781108, 6.7699795,
            7.624487, 6.933209, 7.106169, 7.3645306, 6.286583, 3.375292, 1.6448027, 5.5585213,
            5.7568903, 6.7253633, 8.031508, 7.3666434, 7.3362494, 5.896788, 6.629081, 2.4144864,
            2.5548682, 5.209841, 5.0490603, 7.058126, 7.117129, 6.9620705, 7.6201463, 6.615265,
            6.204514, 2.522015, 3.9644523, 5.950646, 6.1342616, 6.6159067, 5.5002756, 7.4917555,
            7.4098525, 6.300997, 5.6779027, 2.997615, 4.375842, 6.2740707, 5.4861374, 6.1680603,
            5.3412, 7.916377, 5.9813776, 6.001841, 5.142436, 2.4948604, 4.377868, 5.5428367,
            6.7230506, 8.0227585, 5.833968, 7.587513, 4.4372077, 7.0487328, 3.6353803, 3.2680147,
            2.5613167, 5.7274637, 6.8270416, 8.166823, 6.4869804, 7.584977, 5.6627774, 6.757874,
            5.068691, 3.8720496, 3.35747, 6.0100474, 5.943281, 7.4614043, 7.026761, 7.9233375,
            7.1798887, 7.3070817, 6.731787, 3.6349158, 4.301821, 5.3315573, 7.1607456, 6.927026,
            7.76408, 8.488394, 7.3941903, 6.9788475, 5.8695636, 3.6429644, 4.429824, 5.859842,
            6.514555, 5.884546, 7.113838, 6.8090577, 6.367984, 6.841468, 5.370284, 3.3268433,
            4.6684856, 6.3090234, 7.1023417, 5.786533, 5.7979393, 6.911057, 7.3046527, 7.367911,
            5.7036467, 2.9143982, 3.3366418, 4.418609, 3.2809052, 4.2964034, 3.6643975, 5.0562005,
            5.940092, 4.374425, 4.3754606, 1.8897321,
        ],
    )
    .unwrap();
    let current_output32: Array3<f32> = conv_layer32.convolve(&test_input32);

    assert!(
        arr_allclose(&current_output32, &target_output32),
        "{:?} was not equal to {:?}",
        current_output32,
        target_output32
    );

    let test_input33 = Array::from_shape_vec(
        (3, 15, 10),
        vec![
            0.19982047, 0.2942452, 0.41777328, 0.90395254, 0.4888085, 0.9895415, 0.5478458,
            0.52514094, 0.7139765, 0.96795374, 0.703604, 0.11441413, 0.22741623, 0.14197119,
            0.14224136, 0.00554162, 0.08584995, 0.08854763, 0.55170393, 0.34441712, 0.01855595,
            0.5601068, 0.56593883, 0.16720486, 0.75972295, 0.4493232, 0.38319588, 0.7179427,
            0.19173315, 0.267287, 0.5663951, 0.07816565, 0.67903227, 0.00826331, 0.5425498,
            0.89380723, 0.11534049, 0.7132138, 0.4683366, 0.42596257, 0.4862424, 0.93492687,
            0.6817369, 0.0525712, 0.28192636, 0.4604141, 0.96248484, 0.43289438, 0.34953818,
            0.6902671, 0.5126539, 0.69908696, 0.2879344, 0.06127732, 0.7361598, 0.8519083,
            0.04873959, 0.88632005, 0.55267817, 0.35348675, 0.68609756, 0.07016034, 0.602,
            0.6732832, 0.82135326, 0.18075775, 0.37878716, 0.62920415, 0.3706305, 0.32302734,
            0.90577847, 0.54883826, 0.5766481, 0.9347623, 0.2624883, 0.27476153, 0.09443506,
            0.74253213, 0.01185389, 0.23280993, 0.17598268, 0.19381721, 0.65946394, 0.6743594,
            0.9255945, 0.8947401, 0.9869322, 0.08145659, 0.03987844, 0.7629663, 0.2965461,
            0.38589397, 0.86821306, 0.9996797, 0.77658385, 0.97871965, 0.12471338, 0.48183945,
            0.7989542, 0.61783546, 0.94045246, 0.71905494, 0.43614203, 0.11011575, 0.34765512,
            0.39178115, 0.7308709, 0.34274808, 0.35493043, 0.8328545, 0.06045034, 0.49653238,
            0.29012534, 0.55789274, 0.5755102, 0.4569207, 0.2188389, 0.51010305, 0.9529406,
            0.6924317, 0.91676563, 0.5358466, 0.6751086, 0.5230349, 0.9687458, 0.5856843, 0.700519,
            0.4472085, 0.44401753, 0.76227057, 0.18282856, 0.360823, 0.06306251, 0.769097,
            0.11797103, 0.5069124, 0.8386977, 0.9353965, 0.9456902, 0.21557523, 0.28468877,
            0.00299157, 0.94424677, 0.2590096, 0.12880772, 0.50224614, 0.6319564, 0.05983794,
            0.21579173, 0.9091785, 0.77259356, 0.9772731, 0.90224165, 0.5264099, 0.47108477,
            0.0492401, 0.25460967, 0.99656236, 0.5070151, 0.28755966, 0.36141592, 0.02703854,
            0.16006812, 0.7001516, 0.30561775, 0.8973991, 0.57343286, 0.7367476, 0.2606863,
            0.61278397, 0.9649247, 0.26253387, 0.27807143, 0.7962459, 0.67275447, 0.6407772,
            0.12578371, 0.84160686, 0.3605408, 0.96801484, 0.1393529, 0.72915196, 0.9006433,
            0.49849266, 0.5104628, 0.89867175, 0.955501, 0.59073764, 0.86861897, 0.9176197,
            0.5717296, 0.86013335, 0.39986315, 0.29667476, 0.9421052, 0.89406526, 0.92121494,
            0.05097519, 0.08086525, 0.9667328, 0.5984821, 0.37690058, 0.47047687, 0.24334699,
            0.9472316, 0.71601814, 0.6616385, 0.90634656, 0.49495855, 0.28245237, 0.41918305,
            0.27396587, 0.42253864, 0.94620466, 0.04238893, 0.61110425, 0.9539543, 0.3999544,
            0.66795814, 0.7064477, 0.99121827, 0.9024756, 0.85239345, 0.70719117, 0.7763093,
            0.10098496, 0.23122132, 0.86239356, 0.34863842, 0.10337279, 0.44741336, 0.02051973,
            0.33192208, 0.76970786, 0.37064746, 0.27677527, 0.4141578, 0.34976023, 0.20377244,
            0.15038556, 0.63522565, 0.39588144, 0.29719463, 0.5822416, 0.3832173, 0.7443069,
            0.31255615, 0.26080993, 0.93509567, 0.7061453, 0.4803283, 0.33021635, 0.13239637,
            0.35350803, 0.38336864, 0.51017934, 0.6332842, 0.07322941, 0.8859752, 0.41102257,
            0.2794688, 0.9154152, 0.2293425, 0.81592786, 0.0093977, 0.63983893, 0.7104612,
            0.8665582, 0.9376581, 0.35742825, 0.6020712, 0.42087105, 0.6417253, 0.08560265,
            0.02744765, 0.39207277, 0.21459882, 0.11062973, 0.87420404, 0.69151706, 0.1787167,
            0.85303366, 0.8576095, 0.5125019, 0.4814232, 0.3410254, 0.1897166, 0.5530291,
            0.8993465, 0.99207646, 0.31536198, 0.46590054, 0.01530014, 0.69832444, 0.990704,
            0.02463103, 0.01077096, 0.6721973, 0.6676321, 0.73046064, 0.7690768, 0.53152925,
            0.06813734, 0.47991776, 0.8400259, 0.13388659, 0.6923757, 0.56391525, 0.5064835,
            0.98023206, 0.8316277, 0.45037648, 0.8744264, 0.3228065, 0.77707547, 0.65587145,
            0.15356176, 0.8831219, 0.18077046, 0.81715685, 0.01058917, 0.54235333, 0.9747539,
            0.5249456, 0.14190416, 0.90132594, 0.29823583, 0.59148335, 0.5194669, 0.74204314,
            0.11199604, 0.32003468, 0.50086904, 0.22239625, 0.97291625, 0.86974585, 0.49535275,
            0.5424355, 0.10466193, 0.10202583, 0.25952706, 0.6287949, 0.5330766, 0.2682298,
            0.508476, 0.1925287, 0.09730922, 0.31764308, 0.14314991, 0.9460035, 0.65402883,
            0.71126366, 0.9785876, 0.32067546, 0.7039669, 0.7371736, 0.90192676, 0.7503396,
            0.9941749, 0.78996, 0.61614865, 0.35973564, 0.96392447, 0.5901891, 0.06196258,
            0.83785075, 0.37142363, 0.79140055, 0.07532936, 0.9428474, 0.43666556, 0.02624486,
            0.4253642, 0.78015715, 0.85766184, 0.7146162, 0.33209485, 0.80531436, 0.9730212,
            0.6855751, 0.69086134, 0.61613715, 0.67111015, 0.12122969, 0.50159, 0.74436355,
            0.7383121, 0.23079261, 0.04572792, 0.19533794, 0.4925117, 0.6131918, 0.44526327,
            0.20337714, 0.781168, 0.7058163, 0.46196786, 0.01862379, 0.90610075, 0.8073715,
            0.7148674, 0.5032462, 0.5038819, 0.85626405, 0.24466415, 0.09893908, 0.05245275,
            0.11470018, 0.90349656, 0.31138107, 0.8247195, 0.01722594, 0.5932752, 0.7054897,
            0.5784551, 0.26923984, 0.6289111, 0.11725764, 0.40164033, 0.6951812, 0.8073887,
            0.6793183, 0.7176144, 0.50780314, 0.9401547, 0.35663, 0.00467546, 0.84130347,
            0.34600323, 0.40760243, 0.47107708, 0.98480684, 0.13988449, 0.4022033, 0.558168,
            0.8453326, 0.42742896, 0.4576909, 0.8307157, 0.04634837, 0.39555076, 0.60654116,
            0.9779148, 0.3486375, 0.18171401, 0.93737435, 0.01817268, 0.31007424, 0.4095396,
            0.5559114,
        ],
    )
    .unwrap();

    let kernel33: Array4<f32> = Array::from_shape_vec(
        (3, 2, 3, 3),
        vec![
            0.20362668, 0.3899614, 0.26285827, 0.9031745, 0.95724046, 0.52430856, 0.5576659,
            0.6577067, 0.7514403, 0.533389, 0.94846255, 0.6964576, 0.96843016, 0.66096354,
            0.17514281, 0.83987904, 0.40466377, 0.13681252, 0.5367513, 0.5569262, 0.5836484,
            0.26183346, 0.24014333, 0.45519072, 0.36609647, 0.66722494, 0.40931305, 0.7678357,
            0.71030915, 0.8799919, 0.10468024, 0.23255506, 0.38094538, 0.4090506, 0.59137547,
            0.6625547, 0.6464879, 0.59517515, 0.5136288, 0.05843278, 0.51399225, 0.38453335,
            0.6970278, 0.5047524, 0.06902273, 0.09784848, 0.3510309, 0.9961713, 0.6529659,
            0.4457503, 0.25736928, 0.9593906, 0.07333596, 0.80891675,
        ],
    )
    .unwrap();
    let conv_layer33 = ConvolutionLayer::new(kernel33, 1, Padding::Same);
    let target_output33: Array3<f32> = Array::from_shape_vec(
        (2, 15, 10),
        vec![
            2.6244035, 4.0075674, 4.0262675, 4.443363, 5.032114, 4.355275, 4.5930786, 4.284135,
            5.320257, 3.6512983, 4.4084835, 5.898824, 6.2173133, 6.3990655, 6.607217, 5.6299043,
            6.322653, 6.4496694, 7.7797513, 5.0891953, 3.3518636, 5.6817713, 5.5958157, 6.4309716,
            6.842905, 6.9503183, 7.0866127, 6.100294, 6.290166, 4.337434, 4.082345, 6.5307665,
            6.3567586, 6.0860596, 7.1336436, 7.7249174, 6.9154186, 6.173144, 6.6116695, 4.4686847,
            4.6250997, 7.7082524, 6.384905, 6.3828716, 7.123001, 8.938231, 8.489701, 7.377778,
            7.096464, 5.022979, 5.1107187, 7.488131, 6.6815658, 6.1853824, 6.8481917, 7.3063145,
            7.8993554, 6.9914904, 7.3076935, 5.1982923, 5.0987477, 7.1996174, 7.147551, 8.014116,
            7.777973, 7.0448337, 7.4551067, 7.911395, 7.4736605, 4.259787, 4.672958, 6.783188,
            7.0959973, 7.5778923, 7.115791, 6.6122503, 6.4782996, 5.44908, 5.341405, 3.5064046,
            4.4297247, 6.8752184, 7.5558977, 8.264695, 8.508369, 7.2842865, 6.2579246, 5.880882,
            6.17165, 4.1209245, 4.1943445, 6.218097, 6.6993957, 7.142791, 7.8702745, 7.2884603,
            5.8330145, 5.395676, 5.5987673, 4.9996953, 5.0770035, 6.6005654, 6.347231, 6.715967,
            7.2359986, 6.6062794, 5.811487, 6.3784475, 8.00998, 6.2103715, 5.3580823, 6.8801847,
            6.4714503, 6.0894985, 5.711473, 5.1107707, 5.4255924, 6.6943994, 7.4885216, 5.587402,
            4.9567456, 6.829976, 7.2970133, 7.0461416, 6.9204144, 6.60761, 6.30869, 7.3384023,
            8.291432, 5.9057465, 4.5703363, 6.699662, 6.8758764, 6.6232996, 6.301353, 6.0518765,
            6.4028788, 6.7390776, 7.578917, 5.325868, 2.388908, 3.7786436, 4.5636535, 3.9492402,
            4.0499496, 4.2784557, 4.0159416, 4.503224, 5.1967945, 3.869175, 2.7307315, 3.981562,
            4.1542253, 4.7416186, 4.757863, 4.7318926, 4.6264834, 4.423399, 6.135707, 3.434639,
            4.3386173, 6.639675, 7.39522, 7.689058, 7.200238, 6.606247, 7.0179715, 7.106984,
            9.054373, 4.6236734, 3.5724916, 6.8952017, 6.0464234, 7.1950607, 7.4575624, 8.16951,
            9.002631, 7.112022, 8.411235, 4.279717, 4.673789, 7.761812, 7.0190277, 7.338173,
            8.5130005, 8.114746, 8.53159, 6.389346, 6.7235446, 4.531284, 4.8396378, 8.010392,
            6.44139, 7.4648056, 7.816077, 9.593771, 9.459565, 8.035511, 8.217443, 5.302407,
            5.692446, 7.7436733, 6.66112, 7.8549767, 8.0223, 8.057884, 8.470344, 7.7232337,
            8.175329, 4.3903832, 5.8948965, 9.004889, 7.7396083, 9.357224, 8.497052, 7.3810244,
            8.284775, 8.178604, 7.9402046, 4.5318413, 3.6604536, 7.139876, 8.095594, 8.820894,
            8.225157, 6.8634887, 8.605529, 6.4902277, 6.213605, 3.192346, 4.435677, 7.8843403,
            8.530111, 9.086184, 9.415787, 8.573741, 7.42983, 5.9425855, 6.959939, 5.600977,
            4.6980104, 7.8190103, 6.8191857, 7.6512117, 8.335196, 7.610882, 5.775093, 6.028538,
            6.487521, 5.369356, 5.2323565, 7.272048, 7.0793924, 7.049848, 7.714871, 6.747248,
            6.3844624, 8.387303, 8.449887, 6.6492925, 5.2553854, 7.9639435, 7.273303, 6.7694964,
            6.737878, 6.5446877, 5.550655, 7.0461764, 8.114767, 6.227955, 4.5801587, 7.8064446,
            8.199669, 7.827859, 7.1860757, 6.693421, 7.551051, 8.849312, 9.47054, 6.168256,
            4.5658894, 6.577943, 7.549142, 8.190564, 6.3718376, 6.6494937, 7.252032, 6.2234154,
            7.755841, 5.505126, 2.696559, 3.9922304, 5.144848, 3.424301, 4.418439, 4.2747564,
            4.010662, 4.28429, 4.618142, 3.490685,
        ],
    )
    .unwrap();
    let current_output33: Array3<f32> = conv_layer33.convolve(&test_input33);

    assert!(
        arr_allclose(&current_output33, &target_output33),
        "{:?} was not equal to {:?}",
        current_output33,
        target_output33
    );

    let test_input34 = Array::from_shape_vec(
        (3, 15, 10),
        vec![
            0.5196752, 0.25790986, 0.9833442, 0.63378453, 0.69324833, 0.7669788, 0.6144302,
            0.8679245, 0.25625056, 0.35837704, 0.59633005, 0.8309169, 0.23309404, 0.65488356,
            0.26520997, 0.34644812, 0.87685895, 0.5645692, 0.50217426, 0.967748, 0.969097,
            0.00554681, 0.48245648, 0.05388465, 0.2207341, 0.9374606, 0.7587759, 0.9855095,
            0.38765016, 0.7075585, 0.35234872, 0.86497676, 0.36315936, 0.05972259, 0.400054,
            0.3090082, 0.1404125, 0.32328948, 0.77128536, 0.7420292, 0.0151671, 0.3440802,
            0.36001205, 0.32235637, 0.1375511, 0.39828563, 0.7305659, 0.7766764, 0.86437464,
            0.9027017, 0.4454178, 0.34967113, 0.75469947, 0.3584414, 0.8001929, 0.2543982,
            0.72871476, 0.9618047, 0.34620103, 0.9426159, 0.50686455, 0.6152326, 0.12266664,
            0.559009, 0.21047816, 0.16580608, 0.2582814, 0.15493484, 0.20253018, 0.21612453,
            0.5038661, 0.91294247, 0.8080103, 0.838882, 0.7180022, 0.20993726, 0.58702785,
            0.5285052, 0.00845493, 0.9090709, 0.63151246, 0.8139426, 0.25651568, 0.02755868,
            0.03389508, 0.30576277, 0.37300143, 0.13004215, 0.608248, 0.16874252, 0.27251562,
            0.19374174, 0.22429508, 0.5501398, 0.49685606, 0.46965292, 0.11797722, 0.7302286,
            0.38946074, 0.3407683, 0.72125804, 0.86716634, 0.98185354, 0.15272117, 0.02051388,
            0.27791747, 0.7587074, 0.23504323, 0.02695821, 0.39229694, 0.15247433, 0.48075756,
            0.7610872, 0.22628488, 0.9413573, 0.30246893, 0.01136111, 0.9598438, 0.8383011,
            0.9723616, 0.47197652, 0.94492614, 0.21735138, 0.31927556, 0.39669687, 0.05186762,
            0.79388624, 0.17953911, 0.6036967, 0.9663948, 0.48956135, 0.4727555, 0.41221553,
            0.17531991, 0.84556717, 0.04869543, 0.81426054, 0.8781844, 0.956683, 0.51194495,
            0.7431968, 0.02038087, 0.00589341, 0.4704734, 0.10196105, 0.4856146, 0.2972315,
            0.14647067, 0.2117447, 0.8261646, 0.95831466, 0.9185463, 0.98925644, 0.5729306,
            0.1967555, 0.33214343, 0.24979122, 0.6015046, 0.26777977, 0.9183129, 0.25964326,
            0.38164377, 0.45220876, 0.09959481, 0.9193449, 0.8044326, 0.44542107, 0.30965453,
            0.42501828, 0.6194622, 0.89371026, 0.08402323, 0.5293358, 0.816318, 0.57557297,
            0.08988074, 0.9184309, 0.84704405, 0.9194768, 0.4946111, 0.24117838, 0.97676104,
            0.9935074, 0.9232175, 0.5854387, 0.3386878, 0.5352726, 0.08310746, 0.6829108,
            0.66831505, 0.7869529, 0.42882872, 0.84581494, 0.11308007, 0.07337865, 0.02265424,
            0.6603618, 0.6904631, 0.47793466, 0.58312225, 0.33399308, 0.1441583, 0.03236333,
            0.31139955, 0.23037143, 0.23011816, 0.81936634, 0.9375789, 0.1625122, 0.11950397,
            0.71464306, 0.6463952, 0.5489697, 0.8545862, 0.9213473, 0.52128464, 0.1224625,
            0.6615045, 0.7931158, 0.4731851, 0.48125225, 0.4718432, 0.33050996, 0.32576007,
            0.4363914, 0.01891187, 0.8601632, 0.02397078, 0.53442717, 0.5216071, 0.40344155,
            0.063399, 0.19041517, 0.02668436, 0.07788111, 0.15599571, 0.4338736, 0.8760362,
            0.9668574, 0.7971797, 0.13885641, 0.52926344, 0.32682723, 0.9537846, 0.6078623,
            0.27223235, 0.09553351, 0.8403314, 0.12087691, 0.60492355, 0.03379478, 0.13423896,
            0.23765405, 0.31380126, 0.70387655, 0.79063565, 0.92111635, 0.65776235, 0.38434002,
            0.7584332, 0.2882407, 0.711263, 0.61748165, 0.1864088, 0.6243588, 0.20176977,
            0.02156927, 0.06738149, 0.8982146, 0.2390027, 0.07549326, 0.65994954, 0.01747457,
            0.12387726, 0.06532437, 0.08151705, 0.19784369, 0.64356047, 0.42640674, 0.68663126,
            0.22805685, 0.023332, 0.59032553, 0.8226498, 0.7051767, 0.62274987, 0.63475907,
            0.7238778, 0.5970565, 0.88734704, 0.07542202, 0.71210676, 0.6989102, 0.5070594,
            0.12374777, 0.22591083, 0.26892266, 0.7791601, 0.76115644, 0.91088, 0.5503317,
            0.9804811, 0.03202334, 0.46311814, 0.09919641, 0.26757732, 0.28902137, 0.7140448,
            0.5040979, 0.37557426, 0.5246399, 0.66929567, 0.7025585, 0.66615474, 0.30578545,
            0.35601366, 0.7942114, 0.20677379, 0.15500914, 0.7926027, 0.29064912, 0.8273933,
            0.99714524, 0.5301375, 0.63807166, 0.15588701, 0.53650105, 0.883448, 0.28218988,
            0.3352366, 0.1015854, 0.21515913, 0.0677837, 0.46811357, 0.2523892, 0.1536621,
            0.3143135, 0.53114694, 0.79320407, 0.75357485, 0.07968733, 0.6287965, 0.2200977,
            0.590361, 0.8816608, 0.92466223, 0.23308377, 0.7569012, 0.1372336, 0.72369504,
            0.01938523, 0.989562, 0.82807124, 0.978318, 0.90013695, 0.10934412, 0.31143916,
            0.60268074, 0.89117837, 0.27851093, 0.29225165, 0.16005383, 0.7666568, 0.8990756,
            0.45873183, 0.03297786, 0.4354277, 0.20520075, 0.67032087, 0.70261323, 0.62342596,
            0.4962149, 0.4153414, 0.5587902, 0.40878415, 0.5055576, 0.81622064, 0.5339488,
            0.6388459, 0.304105, 0.82015866, 0.2952592, 0.71163654, 0.9769518, 0.13750617,
            0.10509957, 0.6421733, 0.01179794, 0.86186355, 0.06657688, 0.22622024, 0.97906446,
            0.01797699, 0.04377225, 0.15706603, 0.6343292, 0.5594078, 0.11903284, 0.8178364,
            0.9288911, 0.15461008, 0.9943553, 0.8165832, 0.13425252, 0.9562293, 0.17169783,
            0.05023352, 0.6767696, 0.66343135, 0.32775852, 0.14548539, 0.66260463, 0.9435393,
            0.56790006, 0.22986317, 0.76032287, 0.8746105, 0.2665503, 0.82373565, 0.28121006,
            0.29389632, 0.3074064, 0.40319064, 0.29072547, 0.22278658, 0.21566778, 0.04191615,
            0.35444143, 0.594935, 0.5280909, 0.6227668, 0.9995037, 0.34129518, 0.07482269,
            0.9538717, 0.57593834, 0.6352265, 0.32445627, 0.25140822, 0.93379414, 0.82740843,
            0.18509477, 0.6084598, 0.7941346, 0.13568091, 0.81633985, 0.7832342, 0.7269978,
            0.7938294, 0.24875638,
        ],
    )
    .unwrap();

    let kernel34: Array4<f32> = Array::from_shape_vec(
        (3, 2, 5, 5),
        vec![
            0.53098685, 0.97634184, 0.3654985, 0.6197924, 0.1958822, 0.91466755, 0.82326293,
            0.05417962, 0.2876998, 0.34076488, 0.22490515, 0.34424198, 0.8024984, 0.86761755,
            0.2457382, 0.94153976, 0.42271057, 0.8497308, 0.13301279, 0.01450239, 0.12739219,
            0.2980205, 0.1089614, 0.4534563, 0.20752071, 0.44084755, 0.32884085, 0.78595555,
            0.29699826, 0.8696194, 0.87364227, 0.1825079, 0.8653281, 0.11152316, 0.10165259,
            0.30172202, 0.5634873, 0.79023945, 0.12142149, 0.89489484, 0.32732126, 0.16754848,
            0.14866899, 0.72059697, 0.48512897, 0.1768624, 0.36138168, 0.34082386, 0.24096294,
            0.5398071, 0.52981263, 0.8495612, 0.45151472, 0.01440341, 0.92154115, 0.32281688,
            0.9658324, 0.11643393, 0.02498931, 0.74842566, 0.71275234, 0.38320434, 0.3124743,
            0.99616134, 0.10025226, 0.60567856, 0.8189058, 0.44458553, 0.2570787, 0.15552202,
            0.5807619, 0.05135555, 0.30162072, 0.84052527, 0.06775604, 0.61146617, 0.77579254,
            0.7554349, 0.9041999, 0.5885413, 0.43739402, 0.9121548, 0.704337, 0.71699256,
            0.41252124, 0.49857914, 0.77542007, 0.62377745, 0.58095855, 0.35906684, 0.62711567,
            0.6132724, 0.54546535, 0.83928454, 0.8303008, 0.1890054, 0.23060308, 0.5893513,
            0.16549692, 0.61116034, 0.2488159, 0.99599046, 0.39940432, 0.11897708, 0.15867555,
            0.76753354, 0.31943667, 0.56480473, 0.5548302, 0.409648, 0.16849968, 0.04038839,
            0.7188009, 0.05252765, 0.41155177, 0.6754611, 0.5676015, 0.26794127, 0.53823626,
            0.615944, 0.17735237, 0.6197911, 0.5388062, 0.47061965, 0.87098825, 0.0603164,
            0.68002754, 0.23997463, 0.3244519, 0.17411815, 0.42630666, 0.2310866, 0.984915,
            0.023685, 0.17943048, 0.63610965, 0.66366726, 0.30550992, 0.5162294, 0.4861491,
            0.7804716, 0.16118859, 0.13860539, 0.24022588, 0.27965236, 0.00709001, 0.99179137,
            0.451131, 0.7894441, 0.71554166,
        ],
    )
    .unwrap();
    let conv_layer34 = ConvolutionLayer::new(kernel34, 1, Padding::Same);
    let target_output34: Array3<f32> = Array::from_shape_vec(
        (2, 15, 10),
        vec![
            7.6072555, 10.43858, 10.679066, 11.1397, 10.860747, 11.275884, 11.733051, 11.952588,
            9.804367, 5.266409, 10.819933, 12.552582, 15.328887, 14.04681, 12.79217, 14.789325,
            14.265021, 14.835879, 12.315232, 7.984031, 11.787865, 14.641188, 14.911667, 15.80016,
            16.37515, 15.896073, 16.9949, 19.546364, 15.83896, 10.576507, 10.92767, 13.458151,
            16.9918, 16.416142, 15.698708, 19.336334, 17.881718, 18.066408, 14.865918, 10.714451,
            10.285776, 14.964782, 16.563713, 15.508837, 14.684996, 16.04409, 16.589851, 17.889952,
            15.035023, 11.490028, 9.983557, 13.169498, 16.316076, 15.570469, 15.242731, 15.97988,
            16.361462, 16.903978, 14.420468, 9.253165, 11.138855, 13.279749, 16.418705, 14.3130045,
            14.633086, 16.462376, 15.745613, 16.319105, 13.246834, 9.278077, 10.200201, 13.7110195,
            14.910676, 15.329247, 15.206384, 14.362786, 14.890619, 15.591686, 12.738765, 8.798817,
            10.779865, 14.37692, 15.564391, 14.483243, 13.516119, 14.544223, 15.49533, 14.927733,
            13.220946, 9.462505, 10.702056, 13.575847, 14.228859, 14.075223, 15.103575, 14.985487,
            15.199605, 15.918169, 14.393068, 8.177099, 10.171806, 12.087721, 14.624012, 14.988651,
            12.161457, 12.735344, 14.985874, 17.880018, 12.933559, 8.517632, 10.840916, 11.094614,
            14.597444, 15.247539, 13.789614, 16.179276, 15.787938, 16.271103, 15.283812, 10.626338,
            9.917088, 12.746841, 16.10982, 14.383791, 15.01853, 15.178543, 16.606657, 19.063438,
            14.205267, 10.337961, 7.1834908, 10.162245, 10.407826, 10.710383, 11.901688, 11.515143,
            13.28738, 14.474305, 12.236492, 9.349119, 5.398733, 6.0980597, 8.988067, 7.7202463,
            7.8234367, 8.418482, 9.06045, 10.44982, 8.753122, 6.242979, 8.798881, 10.78223,
            12.298549, 11.070332, 11.81977, 12.084615, 12.720737, 13.240874, 10.357359, 8.956159,
            10.697593, 13.3500185, 16.194077, 16.321888, 15.124826, 15.300919, 14.254201,
            16.204092, 13.404726, 10.158543, 12.036596, 14.419333, 18.672216, 16.686426, 17.211737,
            16.727062, 17.811314, 20.364698, 17.517956, 13.815237, 10.330741, 14.577994, 17.024443,
            16.066803, 16.959602, 18.022022, 18.118921, 20.280619, 17.74116, 13.464186, 10.282534,
            14.676974, 18.905384, 17.988232, 16.924618, 17.48408, 18.412498, 18.700794, 16.38886,
            12.363366, 10.437788, 13.969578, 17.857244, 17.570044, 16.482067, 15.80206, 16.806442,
            17.10823, 15.84414, 12.865923, 10.652416, 13.508177, 16.340792, 14.702993, 14.773577,
            15.760734, 16.279463, 17.244524, 15.811391, 11.730065, 10.765959, 13.541113, 16.972794,
            16.61636, 15.750644, 16.5815, 17.295313, 16.288624, 15.421367, 11.935392, 9.4286785,
            13.491704, 16.02615, 16.260765, 15.912403, 16.029644, 15.040444, 16.432539, 15.054271,
            10.144722, 9.99107, 12.715715, 16.197123, 14.839467, 15.846743, 14.603718, 16.862228,
            17.68158, 14.719795, 12.403035, 9.6572075, 12.324846, 16.512405, 15.016966, 13.601559,
            14.323522, 14.930474, 16.328516, 14.912847, 11.535779, 10.017731, 11.499048, 14.892451,
            15.857733, 16.270403, 15.034371, 18.090193, 19.443594, 16.700104, 13.600384, 10.4669,
            12.473109, 15.41318, 16.185823, 15.773169, 14.655027, 17.83398, 17.29105, 16.095825,
            13.439801, 7.782317, 9.294842, 12.453248, 13.28033, 11.863316, 12.0419445, 13.922984,
            15.521397, 13.534628, 10.293982, 4.801642, 6.732478, 9.111569, 8.734518, 8.57885,
            9.408665, 9.386013, 11.295777, 10.277696, 8.399108,
        ],
    )
    .unwrap();
    let current_output34: Array3<f32> = conv_layer34.convolve(&test_input34);

    assert!(
        arr_allclose(&current_output34, &target_output34),
        "{:?} was not equal to {:?}",
        current_output34,
        target_output34
    );

    let test_input35 = Array::from_shape_vec(
        (3, 15, 10),
        vec![
            0.9964236, 0.85572857, 0.08051511, 0.48360798, 0.39250162, 0.6405559, 0.65542877,
            0.00926249, 0.49451137, 0.92131656, 0.2670481, 0.4149794, 0.62419057, 0.6299236,
            0.72737783, 0.28075695, 0.6380664, 0.72403, 0.95138586, 0.15112722, 0.04702903,
            0.03742034, 0.12904108, 0.40806046, 0.24292202, 0.9610627, 0.152939, 0.5112613,
            0.7121952, 0.44103095, 0.09925622, 0.4587128, 0.2244921, 0.3738838, 0.44769827,
            0.68232304, 0.3501035, 0.90325624, 0.18933062, 0.683113, 0.37947366, 0.83893037,
            0.00036895, 0.8030902, 0.15520981, 0.31636, 0.03485033, 0.21666723, 0.5258305,
            0.4617171, 0.45026395, 0.20907213, 0.6479722, 0.9916083, 0.31935102, 0.53539133,
            0.29856464, 0.46920267, 0.2788216, 0.2287987, 0.9548321, 0.2423434, 0.12699115,
            0.22725932, 0.5864343, 0.4539676, 0.72710156, 0.67460907, 0.7224578, 0.9838608,
            0.46925062, 0.7267446, 0.7348552, 0.07147343, 0.03087187, 0.95043266, 0.7644256,
            0.6736655, 0.1939531, 0.8566437, 0.8916521, 0.8495752, 0.29966143, 0.22144382,
            0.84936816, 0.05329819, 0.5158916, 0.31214204, 0.60962343, 0.2085157, 0.020407,
            0.9285702, 0.39927888, 0.29198912, 0.32679623, 0.95807105, 0.5470224, 0.3903264,
            0.2943695, 0.7187741, 0.64249885, 0.90529513, 0.9696485, 0.96716243, 0.7952436,
            0.8560521, 0.897583, 0.26358747, 0.4610603, 0.24524814, 0.4270144, 0.36576656,
            0.52139103, 0.49643677, 0.02449073, 0.32803342, 0.52485585, 0.59270257, 0.5181942,
            0.10436007, 0.5402461, 0.51220167, 0.9574334, 0.12048424, 0.18159197, 0.12942687,
            0.54154533, 0.8665665, 0.2244735, 0.6322593, 0.9785378, 0.00970959, 0.5571932,
            0.7287427, 0.6722845, 0.08840237, 0.7786622, 0.55595505, 0.49039194, 0.29876545,
            0.9639111, 0.6217684, 0.75457317, 0.07906571, 0.24218307, 0.20196797, 0.6608763,
            0.6632383, 0.17440334, 0.51526874, 0.8816509, 0.39972377, 0.00945449, 0.15960339,
            0.9031067, 0.92360485, 0.6093835, 0.0279216, 0.57159376, 0.739127, 0.07560094,
            0.5449533, 0.31076494, 0.4063533, 0.61592543, 0.6617724, 0.89307874, 0.14274225,
            0.7946265, 0.26793155, 0.01026518, 0.35911655, 0.54531777, 0.46913606, 0.69393593,
            0.76704943, 0.17376864, 0.15214977, 0.24446122, 0.38009068, 0.18737185, 0.5655409,
            0.26423022, 0.74053663, 0.855276, 0.57912683, 0.7191395, 0.46456698, 0.73671806,
            0.43812937, 0.6747385, 0.7878329, 0.6957145, 0.25479087, 0.9675421, 0.9952376,
            0.7553026, 0.39445186, 0.16850758, 0.47348526, 0.3428721, 0.7345647, 0.4810381,
            0.06958814, 0.4049107, 0.01440958, 0.5659006, 0.4767252, 0.89691705, 0.71229553,
            0.6637993, 0.378025, 0.6954722, 0.42989764, 0.4112019, 0.9774286, 0.3272699, 0.3518699,
            0.87228006, 0.7196134, 0.38309374, 0.38645524, 0.96709275, 0.97874445, 0.05056721,
            0.5945655, 0.25838065, 0.280568, 0.12965602, 0.16904165, 0.7337121, 0.5255171,
            0.53067166, 0.79937047, 0.92811966, 0.42017522, 0.9749549, 0.86373013, 0.45530656,
            0.49178642, 0.7708463, 0.4978779, 0.6229996, 0.8937434, 0.14543204, 0.46538925,
            0.25468576, 0.55258465, 0.7953501, 0.34347492, 0.947921, 0.7406703, 0.530338,
            0.23003381, 0.51276684, 0.6199976, 0.7165106, 0.31285286, 0.01742517, 0.79403925,
            0.44514382, 0.47107297, 0.11938072, 0.53394765, 0.07118031, 0.26642635, 0.608863,
            0.6127199, 0.57685304, 0.63766026, 0.09857575, 0.9238777, 0.58972347, 0.81341505,
            0.23035105, 0.14867568, 0.2806283, 0.4781139, 0.9134012, 0.32021993, 0.82838976,
            0.8087745, 0.3820947, 0.15508978, 0.8816074, 0.9581791, 0.95054454, 0.7201289,
            0.2628233, 0.42030758, 0.08099908, 0.9801681, 0.9285927, 0.23243731, 0.01609867,
            0.95514953, 0.2603031, 0.5272288, 0.1027505, 0.5149132, 0.8630202, 0.9967142,
            0.83670455, 0.8208894, 0.39562112, 0.5423381, 0.3541803, 0.7045485, 0.17121983,
            0.07215097, 0.7547516, 0.43495062, 0.05219934, 0.32704812, 0.8069043, 0.3644227,
            0.3185606, 0.8381945, 0.18509601, 0.78284556, 0.14064422, 0.0866156, 0.76108783,
            0.20690504, 0.81923145, 0.86893994, 0.08369987, 0.8462739, 0.19355603, 0.45527726,
            0.07187212, 0.165468, 0.19925202, 0.19391125, 0.98580116, 0.11626041, 0.9640388,
            0.83806276, 0.68621, 0.20116507, 0.6458135, 0.7946413, 0.5135085, 0.96608514,
            0.2866232, 0.04018129, 0.4744012, 0.56197965, 0.44840696, 0.51113236, 0.34871954,
            0.3864388, 0.7972437, 0.418459, 0.6831303, 0.5827626, 0.24505354, 0.45846483,
            0.35040325, 0.81632674, 0.45164114, 0.34192115, 0.01926605, 0.60945815, 0.00720319,
            0.16734742, 0.14712231, 0.5927163, 0.54784405, 0.10600431, 0.8042268, 0.9593917,
            0.54439926, 0.09722981, 0.538895, 0.96085125, 0.12880406, 0.82884103, 0.89940333,
            0.896239, 0.00895003, 0.6723138, 0.5635491, 0.5774044, 0.8294056, 0.7330833, 0.7182023,
            0.2400944, 0.08234657, 0.8326292, 0.81366646, 0.56454206, 0.41107583, 0.1530087,
            0.10750511, 0.6369332, 0.55479336, 0.8068582, 0.87786776, 0.0768621, 0.5117609,
            0.02565966, 0.81959426, 0.8734937, 0.9121203, 0.14144829, 0.6808026, 0.56961155,
            0.09299238, 0.07851031, 0.09498502, 0.39703202, 0.3460928, 0.7413816, 0.50219774,
            0.09790236, 0.7560407, 0.5504823, 0.0988896, 0.3634248, 0.7626221, 0.36921418,
            0.69651574, 0.02017781, 0.69639486, 0.1327469, 0.20396212, 0.37377915, 0.8627079,
            0.2315043, 0.9150178, 0.05492407, 0.28059694, 0.77607256, 0.6814465, 0.0384257,
            0.41136658, 0.07444459, 0.92572653, 0.19929981, 0.60906744, 0.85304475, 0.435523,
            0.34991544, 0.9227076, 0.24557048, 0.7524436, 0.61218125, 0.02676343, 0.68666,
        ],
    )
    .unwrap();

    let kernel35: Array4<f32> = Array::from_shape_vec(
        (3, 2, 5, 5),
        vec![
            0.01549418, 0.47552216, 0.6233486, 0.5846968, 0.5351139, 0.7165851, 0.95146346,
            0.3654481, 0.58597034, 0.28302717, 0.684635, 0.33453104, 0.21812607, 0.02301173,
            0.1716157, 0.21556447, 0.9240008, 0.87333375, 0.97975385, 0.80055225, 0.38515112,
            0.96327585, 0.7670258, 0.89840883, 0.27143422, 0.04667937, 0.8971626, 0.66015846,
            0.30812186, 0.9944557, 0.32269347, 0.906517, 0.42958102, 0.19323848, 0.894492,
            0.41707778, 0.047074, 0.15186748, 0.42941824, 0.06797581, 0.7101957, 0.21114524,
            0.90267074, 0.18382856, 0.3805317, 0.7464236, 0.54372054, 0.98692304, 0.43391776,
            0.21931884, 0.6479137, 0.46971908, 0.41600463, 0.03177308, 0.36561352, 0.897173,
            0.02432681, 0.76844287, 0.93577814, 0.47288647, 0.7132774, 0.16475675, 0.4621884,
            0.682621, 0.05393951, 0.04056123, 0.3831229, 0.25017264, 0.5441924, 0.18582676,
            0.5847652, 0.44094405, 0.9492341, 0.40716594, 0.70403796, 0.6190288, 0.27133584,
            0.49946982, 0.49807012, 0.13783294, 0.75838685, 0.7099942, 0.4189943, 0.948784,
            0.46828213, 0.5418886, 0.28150013, 0.44120148, 0.5618839, 0.16930467, 0.879468,
            0.02054715, 0.36957732, 0.24645625, 0.14384301, 0.44379708, 0.07697041, 0.8383886,
            0.2855142, 0.53293884, 0.32704464, 0.48172623, 0.8055037, 0.3063715, 0.26814866,
            0.34428266, 0.46858206, 0.08870029, 0.17744416, 0.601813, 0.5264963, 0.11456152,
            0.59114003, 0.5420228, 0.35435796, 0.77906114, 0.23198476, 0.61676294, 0.9468379,
            0.8001697, 0.2724277, 0.01428977, 0.39779025, 0.28065884, 0.00778698, 0.09425906,
            0.5519918, 0.08802161, 0.92948604, 0.7061356, 0.7931947, 0.5900978, 0.06217905,
            0.47630212, 0.30325878, 0.18036312, 0.6808438, 0.8025547, 0.65311456, 0.64131045,
            0.73011106, 0.6758199, 0.88006234, 0.6694761, 0.03111337, 0.33597425, 0.11015231,
            0.11921299, 0.25126496, 0.69373703,
        ],
    )
    .unwrap();
    let conv_layer35 = ConvolutionLayer::new(kernel35, 1, Padding::Same);
    let target_output35: Array3<f32> = Array::from_shape_vec(
        (2, 15, 10),
        vec![
            4.6616116, 6.9547434, 9.540699, 9.98484, 10.174076, 9.993622, 10.72259, 9.9982195,
            6.616573, 5.6130795, 6.9292326, 10.236276, 13.266792, 13.819, 14.65427, 14.892689,
            15.873389, 13.864929, 10.140635, 8.17366, 9.868962, 12.85316, 17.442625, 17.988873,
            17.599955, 19.40217, 18.31242, 17.54111, 14.1600685, 11.176715, 8.111022, 11.178362,
            16.56732, 16.46097, 18.469542, 18.96197, 18.801243, 18.264456, 13.820869, 10.584989,
            8.167924, 11.551263, 15.248367, 15.297977, 16.55169, 16.911983, 17.610373, 17.689213,
            14.643673, 11.389269, 10.689878, 14.809057, 17.494928, 16.668482, 16.444204, 18.049006,
            17.5339, 18.051847, 14.828618, 12.142507, 12.143582, 15.280431, 18.121937, 19.871782,
            18.725437, 17.049397, 17.15054, 16.87941, 12.813026, 10.371718, 11.928594, 15.548768,
            16.757952, 16.780958, 16.394983, 17.358276, 17.47057, 18.229809, 15.487957, 11.7558565,
            12.38387, 15.870664, 19.324749, 19.643429, 19.6674, 18.909569, 19.506554, 19.760654,
            15.336713, 11.819604, 12.45877, 17.403166, 19.157621, 19.303623, 17.879568, 18.78325,
            17.699505, 17.659204, 13.150539, 9.392302, 12.253082, 16.584614, 18.03794, 16.69534,
            17.26706, 16.555481, 17.331404, 17.239676, 14.126001, 10.674196, 12.08635, 16.122871,
            18.36002, 18.379358, 19.415073, 18.641504, 17.854826, 16.250433, 14.277638, 9.315176,
            12.681873, 16.853052, 20.087088, 16.750511, 18.27877, 17.829872, 16.776983, 17.099365,
            12.944653, 9.565495, 9.460359, 12.227554, 14.750208, 13.194927, 11.793679, 12.301875,
            13.371366, 12.801596, 11.280292, 8.428974, 7.415888, 10.250968, 11.303858, 9.819318,
            9.445411, 10.258322, 10.2621565, 9.541457, 8.783028, 6.1030483, 4.58826, 7.4849596,
            10.124659, 10.824396, 11.10261, 11.161266, 12.051965, 11.191683, 7.536891, 6.0160933,
            7.5572743, 9.96872, 12.223139, 14.498136, 13.784983, 14.372829, 15.611204, 14.020171,
            10.553084, 8.829113, 9.630369, 12.133034, 17.27304, 18.046717, 18.724813, 19.225616,
            18.598461, 16.407927, 13.2028885, 10.725393, 8.15842, 11.819114, 17.12447, 17.99831,
            16.756643, 19.290981, 18.467405, 17.254745, 13.933101, 9.297443, 8.301515, 11.756815,
            16.450254, 16.19484, 16.129248, 17.86762, 17.361877, 17.958143, 13.473424, 11.45211,
            9.990756, 15.187977, 16.534655, 17.305605, 16.393976, 15.922887, 18.101286, 17.710142,
            15.09575, 12.34737, 12.254318, 15.118163, 17.57789, 18.929482, 17.346827, 16.813715,
            16.88785, 17.004417, 13.268416, 9.717786, 12.442566, 15.235101, 17.33631, 18.724346,
            16.848566, 15.872942, 18.046585, 18.630398, 14.872822, 11.3230715, 12.898811,
            16.327538, 17.50808, 19.14862, 19.490284, 21.170105, 18.685244, 19.111622, 14.740389,
            11.5099745, 12.283954, 16.214985, 19.55008, 18.198406, 18.606192, 18.875908, 16.799479,
            17.791676, 13.135049, 9.221386, 11.166601, 16.256529, 16.863464, 16.33337, 17.09118,
            16.913174, 17.619488, 16.602257, 13.293717, 10.046024, 11.196817, 15.4187, 18.968649,
            17.939743, 17.53941, 17.780025, 16.785131, 15.863572, 12.453141, 10.242471, 11.918896,
            16.429949, 20.21774, 17.52534, 17.190811, 17.780582, 17.67955, 15.651945, 13.144656,
            8.93616, 10.46834, 11.692631, 13.261278, 12.177281, 11.978553, 12.620024, 12.335543,
            12.3097, 10.653181, 7.291269, 7.747903, 8.651203, 10.786283, 9.852916, 9.362942,
            8.441226, 9.463098, 8.718998, 7.1190434, 5.4253025,
        ],
    )
    .unwrap();
    let current_output35: Array3<f32> = conv_layer35.convolve(&test_input35);

    assert!(
        arr_allclose(&current_output35, &target_output35),
        "{:?} was not equal to {:?}",
        current_output35,
        target_output35
    );

    let test_input36 = Array::from_shape_vec(
        (3, 15, 10),
        vec![
            0.76781565, 0.11956753, 0.23382041, 0.8918218, 0.5422157, 0.69890016, 0.7473441,
            0.1025933, 0.24523091, 0.5532268, 0.29599845, 0.33235383, 0.6964844, 0.34388152,
            0.44655514, 0.10984504, 0.6096152, 0.6824109, 0.59089476, 0.74966764, 0.4055674,
            0.6066833, 0.03922287, 0.5139047, 0.27276048, 0.22169068, 0.16944607, 0.1006932,
            0.54000634, 0.38137078, 0.0453749, 0.7720287, 0.3950377, 0.47227803, 0.08456346,
            0.99505395, 0.5079503, 0.09107142, 0.49050683, 0.9648078, 0.49166626, 0.12798251,
            0.8570686, 0.6969486, 0.550415, 0.72912633, 0.30650783, 0.0107817, 0.53507906,
            0.33481097, 0.9804115, 0.00238096, 0.6885192, 0.01554713, 0.11027454, 0.92016417,
            0.5638509, 0.1789127, 0.78164, 0.73606557, 0.59824157, 0.56275487, 0.02244601,
            0.17319581, 0.5161816, 0.71388936, 0.37650406, 0.85731035, 0.8822338, 0.59797186,
            0.47906098, 0.41637895, 0.40831715, 0.7001218, 0.5204471, 0.54864365, 0.8242743,
            0.31435138, 0.02069527, 0.43211794, 0.7621477, 0.6553853, 0.8650503, 0.5980359,
            0.80163413, 0.69807684, 0.9225537, 0.8177609, 0.70200926, 0.43390045, 0.7971179,
            0.6481248, 0.18671374, 0.08406905, 0.7281945, 0.14004932, 0.508026, 0.01313858,
            0.37515613, 0.11442149, 0.7139359, 0.11509855, 0.04620427, 0.00338423, 0.58042264,
            0.3497844, 0.3701509, 0.11006287, 0.45462498, 0.6825711, 0.05430869, 0.07369657,
            0.29473898, 0.7133292, 0.52332807, 0.34203872, 0.24697433, 0.74098635, 0.6492484,
            0.58181113, 0.46049482, 0.78417206, 0.8818306, 0.33960003, 0.35578284, 0.24270806,
            0.93051934, 0.92984384, 0.16793567, 0.71563727, 0.5067316, 0.7600932, 0.7999726,
            0.14365989, 0.5092142, 0.00534251, 0.80710125, 0.2787269, 0.8396754, 0.30427325,
            0.936621, 0.9142885, 0.8632821, 0.55376446, 0.625111, 0.4412164, 0.3195551, 0.6029102,
            0.9898425, 0.9381164, 0.6333335, 0.13985266, 0.8077021, 0.7700269, 0.50355774,
            0.10565319, 0.23793669, 0.71038556, 0.67167306, 0.8206902, 0.75199634, 0.76066047,
            0.3374138, 0.20438518, 0.09583076, 0.26670292, 0.302565, 0.96722347, 0.08686233,
            0.32253316, 0.6016514, 0.1029643, 0.24522461, 0.7150578, 0.4008225, 0.38874564,
            0.6595543, 0.95465165, 0.01596426, 0.76611406, 0.8181969, 0.03268935, 0.7153868,
            0.66963005, 0.5199071, 0.2819424, 0.7306344, 0.9730751, 0.6738613, 0.0549346,
            0.25791696, 0.5304246, 0.8426447, 0.72531515, 0.13520858, 0.96914834, 0.8901288,
            0.7469712, 0.6678507, 0.3369298, 0.81467754, 0.57052803, 0.7706615, 0.3061074,
            0.34104946, 0.58939576, 0.35754028, 0.2814671, 0.24533354, 0.47058627, 0.61166996,
            0.45030525, 0.36717632, 0.41391012, 0.09461671, 0.23220702, 0.12344587, 0.6565849,
            0.26958194, 0.6252355, 0.66725403, 0.28030816, 0.94266546, 0.36014387, 0.18757097,
            0.5703369, 0.16459827, 0.30671576, 0.21797805, 0.7206875, 0.6050165, 0.8809775,
            0.66180915, 0.75661963, 0.29241282, 0.1968727, 0.4542289, 0.02982224, 0.2568436,
            0.9907141, 0.44230437, 0.69032484, 0.03288648, 0.11709308, 0.47962424, 0.00421954,
            0.10283989, 0.3329353, 0.63708895, 0.4274258, 0.31321532, 0.22448166, 0.66300994,
            0.61263674, 0.2107704, 0.11320372, 0.15715665, 0.80958194, 0.08474967, 0.04113929,
            0.32154062, 0.849806, 0.31686947, 0.7765318, 0.8935719, 0.54813904, 0.01871248,
            0.21038549, 0.5478772, 0.82956314, 0.55810463, 0.7496332, 0.09080196, 0.33296862,
            0.8914651, 0.01912449, 0.12571159, 0.70726824, 0.46620196, 0.23451181, 0.7185725,
            0.6916267, 0.9052224, 0.10002703, 0.20822853, 0.1988695, 0.57364607, 0.4514327,
            0.55767894, 0.21136971, 0.11364792, 0.9546512, 0.6512276, 0.5546642, 0.12630945,
            0.51929957, 0.7541355, 0.6958903, 0.40889722, 0.6899308, 0.5024765, 0.99110264,
            0.9034433, 0.05693591, 0.5522474, 0.694196, 0.0815046, 0.30395797, 0.5063144,
            0.00728971, 0.00863769, 0.94890165, 0.6072152, 0.1212473, 0.61905736, 0.04567454,
            0.1666415, 0.40940228, 0.29845986, 0.5887852, 0.7602986, 0.11050353, 0.6696046,
            0.07813971, 0.38485697, 0.10532968, 0.61089563, 0.09593545, 0.5708666, 0.6752682,
            0.43946478, 0.41972712, 0.7528657, 0.8565683, 0.0050115, 0.02211638, 0.18553229,
            0.9416627, 0.964609, 0.06604452, 0.2743094, 0.2357167, 0.5574499, 0.5644317,
            0.94941133, 0.6237617, 0.6896496, 0.23183365, 0.04779868, 0.58043236, 0.6772494,
            0.13355136, 0.593486, 0.30506894, 0.44111732, 0.45790267, 0.6058327, 0.66940916,
            0.30341497, 0.23764269, 0.255508, 0.18811014, 0.63789237, 0.8048158, 0.9402614,
            0.2806987, 0.21831155, 0.7669063, 0.8436678, 0.2923272, 0.634105, 0.92047054,
            0.9146937, 0.7982995, 0.04169853, 0.87467635, 0.41619235, 0.840219, 0.76187396,
            0.12894545, 0.43775168, 0.5403959, 0.52092886, 0.24986073, 0.89598167, 0.521647,
            0.81967235, 0.43917, 0.15041436, 0.51197404, 0.96864545, 0.6379747, 0.3724083,
            0.08220442, 0.24152991, 0.34628263, 0.9865399, 0.01694399, 0.63907087, 0.9424468,
            0.08953476, 0.25998822, 0.2556481, 0.18014309, 0.8692504, 0.81214136, 0.27443436,
            0.84424555, 0.9677495, 0.07064668, 0.99396145, 0.74180704, 0.9068687, 0.49582243,
            0.1071836, 0.15657824, 0.18524589, 0.25940374, 0.74904203, 0.26350108, 0.99580127,
            0.41392356, 0.7190492, 0.5932102, 0.36214927, 0.7134346, 0.04343178, 0.01264012,
            0.30633783, 0.7311494, 0.06306978, 0.63444036, 0.04783731, 0.13794519, 0.38289404,
            0.72769856, 0.43036366, 0.43202257, 0.6176036, 0.55465347, 0.26971525, 0.37383646,
            0.5103922, 0.60774666, 0.3769874, 0.5617109, 0.51972485, 0.35903165, 0.83329135,
            0.38157287,
        ],
    )
    .unwrap();

    let kernel36: Array4<f32> = Array::from_shape_vec(
        (3, 2, 5, 5),
        vec![
            0.19452758, 0.9900095, 0.5688352, 0.38870603, 0.93941313, 0.54574215, 0.8724074,
            0.06244482, 0.7421376, 0.39895928, 0.45440432, 0.7743095, 0.6971712, 0.03544521,
            0.69407845, 0.26511827, 0.5651197, 0.48221946, 0.7607782, 0.8649758, 0.2564574,
            0.93321526, 0.784176, 0.86321056, 0.9557799, 0.7198472, 0.54026544, 0.15434536,
            0.09155878, 0.715203, 0.502141, 0.49909648, 0.6098034, 0.9002247, 0.95214695, 0.250633,
            0.793483, 0.31241128, 0.16839387, 0.8495973, 0.77755684, 0.67304164, 0.62291604,
            0.5917267, 0.5918919, 0.70248216, 0.7110755, 0.545842, 0.21467632, 0.26781648,
            0.05703689, 0.8860448, 0.97129184, 0.67114294, 0.53076035, 0.73335916, 0.86454815,
            0.8135725, 0.7166568, 0.7596735, 0.2597569, 0.6837008, 0.49211782, 0.6234512,
            0.26292253, 0.7031715, 0.51520824, 0.34538904, 0.9509948, 0.77339244, 0.3037366,
            0.00554333, 0.00499232, 0.56012625, 0.04692093, 0.95133615, 0.4318458, 0.58763003,
            0.0488642, 0.02556094, 0.17130233, 0.1298894, 0.5945981, 0.00256654, 0.8014985,
            0.8908257, 0.2149228, 0.42144233, 0.49002212, 0.61149436, 0.47333992, 0.30657023,
            0.46667865, 0.9132112, 0.40754157, 0.6353514, 0.5068442, 0.90569776, 0.14007695,
            0.7795671, 0.5276461, 0.1113743, 0.85458857, 0.05200182, 0.762922, 0.6828541,
            0.79006946, 0.99515516, 0.07048018, 0.7193077, 0.1785365, 0.8050948, 0.5620368,
            0.53197616, 0.12924373, 0.6227516, 0.92304647, 0.35233787, 0.04703298, 0.89363664,
            0.8008906, 0.4826988, 0.24232654, 0.9236824, 0.53568405, 0.99749255, 0.00387712,
            0.27529702, 0.75773144, 0.68179756, 0.28086394, 0.14250895, 0.6985803, 0.00022103,
            0.21589486, 0.17350982, 0.5402848, 0.9610416, 0.96504945, 0.0072373, 0.43020758,
            0.8641754, 0.04885763, 0.94388, 0.6947651, 0.87142104, 0.6279961, 0.5023904, 0.7267018,
            0.34156242,
        ],
    )
    .unwrap();
    let conv_layer36 = ConvolutionLayer::new(kernel36, 1, Padding::Same);
    let target_output36: Array3<f32> = Array::from_shape_vec(
        (2, 15, 10),
        vec![
            8.515125, 9.2703905, 11.829499, 10.46796, 9.89534, 9.712115, 10.414923, 10.194947,
            10.207736, 6.9691195, 10.834771, 12.734807, 15.93234, 13.98916, 15.385669, 14.895266,
            14.960658, 16.269897, 14.638831, 9.616816, 12.134171, 15.954739, 20.15891, 19.744991,
            19.579414, 19.623564, 19.78278, 19.807205, 17.08389, 11.203085, 11.363733, 16.28977,
            20.270676, 18.246136, 20.60222, 19.057974, 18.01047, 20.687634, 18.451757, 11.543679,
            11.942684, 16.156147, 19.162048, 18.014244, 20.155222, 18.876877, 19.187948, 20.75992,
            16.105904, 12.034348, 12.104091, 16.895803, 20.281553, 20.59144, 21.803358, 21.064169,
            19.768038, 20.565472, 17.866432, 12.413768, 13.534436, 18.159327, 22.620434, 22.17874,
            23.125528, 20.333057, 19.960758, 21.198975, 16.619577, 11.420952, 14.054066, 18.05697,
            21.06638, 19.416283, 18.94096, 17.680557, 19.972738, 18.957464, 17.269938, 12.276639,
            13.044233, 15.440737, 19.566753, 18.728071, 18.524162, 19.100996, 19.588144, 19.433714,
            16.832764, 11.785182, 12.758251, 15.849918, 20.218775, 21.32856, 20.184816, 19.009823,
            19.120424, 18.353603, 16.60963, 11.197021, 13.660435, 15.544063, 21.746227, 20.205467,
            18.493637, 18.199787, 18.963709, 19.007399, 17.28088, 11.089549, 12.925732, 16.766241,
            19.757822, 18.48523, 15.7500105, 16.384151, 17.095922, 18.269623, 15.47669, 11.04964,
            13.628733, 16.509066, 19.764345, 19.618204, 17.916456, 19.031971, 19.87633, 19.214067,
            17.72869, 13.561383, 10.893954, 14.494417, 17.58172, 16.024706, 15.066355, 14.886058,
            15.756652, 16.02492, 14.880145, 10.387588, 8.309915, 10.834155, 12.845644, 12.724135,
            11.092047, 10.070298, 11.178484, 12.378203, 11.153761, 7.536081, 6.124202, 8.13092,
            10.672479, 8.510127, 8.859425, 9.119418, 8.10241, 9.524094, 6.9740763, 6.353928,
            9.144518, 11.381136, 13.662326, 13.690434, 13.11042, 13.052275, 11.889404, 12.060355,
            10.490909, 9.334052, 12.661598, 14.331397, 18.94259, 18.43798, 16.604548, 17.323929,
            16.385832, 18.157793, 13.868318, 9.9915905, 11.760701, 14.245496, 16.889383, 16.505638,
            17.499716, 16.46742, 14.791353, 19.086525, 14.902359, 10.169932, 11.009945, 13.767925,
            16.88655, 17.028936, 18.75679, 18.633547, 18.204697, 19.85471, 13.816436, 12.430131,
            12.48041, 15.373892, 18.670311, 19.465616, 19.340803, 18.744621, 18.390507, 20.053415,
            15.535593, 11.147658, 12.253742, 15.70766, 19.780188, 20.171856, 20.472078, 19.467194,
            17.731697, 20.572243, 14.8046255, 10.390881, 12.503551, 14.974514, 19.717602,
            18.520597, 18.43417, 17.236776, 19.25944, 18.978977, 15.135375, 11.134651, 11.8636875,
            14.810161, 19.106596, 18.192911, 17.183886, 17.668293, 19.170742, 17.24798, 13.019309,
            10.6786175, 12.879708, 16.543167, 19.919252, 18.171764, 16.811026, 17.072914,
            17.256847, 17.026466, 12.640136, 10.683223, 12.045137, 14.423397, 18.091589, 17.072441,
            16.702467, 17.706388, 15.850547, 16.669231, 13.824087, 9.863636, 11.930118, 13.165976,
            16.673246, 16.379894, 14.475159, 13.782193, 17.49062, 16.60875, 13.288464, 11.256168,
            11.329867, 15.368024, 18.948349, 18.124125, 17.472532, 17.411089, 18.259699, 16.086357,
            13.594519, 12.333231, 10.497717, 14.831023, 16.708593, 16.043901, 14.499182, 13.860747,
            14.335815, 14.407975, 13.11905, 10.259752, 9.372792, 10.58579, 12.563856, 12.699946,
            11.38638, 10.076791, 12.014703, 12.499384, 9.88909, 7.714624,
        ],
    )
    .unwrap();
    let current_output36: Array3<f32> = conv_layer36.convolve(&test_input36);

    assert!(
        arr_allclose(&current_output36, &target_output36),
        "{:?} was not equal to {:?}",
        current_output36,
        target_output36
    );
}

// This file has been automatically generated by Jinja2 via the
// script generate_tests_torch.py.
// Please do not change this file by hand.
use ml::convolutions::*;
use ml::transposed_convolutions::*;
use ndarray::{array, Array, Array4, Dimension};

fn arr_allclose<D: Dimension>(arr1: &Array<f32, D>, arr2: &Array<f32, D>) -> bool {
    (arr1 - arr2).map(|x| (*x as f32).abs()).sum() < 1e-3
}

#[test]
fn test_py_implementation_random_arrays_transpose_convolve() {
    let test_input1 = array![
        [
            [0.23224549, 0.50588505, 0.86441349, 0.02310899],
            [0.45685568, 0.40417363, 0.25985479, 0.09913059],
            [0.79699722, 0.98004136, 0.25103959, 0.11597095],
            [0.72586276, 0.09967188, 0.29483115, 0.22645573],
            [0.16055934, 0.43114743, 0.90784464, 0.96178347]
        ],
        [
            [0.63828966, 0.534928, 0.68839463, 0.58409027],
            [0.75128938, 0.66844715, 0.66343357, 0.46953653],
            [0.46234563, 0.26003667, 0.77429137, 0.328285],
            [0.83035486, 0.49730704, 0.99242497, 0.83261124],
            [0.8848362, 0.11227968, 0.83485613, 0.38707261]
        ]
    ];

    let kernel1: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.42852716, 0.33262721, 0.92346432, 0.73501345, 0.24397685, 0.79674084, 0.95016545,
            0.21724486, 0.86324733, 0.1932244, 0.51769137, 0.32076064, 0.96737749, 0.00598922,
            0.39202869, 0.24141203, 0.82792129, 0.69460177, 0.75072335, 0.97536332, 0.24372894,
            0.49899355, 0.31899844, 0.49396161, 0.11416891, 0.68334946, 0.59653256, 0.12978615,
            0.10638801, 0.1116066, 0.80415186, 0.28193729,
        ],
    )
    .unwrap();
    let conv_layer1 = TransposedConvolutionLayer::new(kernel1, 1, Padding::Valid);
    let target_output1 = array![[
        [0.62797713, 1.1802721, 2.17384386, 2.92118907, 2.6220274, 1.76662087, 0.58668566],
        [1.03001571, 2.15777397, 3.71821833, 5.11938667, 3.7711246, 2.01823235, 0.82436955],
        [1.29225194, 3.20075297, 5.68182945, 6.28656292, 4.73693562, 2.64841986, 0.74212527],
        [2.07838488, 4.08665085, 7.78171158, 8.01874733, 5.62978411, 4.0531745, 1.42889297],
        [2.44352531, 3.97826171, 6.25293303, 7.82034779, 6.10131836, 4.7984705, 1.78105152],
        [1.79641795, 2.58461213, 3.90170574, 5.25197983, 4.75967073, 3.07258797, 0.70139354],
        [1.03014624, 1.26703024, 3.04918242, 3.3453846, 2.74341059, 2.23766255, 0.64815223],
        [0.24945745, 0.52874273, 1.75664711, 1.61774158, 1.21195257, 1.1428535, 0.34131628]
    ]];
    let current_output1 = conv_layer1.transposed_convolve(&test_input1);

    assert!(
        arr_allclose(&current_output1, &target_output1),
        "{:?} was not equal to {:?}",
        current_output1,
        target_output1
    );

    let test_input2 = array![
        [
            [0.09670109, 0.17522074, 0.30331546, 0.39188403],
            [0.99324827, 0.44458251, 0.56043957, 0.07845372],
            [0.09437273, 0.2022228, 0.30105924, 0.18510874],
            [0.50315732, 0.87208086, 0.63173667, 0.97677081],
            [0.2187118, 0.70001813, 0.39591292, 0.73465172]
        ],
        [
            [0.00274565, 0.90799466, 0.22369012, 0.68718668],
            [0.65592413, 0.66829443, 0.57882502, 0.55727569],
            [0.17275229, 0.35462692, 0.07000257, 0.35331661],
            [0.61658299, 0.30442452, 0.54720806, 0.27519759],
            [0.7739332, 0.43991743, 0.05888736, 0.2155859]
        ]
    ];

    let kernel2: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.32379033, 0.42484936, 0.80078561, 0.16511487, 0.96516041, 0.6095338, 0.78007901,
            0.213527, 0.68177587, 0.20005976, 0.52148439, 0.56371771, 0.81873294, 0.34419013,
            0.70609356, 0.46725456, 0.23119005, 0.96067435, 0.29916614, 0.6806969, 0.91396963,
            0.97284102, 0.01715484, 0.04093061, 0.4275515, 0.19486532, 0.25447013, 0.08197373,
            0.6507138, 0.21445233, 0.11806071, 0.17637333,
        ],
    )
    .unwrap();
    let conv_layer2 = TransposedConvolutionLayer::new(kernel2, 1, Padding::Valid);
    let target_output2 = array![[
        [0.03194565, 0.31037521, 1.17491341, 1.05930698, 1.7834661, 0.72174513, 0.53247172],
        [0.56908882, 2.4111743, 3.70059991, 3.69665337, 2.94137788, 1.10749483, 0.50409454],
        [1.69573665, 3.16449618, 4.01020288, 3.86737466, 2.71484971, 1.1339643, 0.5878706],
        [1.59301353, 3.58727026, 4.73193312, 6.13964272, 4.08455181, 2.64403152, 0.79681146],
        [2.67713356, 4.81467104, 5.95768356, 7.02813673, 4.1928134, 2.52925587, 0.75613976],
        [1.71478331, 3.37531662, 3.31695104, 4.47906017, 2.88650751, 1.96954608, 0.88768256],
        [1.29317927, 2.07741499, 2.49868488, 3.65659094, 2.20816302, 1.77985632, 0.93674672],
        [0.6826756, 1.10063851, 0.9435485, 1.67557657, 0.990273, 0.73956329, 0.381293]
    ]];
    let current_output2 = conv_layer2.transposed_convolve(&test_input2);

    assert!(
        arr_allclose(&current_output2, &target_output2),
        "{:?} was not equal to {:?}",
        current_output2,
        target_output2
    );

    let test_input3 = array![
        [
            [0.32952575, 0.59583681, 0.17714995, 0.77400486],
            [0.63882513, 0.25830766, 0.21258484, 0.3401532],
            [0.96206266, 0.62044975, 0.28326757, 0.20731905],
            [0.83910975, 0.63256076, 0.05410179, 0.97274446],
            [0.74869779, 0.12974854, 0.79447089, 0.53723675]
        ],
        [
            [0.69576324, 0.82454912, 0.37664894, 0.67223724],
            [0.50744606, 0.7913009, 0.78958918, 0.64517467],
            [0.35058063, 0.22394987, 0.14626299, 0.05523287],
            [0.46869732, 0.7351389, 0.07301666, 0.27983864],
            [0.10655331, 0.9756451, 0.05932388, 0.77344522]
        ]
    ];

    let kernel3: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.61317027, 0.08217912, 0.553476, 0.21154444, 0.19400314, 0.16894332, 0.94862154,
            0.92018245, 0.8976765, 0.52220882, 0.21455716, 0.20382801, 0.13832045, 0.58815186,
            0.75384826, 0.96337642, 0.59598235, 0.75862404, 0.01639629, 0.3016201, 0.17905368,
            0.19411111, 0.82684654, 0.28606841, 0.04715753, 0.06193527, 0.64446747, 0.31424384,
            0.10932652, 0.5231733, 0.44769425, 0.39186088,
        ],
    )
    .unwrap();
    let conv_layer3 = TransposedConvolutionLayer::new(kernel3, 1, Padding::Valid);
    let target_output3 = array![[
        [0.61671799, 1.41166902, 1.20137978, 1.79839778, 1.05255282, 0.59049529, 0.36649668],
        [0.88264549, 1.52140617, 2.83476353, 3.77651811, 2.46620798, 2.04280448, 1.17108667],
        [1.34226036, 2.04608178, 3.48351765, 4.74101496, 3.0253408, 2.25109267, 0.92709386],
        [1.76230216, 3.00617218, 4.87389708, 6.63074398, 4.82890749, 3.10420847, 1.77791178],
        [1.79328847, 3.14555836, 5.56792641, 6.50363731, 4.58988619, 2.96406054, 1.96221972],
        [1.11108088, 2.2763145, 3.50381374, 5.79468822, 3.5013504, 2.8314352, 1.22319412],
        [0.84442025, 1.4666574, 2.68797421, 3.81317139, 2.55964732, 1.73362243, 1.39933121],
        [0.11520932, 0.62070465, 1.31522834, 1.95480847, 1.85340595, 1.53988314, 0.82064414]
    ]];
    let current_output3 = conv_layer3.transposed_convolve(&test_input3);

    assert!(
        arr_allclose(&current_output3, &target_output3),
        "{:?} was not equal to {:?}",
        current_output3,
        target_output3
    );

    let test_input4 = array![
        [
            [0.02075461, 0.10706459, 0.5791381, 0.45745205],
            [0.44355087, 0.51992797, 0.01996619, 0.71309348],
            [0.68690148, 0.39505484, 0.54699335, 0.31554793],
            [0.39265912, 0.60526183, 0.92840583, 0.1213429],
            [0.38917129, 0.77997731, 0.82586903, 0.88367036]
        ],
        [
            [0.57404126, 0.85618266, 0.44077539, 0.63325499],
            [0.7577091, 0.73792097, 0.23396463, 0.3459607],
            [0.14433428, 0.56662749, 0.95572013, 0.85192676],
            [0.6193624, 0.92937866, 0.02097251, 0.23979845],
            [0.07907035, 0.95633018, 0.01872301, 0.41537429]
        ]
    ];

    let kernel4: Array4<f32> = Array::from_shape_vec(
        (2, 1, 3, 3),
        vec![
            0.45995144, 0.64512045, 0.85995776, 0.10583407, 0.44843149, 0.91603121, 0.56784169,
            0.57392231, 0.26174001, 0.10541193, 0.6379088, 0.31216501, 0.87573343, 0.15632313,
            0.73736545, 0.12863558, 0.9590727, 0.2825182,
        ],
    )
    .unwrap();
    let conv_layer4 = TransposedConvolutionLayer::new(kernel4, 1, Padding::Valid);
    let target_output4 = array![[
        [0.07005691, 0.51907158, 1.12511802, 1.2912879, 1.33469963, 0.59106952],
        [0.78878713, 1.94658208, 2.52939057, 2.8650322, 1.93057775, 1.60720778],
        [1.12727726, 2.52862954, 4.56069183, 4.52469015, 3.22640395, 1.74425447],
        [0.79432333, 3.26480532, 5.21751404, 4.48769855, 3.32902956, 1.3808248],
        [1.17990577, 2.74178123, 4.628407, 5.62920761, 3.92025304, 1.50083375],
        [0.41307238, 2.38952923, 3.06421709, 3.32388544, 1.78007722, 1.21525991],
        [0.23115894, 0.86511004, 1.96040833, 1.52149022, 1.12698483, 0.34864268]
    ]];
    let current_output4 = conv_layer4.transposed_convolve(&test_input4);

    assert!(
        arr_allclose(&current_output4, &target_output4),
        "{:?} was not equal to {:?}",
        current_output4,
        target_output4
    );

    let test_input5 = array![
        [
            [0.79587993, 0.81913607, 0.93811946, 0.53403529],
            [0.79628325, 0.62593821, 0.21138961, 0.1876398],
            [0.29817144, 0.6925418, 0.1792817, 0.26417359],
            [0.43096246, 0.76093377, 0.62514907, 0.69654607],
            [0.04901551, 0.06003402, 0.69877169, 0.12188532]
        ],
        [
            [0.06863045, 0.98164632, 0.75263585, 0.66786885],
            [0.64306772, 0.56340058, 0.73104405, 0.65803694],
            [0.07880943, 0.23246141, 0.7858138, 0.55886112],
            [0.48162453, 0.74894114, 0.64294605, 0.77811541],
            [0.66253483, 0.99033882, 0.41137747, 0.4890013]
        ]
    ];

    let kernel5: Array4<f32> = Array::from_shape_vec(
        (2, 1, 3, 3),
        vec![
            0.06506247, 0.9972559, 0.83234049, 0.18129697, 0.49030397, 0.48294268, 0.12433387,
            0.96476976, 0.7292857, 0.73773443, 0.39093721, 0.92350285, 0.25497472, 0.13691517,
            0.34584804, 0.58844589, 0.20412358, 0.00624331,
        ],
    )
    .unwrap();
    let conv_layer5 = TransposedConvolutionLayer::new(kernel5, 1, Padding::Valid);
    let target_output5 = array![[
        [0.10241297, 1.59801555, 2.5427556, 3.34558725, 2.26956081, 1.06127799],
        [0.68801099, 2.30028391, 3.96030784, 3.60077834, 2.362082, 1.25276875],
        [0.52521008, 2.74165845, 5.04062223, 4.73087883, 3.23427296, 1.44782627],
        [0.93491805, 2.87075663, 4.90571165, 4.8436079, 3.15140295, 1.76016831],
        [0.77634597, 2.17521501, 3.99447131, 4.73822689, 2.75116873, 1.35469294],
        [0.51480925, 1.42755055, 2.30978179, 2.75567698, 1.89721799, 0.74082291],
        [0.39596018, 0.77275276, 0.62890762, 1.11099589, 0.72958052, 0.09194221]
    ]];
    let current_output5 = conv_layer5.transposed_convolve(&test_input5);

    assert!(
        arr_allclose(&current_output5, &target_output5),
        "{:?} was not equal to {:?}",
        current_output5,
        target_output5
    );

    let test_input6 = array![
        [
            [0.56834318, 0.22074685, 0.69736786, 0.08598604],
            [0.05624962, 0.29992156, 0.25001068, 0.68899853],
            [0.89269228, 0.30140766, 0.63385394, 0.94817296],
            [0.464108, 0.89087913, 0.31388246, 0.57008056],
            [0.76289175, 0.00432913, 0.92347583, 0.96164151]
        ],
        [
            [0.29734896, 0.81149604, 0.83766772, 0.40603398],
            [0.97582668, 0.03124781, 0.56788189, 0.12168682],
            [0.86728951, 0.70891321, 0.81502959, 0.45569643],
            [0.94203091, 0.03257993, 0.41169245, 0.10524429],
            [0.29636486, 0.23071601, 0.89597745, 0.23406821]
        ]
    ];

    let kernel6: Array4<f32> = Array::from_shape_vec(
        (2, 1, 3, 3),
        vec![
            0.65278766, 0.3581413, 0.68854657, 0.95353164, 0.84424638, 0.40710647, 0.16538836,
            0.63260361, 0.68527244, 0.31145655, 0.49300047, 0.49084945, 0.02828005, 0.88413816,
            0.08669137, 0.14747888, 0.90374769, 0.69706857,
        ],
    )
    .unwrap();
    let conv_layer6 = TransposedConvolutionLayer::new(kernel6, 1, Padding::Valid);
    let target_output6 = array![[
        [0.4636187, 0.74698699, 1.73254108, 1.39563632, 1.12230909, 0.25850695],
        [0.89098889, 1.68290329, 2.83025312, 2.6620779, 1.54574406, 0.60434258],
        [1.07194376, 3.14640951, 4.51686192, 5.43283653, 3.72416353, 1.50954211],
        [1.62531984, 4.02194262, 4.45933151, 4.73718023, 3.31936407, 1.42667413],
        [1.33504128, 4.07205534, 5.30309534, 5.19267941, 4.28740454, 1.98564303],
        [0.95151031, 2.21384931, 3.13015842, 3.83078814, 2.43025947, 0.87580514],
        [0.16988099, 0.78518885, 1.22549295, 1.75128758, 2.07726669, 0.82214803]
    ]];
    let current_output6 = conv_layer6.transposed_convolve(&test_input6);

    assert!(
        arr_allclose(&current_output6, &target_output6),
        "{:?} was not equal to {:?}",
        current_output6,
        target_output6
    );

    let test_input7 = array![
        [
            [0.30263219, 0.00271136, 0.49293855],
            [0.99981271, 0.98342794, 0.91180951],
            [0.92644605, 0.04954946, 0.40840417],
            [0.46344219, 0.78719302, 0.20486033]
        ],
        [
            [0.4029006, 0.76861512, 0.24171825],
            [0.36729267, 0.19857672, 0.32654667],
            [0.36346476, 0.17108533, 0.30279541],
            [0.36422955, 0.58195867, 0.58513414]
        ]
    ];

    let kernel7: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.7725577, 0.88385839, 0.80932314, 0.89565293, 0.16141163, 0.06084506, 0.54924948,
            0.60231775, 0.91577754, 0.12382696, 0.294304, 0.36349937, 0.79487141, 0.14176326,
            0.49541315, 0.29347779, 0.37438836, 0.73060917, 0.28533514, 0.10216843, 0.55541974,
            0.46504469, 0.17332367, 0.3212567, 0.36790222, 0.11517226, 0.08391169, 0.66567503,
            0.38179011, 0.47639692, 0.81930284, 0.32803876,
        ],
    )
    .unwrap();
    let conv_layer7 = TransposedConvolutionLayer::new(kernel7, 1, Padding::Valid);
    let target_output7 = array![[
        [0.38464212, 0.85170209, 1.39516258, 1.14601386, 0.5488739, 0.46619782],
        [1.18255043, 2.61926198, 3.56242609, 3.41889763, 2.29341984, 1.22458684],
        [1.64256477, 2.05653644, 3.29679513, 3.57250643, 2.37031746, 1.39091754],
        [2.29092479, 3.50038767, 5.62136269, 4.86294985, 2.93946481, 1.35930574],
        [2.19419456, 2.08700085, 3.68837571, 3.25569057, 2.22555518, 1.03610313],
        [1.4335835, 1.44352698, 2.01985908, 1.54217267, 1.30400455, 0.68316197],
        [0.50743616, 1.08712018, 1.30308402, 1.43007529, 1.00282121, 0.25206864]
    ]];
    let current_output7 = conv_layer7.transposed_convolve(&test_input7);

    assert!(
        arr_allclose(&current_output7, &target_output7),
        "{:?} was not equal to {:?}",
        current_output7,
        target_output7
    );

    let test_input8 = array![
        [
            [0.56541388, 0.37452426, 0.66434167],
            [0.24304809, 0.06236777, 0.77332523],
            [0.78207753, 0.61082655, 0.94774401],
            [0.08051699, 0.94621385, 0.00787854]
        ],
        [
            [0.84173134, 0.19448081, 0.13019027],
            [0.66277754, 0.09286012, 0.58464369],
            [0.65122109, 0.70801625, 0.70387627],
            [0.44558695, 0.44260015, 0.69783799]
        ]
    ];

    let kernel8: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.32629655, 0.27405552, 0.99696945, 0.17646311, 0.37098764, 0.87614516, 0.69403932,
            0.21528777, 0.5237107, 0.44565287, 0.19037103, 0.83812864, 0.70450526, 0.79290859,
            0.45777786, 0.96684875, 0.48885154, 0.15208962, 0.8550647, 0.11583171, 0.56539786,
            0.63707969, 0.2444331, 0.26558961, 0.70200128, 0.31950996, 0.00088664, 0.44229119,
            0.82152084, 0.05462804, 0.86386947, 0.92018557,
        ],
    )
    .unwrap();
    let conv_layer8 = TransposedConvolutionLayer::new(kernel8, 1, Padding::Valid);
    let target_output8 = array![[
        [0.59597427, 0.50025159, 1.69607019, 0.93882394, 0.86226624, 0.13231197],
        [1.0889802, 1.51369309, 2.74865746, 1.87984741, 1.91783619, 0.38178548],
        [1.92545033, 2.42321825, 4.10365248, 4.39426136, 2.98074841, 1.1849215],
        [2.58483291, 3.67781806, 6.35769272, 6.94781303, 3.17089367, 2.14204788],
        [1.86425936, 2.67837548, 5.07508087, 4.65849018, 2.50826454, 2.5783534],
        [1.44093966, 2.65217185, 3.7623651, 3.70814133, 3.27492237, 1.8792727],
        [0.42278361, 1.118402, 1.77506626, 1.34774339, 1.92856753, 0.6497578]
    ]];
    let current_output8 = conv_layer8.transposed_convolve(&test_input8);

    assert!(
        arr_allclose(&current_output8, &target_output8),
        "{:?} was not equal to {:?}",
        current_output8,
        target_output8
    );

    let test_input9 = array![
        [
            [0.43966387, 0.13879521, 0.6324256],
            [0.47845422, 0.52424467, 0.8988874],
            [0.34291573, 0.53778486, 0.79191956],
            [0.69536623, 0.72673949, 0.63617105]
        ],
        [
            [0.1036236, 0.56881529, 0.64246501],
            [0.68493666, 0.62562757, 0.5914831],
            [0.84170303, 0.26191136, 0.63586736],
            [0.14973171, 0.17741988, 0.84626372]
        ]
    ];

    let kernel9: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.51744188, 0.89845975, 0.44348246, 0.26742129, 0.5524051, 0.45841581, 0.05020873,
            0.94144089, 0.87631007, 0.8967645, 0.90488428, 0.66888971, 0.28862263, 0.01719667,
            0.89464476, 0.73840203, 0.43135418, 0.36634242, 0.99305737, 0.5723982, 0.33335866,
            0.63178033, 0.86594314, 0.16760358, 0.08334628, 0.14621608, 0.61695288, 0.59717393,
            0.95570712, 0.19301597, 0.05311463, 0.89263908,
        ],
    )
    .unwrap();
    let conv_layer9 = TransposedConvolutionLayer::new(kernel9, 1, Padding::Valid);
    let target_output9 = array![[
        [0.27219895, 0.75016129, 1.23534393, 1.60687995, 1.2811799, 0.53686988],
        [0.82043886, 1.75523329, 3.41116047, 4.02470875, 2.29841399, 1.28201628],
        [1.42705965, 2.73637366, 5.4747262, 5.42917109, 3.83327651, 2.32781577],
        [1.5967083, 3.85753918, 7.23844147, 6.32261944, 5.6717267, 3.50159311],
        [1.59738302, 2.6873014, 4.75938368, 5.47608376, 4.88486147, 2.84190559],
        [1.52523088, 1.870996, 3.27483988, 3.65178227, 3.06297922, 2.08325005],
        [0.3437981, 0.4201735, 1.6691947, 1.48099589, 1.30909383, 1.2251581]
    ]];
    let current_output9 = conv_layer9.transposed_convolve(&test_input9);

    assert!(
        arr_allclose(&current_output9, &target_output9),
        "{:?} was not equal to {:?}",
        current_output9,
        target_output9
    );

    let test_input10 = array![
        [
            [0.06703918, 0.38400442, 0.12217854],
            [0.11021607, 0.05716073, 0.03542558],
            [0.46326013, 0.94563347, 0.80120881],
            [0.90998458, 0.31587509, 0.99483611]
        ],
        [
            [0.19569386, 0.69320916, 0.28721202],
            [0.22239834, 0.91989448, 0.64516698],
            [0.16384328, 0.26697786, 0.34233773],
            [0.97118685, 0.1736736, 0.49766175]
        ]
    ];

    let kernel10: Array4<f32> = Array::from_shape_vec(
        (2, 1, 3, 3),
        vec![
            0.11606233, 0.207445, 0.47700463, 0.49665623, 0.98654819, 0.67733945, 0.48572266,
            0.94583003, 0.30034919, 0.83523111, 0.80740195, 0.39818336, 0.80498019, 0.33522689,
            0.85493217, 0.32960872, 0.01231102, 0.21975358,
        ],
    )
    .unwrap();
    let conv_layer10 = TransposedConvolutionLayer::new(kernel10, 1, Padding::Valid);
    let target_output10 = array![[
        [0.17123032, 0.79546887, 1.00332701, 0.7164371, 0.17264278],
        [0.38937104, 1.8578645, 2.55450153, 1.99137497, 0.60209608],
        [0.52144468, 1.99412692, 2.83224797, 2.46314621, 1.1938746],
        [1.40559101, 2.78910184, 4.08464956, 2.8627367, 1.66048574],
        [1.51275587, 2.50749278, 4.28605604, 2.61542845, 1.41518116],
        [0.76211184, 1.08331907, 1.43488526, 1.08011079, 0.40816116]
    ]];
    let current_output10 = conv_layer10.transposed_convolve(&test_input10);

    assert!(
        arr_allclose(&current_output10, &target_output10),
        "{:?} was not equal to {:?}",
        current_output10,
        target_output10
    );

    let test_input11 = array![
        [
            [0.79986305, 0.06471063, 0.77274995],
            [0.8312853, 0.77028167, 0.82208912],
            [0.11399209, 0.04418209, 0.41363551],
            [0.37213322, 0.05123908, 0.16918235]
        ],
        [
            [0.56118462, 0.31676801, 0.91666115],
            [0.99523086, 0.02213015, 0.55894298],
            [0.38572571, 0.99987621, 0.50932685],
            [0.49142755, 0.34928932, 0.69832363]
        ]
    ];

    let kernel11: Array4<f32> = Array::from_shape_vec(
        (2, 1, 3, 3),
        vec![
            0.63120777, 0.75233946, 0.96101004, 0.99979722, 0.42995887, 0.86614874, 0.0841737,
            0.89585605, 0.11358444, 0.10170663, 0.68170774, 0.69930185, 0.31476195, 0.37262206,
            0.11822088, 0.58505236, 0.70728539, 0.35515,
        ],
    )
    .unwrap();
    let conv_layer11 = TransposedConvolutionLayer::new(kernel11, 1, Padding::Valid);
    let target_output11 = array![[
        [0.56195599, 1.0573957, 2.00673771, 1.48996937, 1.38364327],
        [1.60227573, 2.50974584, 4.63132191, 2.52256632, 1.95859051],
        [1.65121078, 3.28790259, 4.75552034, 4.09207916, 1.94513595],
        [1.17249012, 2.76089478, 3.81533194, 2.64809942, 1.36129308],
        [0.76200533, 1.46792793, 2.15107393, 1.50954807, 0.45696351],
        [0.31883466, 0.88962281, 0.93254572, 0.77534717, 0.26722613]
    ]];
    let current_output11 = conv_layer11.transposed_convolve(&test_input11);

    assert!(
        arr_allclose(&current_output11, &target_output11),
        "{:?} was not equal to {:?}",
        current_output11,
        target_output11
    );

    let test_input12 = array![
        [
            [0.20403187, 0.68248703, 0.44291237],
            [0.27782661, 0.69825463, 0.9029227],
            [0.62402925, 0.41573935, 0.16815847],
            [0.3392352, 0.80277765, 0.07096831]
        ],
        [
            [0.85541025, 0.77221438, 0.53853285],
            [0.94955044, 0.53288117, 0.73666345],
            [0.11740076, 0.37460857, 0.67491605],
            [0.92208675, 0.98112951, 0.38428995]
        ]
    ];

    let kernel12: Array4<f32> = Array::from_shape_vec(
        (2, 1, 3, 3),
        vec![
            0.84727753, 0.5904251, 0.49291241, 0.49100837, 0.11250915, 0.43514693, 0.49978712,
            0.58982395, 0.32562397, 0.08288938, 0.12515384, 0.60863685, 0.49698647, 0.25456929,
            0.17941345, 0.24435801, 0.92576463, 0.36017429,
        ],
    )
    .unwrap();
    let conv_layer12 = TransposedConvolutionLayer::new(kernel12, 1, Padding::Valid);
    let target_output12 = array![[
        [0.24377604, 0.86978763, 1.54071546, 1.13531041, 0.54608792],
        [0.83941257, 1.8782649, 3.0206635, 1.9162674, 1.18277431],
        [1.45778513, 3.08914781, 4.02966738, 2.56540632, 1.3569262],
        [1.09949219, 3.08972025, 4.23884153, 3.15553832, 1.02247739],
        [0.96540159, 1.93075335, 1.96543074, 1.62546349, 0.39767227],
        [0.39486468, 1.69468927, 1.95374095, 1.01240206, 0.16152033]
    ]];
    let current_output12 = conv_layer12.transposed_convolve(&test_input12);

    assert!(
        arr_allclose(&current_output12, &target_output12),
        "{:?} was not equal to {:?}",
        current_output12,
        target_output12
    );

    let test_input13 = array![
        [
            [0.51685951, 0.14790155, 0.31631762, 0.68132181, 0.86361974, 0.87004618],
            [0.54062276, 0.00816072, 0.81253463, 0.84024462, 0.16182604, 0.99689518],
            [0.57455207, 0.71637904, 0.85961168, 0.21274436, 0.50981584, 0.02886825],
            [0.21751188, 0.23436014, 0.38305257, 0.6327846, 0.27748674, 0.84223387],
            [0.9325366, 0.0989435, 0.60516263, 0.08400947, 0.49678063, 0.97340894],
            [0.83966809, 0.3482415, 0.10386568, 0.74549535, 0.40149437, 0.4452185]
        ],
        [
            [0.87148379, 0.44752907, 0.90387198, 0.46964038, 0.48441091, 0.88147925],
            [0.59467484, 0.58768096, 0.34565841, 0.46486275, 0.83226593, 0.64309967],
            [0.46776877, 0.22630381, 0.70366823, 0.77490347, 0.91060963, 0.48822479],
            [0.57024289, 0.10668963, 0.92969259, 0.00275485, 0.95036079, 0.14900696],
            [0.54555528, 0.00645077, 0.21402212, 0.7504094, 0.01176434, 0.07800543],
            [0.0516187, 0.36804477, 0.8195282, 0.74270811, 0.185258, 0.2418856]
        ]
    ];

    let kernel13: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.5231299, 0.23739756, 0.92642604, 0.80638138, 0.09321253, 0.3954864, 0.27779006,
            0.61428419, 0.71764105, 0.33038311, 0.97665915, 0.42897722, 0.94963987, 0.37697606,
            0.88512615, 0.73109218, 0.63038553, 0.24837622, 0.21866089, 0.68867161, 0.69469835,
            0.0114934, 0.70453161, 0.35201788, 0.0989068, 0.90386671, 0.51265218, 0.926821,
            0.76855408, 0.49553608, 0.48527933, 0.09102922,
        ],
    )
    .unwrap();
    let conv_layer13 = TransposedConvolutionLayer::new(kernel13, 1, Padding::Valid);
    let target_output13 = array![[
        [
            0.81975543, 0.69864464, 1.55092168, 2.20389652, 1.95369458, 2.94758606, 2.20432019,
            2.02878547, 1.30863881
        ],
        [
            1.31128645, 1.18989158, 2.90034819, 3.49880838, 3.82881141, 5.01857615, 3.24524784,
            3.33157134, 2.09151435
        ],
        [
            1.51606774, 2.50853395, 4.37044001, 7.02173471, 6.94729996, 7.32369041, 6.12102413,
            4.41517496, 2.38846827
        ],
        [
            2.45917678,
            2.73092055,
            6.67585707,
            7.94797468,
            8.70785427,
            10.83357334,
            7.00943804,
            6.69424772,
            2.71138358
        ],
        [
            2.67719388, 2.70825887, 6.72478533, 7.65188074, 8.27537537, 8.79518414, 6.89216232,
            4.90117502, 2.66072702
        ],
        [
            2.05533504, 3.0837636, 5.94227934, 8.77351284, 6.82592773, 8.88671207, 5.35599232,
            4.16826487, 1.71595478
        ],
        [
            1.48213315, 2.16278601, 4.36375809, 4.7377243, 5.43717194, 5.67482948, 4.31617165,
            2.92780066, 1.47782063
        ],
        [
            1.9125483, 1.33118796, 3.31967306, 4.13318491, 3.83289242, 4.6343565, 2.84173584,
            2.16647029, 1.13392568
        ],
        [
            0.83705407, 0.95568001, 1.81040668, 2.82943964, 1.95046198, 2.02266979, 1.34560871,
            0.82184982, 0.34751442
        ]
    ]];
    let current_output13 = conv_layer13.transposed_convolve(&test_input13);

    assert!(
        arr_allclose(&current_output13, &target_output13),
        "{:?} was not equal to {:?}",
        current_output13,
        target_output13
    );

    let test_input14 = array![
        [
            [0.64307177, 0.16351804, 0.30520669, 0.49957811, 0.3116739, 0.27853079],
            [0.13845452, 0.53867633, 0.85340833, 0.97655587, 0.36534721, 0.02803171],
            [0.64713535, 0.80936283, 0.38585196, 0.58985621, 0.17813227, 0.76870934],
            [0.89900349, 0.43542842, 0.15628383, 0.1745854, 0.86026083, 0.93176335],
            [0.56799881, 0.47061769, 0.53949802, 0.05189181, 0.07629808, 0.84650086],
            [0.50658251, 0.71618065, 0.02412173, 0.95331388, 0.94789123, 0.11517583]
        ],
        [
            [0.85233842, 0.73321649, 0.07861274, 0.3375075, 0.58162109, 0.64147438],
            [0.71849818, 0.897314, 0.09359703, 0.19160785, 0.85125346, 0.8526771],
            [0.40986851, 0.50469854, 0.18144441, 0.47525636, 0.98244302, 0.1424162],
            [0.98820222, 0.06972428, 0.20421812, 0.55776209, 0.30822515, 0.39205091],
            [0.06246058, 0.02439791, 0.42704045, 0.32884196, 0.18523273, 0.65233307],
            [0.8833122, 0.53135427, 0.2849727, 0.68437329, 0.46648682, 0.69454806]
        ]
    ];

    let kernel14: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.27290355, 0.99412635, 0.01063524, 0.06917533, 0.19982048, 0.29424522, 0.41777326,
            0.90395256, 0.4888085, 0.98954149, 0.54784577, 0.52514096, 0.71397652, 0.96795374,
            0.703604, 0.11441412, 0.22741624, 0.14197118, 0.14224136, 0.00554162, 0.08584995,
            0.08854763, 0.55170396, 0.34441713, 0.01855595, 0.56010681, 0.56593886, 0.16720486,
            0.75972297, 0.44932321, 0.38319587, 0.71794273,
        ],
    )
    .unwrap();
    let conv_layer14 = TransposedConvolutionLayer::new(kernel14, 1, Padding::Valid);
    let target_output14 = array![[
        [
            0.36933216, 0.97167206, 0.49590001, 0.68290687, 0.79168957, 0.68917948, 0.4904398,
            0.1189897, 0.02282227
        ],
        [
            0.40285498, 0.95103204, 1.94043255, 2.89195323, 2.21625924, 1.73463023, 1.50019443,
            1.10389972, 0.47937769
        ],
        [
            0.68932027, 2.53349376, 3.51657987, 3.95079827, 3.9358511, 3.65971255, 4.07786989,
            1.92832851, 0.62650645
        ],
        [
            1.82226193, 4.09910154, 5.03543377, 6.47101355, 6.43223381, 6.35721159, 5.63381577,
            2.75313234, 1.46025705
        ],
        [
            1.4023335, 3.95062947, 5.67423201, 7.13770056, 6.21486521, 5.9203825, 5.28102303,
            3.35641527, 2.08234501
        ],
        [
            1.68919134, 4.64318657, 5.18449783, 5.23201942, 6.28019428, 6.46713781, 4.65119696,
            3.571275, 1.74674535
        ],
        [
            1.84848678, 2.9216094, 3.81430531, 4.95779848, 4.18906355, 4.9083972, 5.49997663,
            3.47832751, 1.28501034
        ],
        [
            0.71700311, 2.28837585, 3.40051508, 3.22023821, 3.44587278, 4.02624083, 3.38052106,
            2.01923442, 0.74180478
        ],
        [
            1.0327605, 1.80225921, 1.86061728, 2.75161934, 2.85103679, 2.8773737, 1.86967063,
            0.7905491, 0.51182348
        ]
    ]];
    let current_output14 = conv_layer14.transposed_convolve(&test_input14);

    assert!(
        arr_allclose(&current_output14, &target_output14),
        "{:?} was not equal to {:?}",
        current_output14,
        target_output14
    );

    let test_input15 = array![
        [
            [0.19173315, 0.26728697, 0.56639508, 0.07816565, 0.67903226, 0.00826331],
            [0.54254976, 0.89380722, 0.11534049, 0.71321382, 0.46833661, 0.42596257],
            [0.4862424, 0.93492688, 0.68173687, 0.0525712, 0.28192635, 0.4604141],
            [0.96248486, 0.43289438, 0.34953818, 0.69026706, 0.51265391, 0.69908698],
            [0.28793439, 0.06127732, 0.73615981, 0.8519083, 0.04873959, 0.88632006],
            [0.55267819, 0.35348675, 0.68609754, 0.07016035, 0.602, 0.6732832]
        ],
        [
            [0.82135327, 0.18075775, 0.37878715, 0.62920417, 0.37063052, 0.32302735],
            [0.90577848, 0.54883824, 0.57664813, 0.93476227, 0.2624883, 0.27476154],
            [0.09443506, 0.74253211, 0.01185389, 0.23280993, 0.17598269, 0.19381722],
            [0.65946395, 0.67435937, 0.92559452, 0.8947401, 0.98693223, 0.08145659],
            [0.03987844, 0.76296625, 0.29654609, 0.38589397, 0.86821306, 0.99967966],
            [0.77658385, 0.97871967, 0.12471338, 0.48183946, 0.79895421, 0.61783545]
        ]
    ];

    let kernel15: Array4<f32> = Array::from_shape_vec(
        (2, 1, 4, 4),
        vec![
            0.94045248, 0.71905491, 0.43614203, 0.11011575, 0.34765513, 0.39178115, 0.7308709,
            0.34274808, 0.35493045, 0.8328545, 0.06045034, 0.49653239, 0.29012534, 0.55789277,
            0.57551019, 0.4569207, 0.2188389, 0.51010307, 0.95294057, 0.69243168, 0.91676561,
            0.53584658, 0.67510863, 0.52303485, 0.96874585, 0.58568427, 0.70051905, 0.44720848,
            0.44401752, 0.76227056, 0.18282856, 0.36082301,
        ],
    )
    .unwrap();
    let conv_layer15 = TransposedConvolutionLayer::new(kernel15, 1, Padding::Valid);
    let target_output15 = array![[
        [
            0.36005995, 0.84776902, 1.76628387, 1.69036543, 1.85945559, 1.71412218, 1.26435053,
            0.64283824, 0.22458428
        ],
        [
            1.52810729, 2.5867269, 3.69748831, 4.69374084, 4.36529779, 4.18301392, 2.9053576,
            1.33164573, 0.40894556
        ],
        [
            2.36069512, 3.86208367, 5.70130253, 6.90966892, 5.18353748, 5.30815125, 3.27151918,
            2.06272936, 0.62317532
        ],
        [
            2.79546547, 5.55218601, 6.87860155, 9.05138111, 8.94926739, 7.69530582, 5.62493801,
            2.85435128, 0.84727401
        ],
        [
            2.04235697, 4.95874023, 7.25065041, 9.51358414, 8.8358736, 8.06400108, 6.61524057,
            4.18996334, 1.68108165
        ],
        [
            1.98984551, 5.13408089, 7.48917294, 8.84493351, 9.56303787, 8.74769211, 6.96530151,
            4.58336782, 1.99245346
        ],
        [
            1.6169703, 4.14151382, 4.97823477, 7.0266943, 7.32948971, 7.12532139, 5.9464941,
            3.7073245, 1.78988671
        ],
        [
            1.04971838, 2.5363102, 2.9434011, 3.84080219, 4.02058983, 4.93925524, 3.7407732,
            2.15811491, 1.37629366
        ],
        [
            0.50516278, 1.43742633, 1.65773976, 1.6272471, 1.86815631, 1.90150058, 1.54502296,
            1.06378675, 0.53056628
        ]
    ]];
    let current_output15 = conv_layer15.transposed_convolve(&test_input15);

    assert!(
        arr_allclose(&current_output15, &target_output15),
        "{:?} was not equal to {:?}",
        current_output15,
        target_output15
    );

    let test_input16 = array![
        [
            [0.06306251, 0.76909697, 0.11797102, 0.50691241, 0.83869766, 0.93539648],
            [0.94569022, 0.21557524, 0.28468878, 0.00299157, 0.94424678, 0.2590096],
            [0.12880773, 0.50224615, 0.63195637, 0.05983794, 0.21579172, 0.90917851],
            [0.77259356, 0.9772731, 0.90224167, 0.52640993, 0.47108477, 0.04924011],
            [0.25460968, 0.99656238, 0.50701512, 0.28755965, 0.36141592, 0.02703854],
            [0.16006813, 0.70015163, 0.30561776, 0.8973991, 0.57343286, 0.73674763]
        ],
        [
            [0.26068632, 0.61278396, 0.96492469, 0.26253388, 0.27807142, 0.79624586],
            [0.67275447, 0.6407772, 0.12578371, 0.84160687, 0.3605408, 0.96801484],
            [0.1393529, 0.72915195, 0.9006433, 0.49849265, 0.5104628, 0.89867176],
            [0.955501, 0.59073767, 0.86861896, 0.91761973, 0.57172958, 0.86013336],
            [0.39986316, 0.29667477, 0.94210516, 0.89406526, 0.92121492, 0.05097519],
            [0.08086525, 0.96673279, 0.59848206, 0.37690058, 0.47047686, 0.24334698]
        ]
    ];

    let kernel16: Array4<f32> = Array::from_shape_vec(
        (2, 1, 3, 3),
        vec![
            0.94723157, 0.71601816, 0.66163847, 0.90634656, 0.49495855, 0.28245237, 0.41918304,
            0.27396586, 0.42253863, 0.94620468, 0.04238893, 0.61110426, 0.95395429, 0.39995442,
            0.66795813, 0.7064477, 0.99121827, 0.90247559,
        ],
    )
    .unwrap();
    let conv_layer16 = TransposedConvolutionLayer::new(kernel16, 1, Padding::Valid);
    let target_output16 = array![[
        [
            0.30639741, 1.36453605, 1.80245578, 1.73728478, 2.09936428, 2.74758697, 1.4283582,
            1.10548353
        ],
        [
            1.83819032, 2.93326688, 3.452142, 3.32330227, 3.59778142, 4.82120419, 2.27564335,
            1.55899262
        ],
        [
            1.96336317, 3.83857894, 5.28033495, 5.54732609, 5.28994894, 6.47579384, 3.81755066,
            2.98431444
        ],
        [
            2.75728846, 4.81760693, 7.50716591, 6.3568716, 5.94177198, 6.64254856, 3.69897699,
            2.39833641
        ],
        [
            2.383708, 4.53684759, 7.67513323, 7.49243355, 6.84536695, 5.25314713, 3.39866662,
            1.83267426
        ],
        [
            1.83922207, 5.1539216, 6.89647341, 7.64896202, 7.51387691, 5.85622931, 3.53703547,
            1.47491264
        ],
        [
            0.61142939, 2.76180172, 3.5939641, 4.92074633, 4.88128948, 3.86497498, 1.98023486,
            0.4280704
        ],
        [
            0.12422492, 1.10044622, 1.84158087, 2.48768425, 1.86143875, 1.82351971, 1.10994506,
            0.53091908
        ]
    ]];
    let current_output16 = conv_layer16.transposed_convolve(&test_input16);

    assert!(
        arr_allclose(&current_output16, &target_output16),
        "{:?} was not equal to {:?}",
        current_output16,
        target_output16
    );

    let test_input17 = array![
        [
            [0.85239344, 0.70719117, 0.77630934, 0.10098496, 0.23122132, 0.86239354],
            [0.34863841, 0.10337279, 0.44741335, 0.02051973, 0.33192209, 0.76970787],
            [0.37064746, 0.27677528, 0.4141578, 0.34976024, 0.20377244, 0.15038555],
            [0.63522565, 0.39588143, 0.29719462, 0.58224157, 0.3832173, 0.74430689],
            [0.31255614, 0.26080993, 0.93509568, 0.7061453, 0.48032829, 0.33021633],
            [0.13239637, 0.35350803, 0.38336865, 0.51017932, 0.63328423, 0.07322941]
        ],
        [
            [0.8859752, 0.41102257, 0.27946881, 0.91541525, 0.2293425, 0.81592788],
            [0.0093977, 0.63983893, 0.7104612, 0.86655818, 0.93765805, 0.35742824],
            [0.60207121, 0.42087104, 0.64172531, 0.08560265, 0.02744765, 0.39207275],
            [0.21459883, 0.11062973, 0.87420401, 0.69151705, 0.17871671, 0.85303368],
            [0.85760948, 0.51250188, 0.48142319, 0.3410254, 0.1897166, 0.55302912],
            [0.89934647, 0.99207644, 0.31536198, 0.46590055, 0.01530014, 0.69832446]
        ]
    ];

    let kernel17: Array4<f32> = Array::from_shape_vec(
        (2, 1, 3, 3),
        vec![
            0.99070403, 0.02463103, 0.01077096, 0.67219725, 0.66763209, 0.73046063, 0.76907682,
            0.53152923, 0.06813734, 0.47991778, 0.84002591, 0.13388659, 0.69237571, 0.56391527,
            0.5064835, 0.98023208, 0.83162772, 0.45037648,
        ],
    )
    .unwrap();
    let conv_layer17 = TransposedConvolutionLayer::new(kernel17, 1, Padding::Valid);
    let target_output17 = array![[
        [
            1.26966488, 1.66311169, 1.39370453, 0.85590011, 1.15637612, 1.56795335, 0.73983854,
            0.11853061
        ],
        [
            1.53631198, 2.25461769, 3.81988525, 3.23314118, 3.21367693, 3.81189919, 1.76925468,
            1.0993439
        ],
        [
            2.42102432, 3.8782835, 4.69095564, 4.56222153, 3.84366059, 4.5454092, 3.02771139,
            1.22362185
        ],
        [
            1.67565966, 2.60545039, 4.22830105, 5.00662279, 4.50263262, 4.51832294, 2.39849138,
            0.64407891
        ],
        [
            2.17203856, 3.44339895, 5.15810776, 4.58401012, 3.52313495, 3.73363709, 2.2839098,
            1.24016154
        ],
        [
            2.06555939, 3.73653722, 5.11061478, 5.28408813, 4.89833736, 4.33711958, 2.78818631,
            1.05049658
        ],
        [
            1.79271817, 3.10236216, 3.98717284, 3.88334966, 2.97424269, 2.98363876, 1.66663074,
            0.67875236
        ],
        [
            0.98339123, 2.06263399, 2.03097177, 1.78598809, 1.32882631, 1.33476508, 0.6697107,
            0.31949857
        ]
    ]];
    let current_output17 = conv_layer17.transposed_convolve(&test_input17);

    assert!(
        arr_allclose(&current_output17, &target_output17),
        "{:?} was not equal to {:?}",
        current_output17,
        target_output17
    );

    let test_input18 = array![
        [
            [0.87442643, 0.3228065, 0.77707546, 0.65587144, 0.15356175, 0.88312191],
            [0.18077046, 0.81715684, 0.01058917, 0.54235333, 0.97475392, 0.52494562],
            [0.14190415, 0.90132593, 0.29823582, 0.59148337, 0.51946688, 0.74204314],
            [0.11199604, 0.32003467, 0.50086904, 0.22239626, 0.97291627, 0.86974588],
            [0.49535274, 0.54243551, 0.10466194, 0.10202583, 0.25952704, 0.62879491],
            [0.53307658, 0.26822981, 0.50847601, 0.19252869, 0.09730921, 0.31764306]
        ],
        [
            [0.14314991, 0.94600351, 0.6540288, 0.71126364, 0.97858765, 0.32067546],
            [0.7039669, 0.73717363, 0.90192675, 0.75033962, 0.9941749, 0.78996001],
            [0.61614864, 0.35973564, 0.96392444, 0.59018909, 0.06196258, 0.83785075],
            [0.37142364, 0.79140057, 0.07532935, 0.9428474, 0.43666556, 0.02624486],
            [0.42536419, 0.78015715, 0.85766182, 0.71461617, 0.33209484, 0.80531437],
            [0.97302119, 0.68557511, 0.69086133, 0.61613714, 0.67111015, 0.12122969]
        ]
    ];

    let kernel18: Array4<f32> = Array::from_shape_vec(
        (2, 1, 3, 3),
        vec![
            0.50159, 0.74436352, 0.73831213, 0.23079262, 0.04572792, 0.19533794, 0.49251168,
            0.61319175, 0.44526327, 0.20337714, 0.781168, 0.70581635, 0.46196784, 0.01862379,
            0.90610073, 0.80737148, 0.71486742, 0.50324622,
        ],
    )
    .unwrap();
    let conv_layer18 = TransposedConvolutionLayer::new(kernel18, 1, Padding::Valid);
    let target_output18 = array![[
        [
            0.46771696, 1.11702728, 2.248698, 2.46900296, 2.35521936, 2.37318945, 1.71194482,
            0.87835759
        ],
        [
            0.50178528, 1.79845357, 2.81757689, 3.70860195, 3.60054469, 4.00598431, 3.39227009,
            1.40821195
        ],
        [
            1.10965919, 3.22400951, 5.22695732, 6.08884907, 6.06883335, 5.30349636, 4.09567022,
            2.51215386
        ],
        [
            1.10650086, 2.69888067, 4.81211472, 4.73161507, 5.63037968, 6.39396, 3.72252798,
            2.19607782
        ],
        [
            1.09975731, 2.84508467, 4.55251503, 5.40846491, 3.84296703, 4.63985872, 3.46556759,
            1.97837543
        ],
        [
            1.13114071, 3.07780719, 4.45927525, 4.78177977, 4.604846, 4.49213886, 2.4770627,
            1.57308257
        ],
        [
            1.15992856, 1.92597461, 3.51627755, 2.97742319, 2.52566123, 2.50362921, 1.88783264,
            0.85714471
        ],
        [
            1.048136, 1.70807934, 2.18981242, 1.86238778, 1.72235358, 1.18953896, 0.6625011,
            0.20244317
        ]
    ]];
    let current_output18 = conv_layer18.transposed_convolve(&test_input18);

    assert!(
        arr_allclose(&current_output18, &target_output18),
        "{:?} was not equal to {:?}",
        current_output18,
        target_output18
    );

    let test_input19 = array![[
        [0.50388184, 0.85626405, 0.24466414, 0.09893909, 0.05245275],
        [0.11470018, 0.90349659, 0.31138107, 0.82471947, 0.01722594],
        [0.5932752, 0.70548972, 0.57845507, 0.26923983, 0.62891106],
        [0.11725764, 0.40164034, 0.69518119, 0.80738875, 0.6793183]
    ]];

    let kernel19: Array4<f32> = Array::from_shape_vec(
        (1, 1, 4, 4),
        vec![
            0.71761442, 0.50780315, 0.94015468, 0.35663, 0.00467546, 0.84130347, 0.34600323,
            0.40760242, 0.4710771, 0.98480686, 0.13988449, 0.40220328, 0.55816801, 0.84533263,
            0.42742897, 0.45769088,
        ],
    )
    .unwrap();
    let conv_layer19 = TransposedConvolutionLayer::new(kernel19, 1, Padding::Valid);
    let target_output19 = array![[
        [
            0.36159289, 0.87034023, 1.08411503, 1.17996144, 0.62327403, 0.20690829, 0.08459835,
            0.01870622
        ],
        [
            0.08466639, 1.13452828, 1.68595243, 2.34823585, 1.56326985, 1.07324672, 0.3687914,
            0.02752316
        ],
        [
            0.66364628, 1.8078512, 3.16138101, 2.59698367, 3.05416083, 1.36945283, 1.07654154,
            0.25240657
        ],
        [
            0.42220297, 2.2926507, 3.74284196, 4.05200386, 4.24810314, 2.66617346, 1.65576923,
            0.52954644
        ],
        [
            0.34404856, 1.61839128, 2.41856551, 2.97143054, 3.26615429, 2.53349161, 1.14523339,
            0.53772604
        ],
        [
            0.38638461, 1.19997633, 1.91225612, 2.38065767, 2.52269936, 1.97301626, 0.81180388,
            0.56107092
        ],
        [
            0.06544946, 0.32330447, 0.77766681, 1.2636584, 1.54265356, 1.23752928, 0.65989482,
            0.31091779
        ]
    ]];
    let current_output19 = conv_layer19.transposed_convolve(&test_input19);

    assert!(
        arr_allclose(&current_output19, &target_output19),
        "{:?} was not equal to {:?}",
        current_output19,
        target_output19
    );

    let test_input20 = array![[
        [0.83071573, 0.04634837, 0.39555076, 0.60654117, 0.97791479],
        [0.34863748, 0.18171401, 0.93737433, 0.01817268, 0.31007424],
        [0.40953961, 0.55591142, 0.20362667, 0.38996139, 0.26285828],
        [0.9031745, 0.95724048, 0.52430856, 0.55766591, 0.65770666]
    ]];

    let kernel20: Array4<f32> = Array::from_shape_vec(
        (1, 1, 4, 4),
        vec![
            0.75144028, 0.53338896, 0.94846253, 0.69645764, 0.96843016, 0.66096356, 0.17514281,
            0.83987904, 0.40466376, 0.13681252, 0.53675128, 0.55692621, 0.5836484, 0.26183346,
            0.24014333, 0.45519071,
        ],
    )
    .unwrap();
    let conv_layer20 = TransposedConvolutionLayer::new(kernel20, 1, Padding::Valid);
    let target_output20 = array![[
        [
            0.62423325, 0.47792265, 1.10985732, 1.28927982, 1.46581173, 1.37237477, 1.34994578,
            0.68107623
        ],
        [
            1.06647038, 0.91646457, 1.6911664, 2.48345661, 2.71446466, 1.9202801, 0.98744631,
            1.03728366
        ],
        [
            0.98153615, 1.17500007, 2.5392065, 2.96302795, 2.33174777, 2.32694387, 1.45316863,
            0.98812085
        ],
        [
            1.70121908, 2.37589598, 3.43136168, 4.46334934, 4.54847479, 2.81394124, 2.07324409,
            1.29666018
        ],
        [
            1.24386895, 2.00231528, 2.35531759, 2.98332858, 2.97350502, 1.84366274, 1.02456808,
            0.83992958
        ],
        [
            0.60450912, 0.94261408, 1.19066203, 1.91503441, 1.71444821, 0.93647224, 0.90423411,
            0.48594475
        ],
        [
            0.52713633, 0.79517317, 0.77354079, 1.10375381, 1.09152126, 0.54478979, 0.4117882,
            0.29938197
        ]
    ]];
    let current_output20 = conv_layer20.transposed_convolve(&test_input20);

    assert!(
        arr_allclose(&current_output20, &target_output20),
        "{:?} was not equal to {:?}",
        current_output20,
        target_output20
    );

    let test_input21 = array![[
        [0.36609648, 0.66722493, 0.40931306, 0.76783566, 0.71030917],
        [0.87999191, 0.10468024, 0.23255507, 0.38094539, 0.40905062],
        [0.59137548, 0.66255471, 0.64648789, 0.59517514, 0.5136288],
        [0.05843278, 0.51399223, 0.38453336, 0.69702778, 0.50475239]
    ]];

    let kernel21: Array4<f32> = Array::from_shape_vec(
        (1, 1, 4, 4),
        vec![
            0.06902273, 0.09784848, 0.35103089, 0.99617131, 0.65296593, 0.44575031, 0.25736929,
            0.95939058, 0.07333596, 0.80891676, 0.51967519, 0.25790987, 0.98334417, 0.6337845,
            0.69324831, 0.76697878,
        ],
    )
    .unwrap();
    let conv_layer21 = TransposedConvolutionLayer::new(kernel21, 1, Padding::Valid);
    let target_output21 = array![[
        [
            0.02526898, 0.08187567, 0.22205001, 0.6919601, 0.93251091, 0.74678266, 1.01423633,
            0.70758957
        ],
        [
            0.29978794, 0.69219398, 0.99410385, 2.16919231, 1.80296671, 1.31234217, 1.44254231,
            1.08894837
        ],
        [
            0.64227104, 0.90927893, 1.50203598, 2.97820044, 2.6358285, 2.48585653, 1.81111085,
            1.08729732
        ],
        [
            0.81471503, 2.34508133, 2.60522771, 3.99427247, 4.61939287, 3.56474495, 2.96689773,
            1.6458807
        ],
        [
            0.94685864, 1.54929042, 2.29100299, 3.14781928, 3.1435113, 2.36652541, 1.79480195,
            0.93045777
        ],
        [
            0.58581084, 1.11128521, 1.93995023, 2.55223536, 2.77187872, 2.10368228, 1.25463665,
            0.52412301
        ],
        [
            0.05745954, 0.54246509, 0.74439746, 1.33027053, 1.59890902, 1.09804654, 0.88452435,
            0.3871344
        ]
    ]];
    let current_output21 = conv_layer21.transposed_convolve(&test_input21);

    assert!(
        arr_allclose(&current_output21, &target_output21),
        "{:?} was not equal to {:?}",
        current_output21,
        target_output21
    );

    let test_input22 = array![[
        [0.61443019, 0.86792451, 0.25625055],
        [0.35837705, 0.59633007, 0.83091686],
        [0.23309404, 0.65488359, 0.26520997]
    ]];

    let kernel22: Array4<f32> = Array::from_shape_vec(
        (1, 1, 4, 4),
        vec![
            0.34644812, 0.87685893, 0.56456918, 0.50217426, 0.967748, 0.96909704, 0.00554681,
            0.48245647, 0.05388465, 0.2207341, 0.93746062, 0.75877589, 0.98550952, 0.38765016,
            0.70755854, 0.35234871,
        ],
    )
    .unwrap();
    let conv_layer22 = TransposedConvolutionLayer::new(kernel22, 1, Padding::Valid);
    let target_output22 = array![[
        [0.21286818, 0.83945942, 1.19671321, 1.0232501, 0.58052051, 0.12868243],
        [0.71877259, 1.95621824, 2.10559297, 1.79481602, 1.18872881, 0.54089481],
        [0.460682, 1.53806651, 2.96311998, 3.03720379, 1.66969228, 0.72849959],
        [0.8504141, 2.0644238, 2.42869711, 2.31741619, 2.03598094, 0.8487215],
        [0.36574417, 0.81335378, 1.68097901, 1.7196517, 1.54357219, 0.49400744],
        [0.22971639, 0.73575294, 0.68016034, 0.6483075, 0.41839898, 0.0934464]
    ]];
    let current_output22 = conv_layer22.transposed_convolve(&test_input22);

    assert!(
        arr_allclose(&current_output22, &target_output22),
        "{:?} was not equal to {:?}",
        current_output22,
        target_output22
    );

    let test_input23 = array![[
        [0.86497679, 0.36315935, 0.0597226],
        [0.40005399, 0.3090082, 0.1404125],
        [0.32328949, 0.77128536, 0.74202918]
    ]];

    let kernel23: Array4<f32> = Array::from_shape_vec(
        (1, 1, 4, 4),
        vec![
            0.0151671, 0.34408022, 0.36001204, 0.32235638, 0.1375511, 0.39828563, 0.73056589,
            0.77667642, 0.86437463, 0.90270169, 0.44541779, 0.34967113, 0.75469949, 0.35844142,
            0.80019287, 0.25439821,
        ],
    )
    .unwrap();
    let conv_layer23 = TransposedConvolutionLayer::new(kernel23, 1, Padding::Valid);
    let target_output23 = array![[
        [0.01311919, 0.30312946, 0.43726382, 0.43012187, 0.13856758, 0.01925196],
        [0.12504616, 0.53679824, 1.03725612, 1.24942541, 0.47584957, 0.091648],
        [0.80759519, 1.41949749, 1.59240317, 1.74771833, 1.01193607, 0.36913615],
        [1.04306293, 1.44720066, 2.09133768, 2.0464344, 1.4519105, 0.64060813],
        [0.5813638, 1.3351177, 2.01848149, 1.52578902, 0.79117745, 0.29518685],
        [0.2439864, 0.69796896, 1.09516358, 0.96539533, 0.78998011, 0.18877089]
    ]];
    let current_output23 = conv_layer23.transposed_convolve(&test_input23);

    assert!(
        arr_allclose(&current_output23, &target_output23),
        "{:?} was not equal to {:?}",
        current_output23,
        target_output23
    );

    let test_input24 = array![[
        [0.72871477, 0.96180466, 0.34620104],
        [0.94261591, 0.50686453, 0.61523259],
        [0.12266664, 0.55900903, 0.21047816]
    ]];

    let kernel24: Array4<f32> = Array::from_shape_vec(
        (1, 1, 4, 4),
        vec![
            0.16580609, 0.2582814, 0.15493484, 0.20253018, 0.21612453, 0.50386606, 0.91294247,
            0.80801025, 0.83888204, 0.7180022, 0.20993725, 0.58702784, 0.52850523, 0.00845493,
            0.90907092, 0.63151247,
        ],
    )
    .unwrap();
    let conv_layer24 = TransposedConvolutionLayer::new(kernel24, 1, Padding::Valid);
    let target_output24 = array![[
        [0.12082534, 0.34768656, 0.4187218, 0.38602108, 0.24843308, 0.07011615],
        [0.3137846, 0.90254557, 1.60368502, 2.06966257, 1.29118609, 0.40433717],
        [0.83536702, 2.03892708, 2.58118248, 2.57846022, 1.75433683, 0.74297208],
        [1.20238435, 1.7991029, 2.37062502, 3.15446997, 1.99265623, 0.74985743],
        [0.6010803, 0.83286786, 1.79003215, 1.40174067, 1.25172234, 0.51208359],
        [0.06482996, 0.29647633, 0.22747785, 0.58742392, 0.54436076, 0.13291958]
    ]];
    let current_output24 = conv_layer24.transposed_convolve(&test_input24);

    assert!(
        arr_allclose(&current_output24, &target_output24),
        "{:?} was not equal to {:?}",
        current_output24,
        target_output24
    );
}
